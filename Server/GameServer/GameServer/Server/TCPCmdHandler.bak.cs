//#define ONLINE_TEST //是否打开压力测试代码

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using Server.Protocol;
using Server.TCP;
using Server.Tools;
using System.Windows;
using Server.Data;
using GameServer.Logic;
using GameServer.Logic.BangHui.ZhanMengShiJian;
using GameServer.Server.CmdProcesser;
using GameServer.Core.GameEvent;
using GameServer.Server;
using GameServer.Logic.LiXianGuaJi;
using GameServer.Logic.Copy;
using GameServer.Core.GameEvent.EventOjectImpl;
using GameServer.Logic.WanMota;
using GameServer.Core.Executor;
using GameServer.Logic.YueKa;
using StdErrorCode = Tmsk.Contract.StdErrorCode;
using Tmsk.Contract;
using GameServer.Logic.SecondPassword;
using GameServer.Logic.UserReturn;
using GameServer.Logic.Goods;
using GameServer.Logic.ActivityNew;
using System.Diagnostics;
using GameServer.Logic.Name;
using GameServer.Tools;
using GameServer.Logic.ProtoCheck;
using GameServer.Logic.LoginWaiting;
using GameServer.Logic.MoRi;
using KF.Client;
using GameServer.Logic.ActivityNew.SevenDay;
using KF.Contract.Data;
using GameServer.Logic.FluorescentGem;
using GameServer.Logic.CheatGuard;
using GameServer.Logic.UnionPalace;
using GameServer.Logic.Video;
using GameServer.Logic.UnionAlly;
using GameServer.KiemThe.Entities;
using GameServer.KiemThe;
using GameServer.KiemThe.Logic;
using GameServer.KiemThe.GameDbController;
using GameServer.KiemThe.Utilities;
using GameServer.KiemThe.Core.Item;
using GameServer.KiemThe.Logic.Manager.Shop;

namespace GameServer.Server
{
    /// <summary>
    /// 用户命令
    /// </summary>
    public enum TCPGameServerCmds
    {
        CMD_UNKNOWN = 0,
        CMD_LOGIN_ON1 = 1,
        CMD_LOGIN_ON2 = 20,
        CMD_NTF_CMD_BASE_ID = 21,
        CMD_LOG_OUT = 22,
        CMD_SPR_CLIENTHEART = 23,
        CMD_SPR_GENERATE_NEW_KEY = 24,
        CMD_PREREMOVE_ROLE = 98, // 预删除角色
        CMD_UNREMOVE_ROLE = 99, // 恢复预删除的角色
        CMD_LOGIN_ON = 100,
        CMD_ROLE_LIST, CMD_CREATE_ROLE, CMD_REMOVE_ROLE,
        CMD_INIT_GAME, CMD_SYNC_TIME, CMD_PLAY_GAME, CMD_SPR_MOVE, CMD_SPR_MOVEEND, CMD_SPR_MOVE2,
        CMD_OTHER_ROLE, CMD_OTHER_ROLE_DATA, CMD_SPR_POSITION, CMD_SPR_PETPOS, CMD_SPR_ACTTION, CMD_SPR_ACTTION2,
        CMD_SPR_MAGICCODE, CMD_SPR_ATTACK, CMD_SPR_INJURE,
        CMD_SPR_REALIVE, CMD_SPR_RELIFE, CMD_SPR_CLICKON, CMD_SYSTEM_MONSTER,
        CMD_SPR_MAPCHANGE, CMD_LOG_OUT_Unused_Dont_Del, CMD_SPR_NEWTASK, CMD_SPR_GETATTRIB2,
        CMD_SPR_LEAVE, CMD_SPR_NPC_BUY, CMD_SPR_NPC_SALEOUT, CMD_SPR_ADD_GOODS, CMD_SPR_MOD_GOODS,
        CMD_SPR_MERGE_GOODS, CMD_SPR_SPLIT_GOODS, CMD_SPR_GET_MERGETYPES, CMD_SPR_GET_MERGEITEMS, CMD_SPR_GET_MERGENEWGOODS,
        CMD_SPR_CHGCODE, CMD_SPR_MONEYCHANGE, CMD_SPR_MODTASK, CMD_SPR_COMPTASK, CMD_SPR_EXPCHANGE,
        CMD_SPR_GETFRIENDS, CMD_SPR_ADDFRIEND, CMD_SPR_REMOVEFRIEND,
        CMD_SPR_NEWGOODSPACK, CMD_SPR_DELGOODSPACK, CMD_SPR_CLICKONGOODSPACK,
        CMD_SPR_GETTHING, CMD_SPR_CHGPKMODE, CMD_SPR_CHGPKVAL, CMD_SPR_UPDATENPCSTATE, CMD_SPR_NPCSTATELIST, CMD_SPR_GETNEWTASKDATA,
        CMD_SPR_ABANDONTASK, CMD_SPR_HITED, CMD_SPR_MODKEYS, CMD_SPR_CHAT,
        CMD_SPR_USEGOODS, CMD_SPR_CHANGEPOS, CMD_SPR_NOTIFYCHGMAP, CMD_SPR_FORGE, CMD_SPR_ENCHANCE,
        CMD_SPR_GETOTHERATTRIB, CMD_SPR_UPDATE_ROLEDATA, CMD_SPR_REMOVE_COOLDOWN,
        CMD_SPR_MALL_BUY, CMD_SPR_YINLIANG_BUY, CMD_SPR_USERMONEYCHANGE, CMD_SPR_USERYINLIANGCHANGE, CMD_SPR_GOODSEXCHANGE, CMD_SPR_EXCHANGEDATA,
        CMD_SPR_MOVEGOODSDATA, CMD_SPR_GOODSSTALL, CMD_SPR_STALLDATA, CMD_SPR_STALLNAME,
        CMD_SPR_TEAM, CMD_SPR_TEAMDATA, CMD_SPR_TEAMID, CMD_SPR_BATTLE, CMD_SPR_NPCSCRIPT,
        CMD_SPR_DEAD, CMD_SPR_AUTOFIGHT, CMD_SPR_HORSE, CMD_SPR_PET,
        CMD_SPR_DIANJIANGLIST, CMD_SPR_DIANJIANGDATA, CMD_SPR_DJROOMROLESDATA, CMD_SPR_DIANJIANG, CMD_SPR_DIANJIANGFIGHT,
        CMD_SPR_DIANJIANGPOINT, CMD_SPR_GETDJPOINTS, CMD_SPR_UPDATEINTERPOWER,
        CMD_SPR_GOTOMAP, CMD_SPR_NOTIFYMSG, CMD_SPR_QUERYIDBYNAME, CMD_ADDHORSE, CMD_ADDPET, CMD_GETHORSELIST, CMD_GETOTHERHORSELIST, CMD_GETPETLIST,
        CMD_MODHORSE, CMD_MODPET, CMD_SELECTHORSE, CMD_GETGOODSLISTBYSITE, CMD_GETLINEINFO, CMD_GETJINGMAILIST, CMD_UP_JINGMAI_LEVEL,
        CMD_GETOTHERJINGMAILIST, CMD_SPR_LOADALREADY, CMD_SPR_BULLETINMSG, CMD_SPR_GMAUTH, CMD_SPR_EQUIPUPGRADE, CMD_SPR_ENCHASEJEWEL,
        CMD_SPR_SHOWBIGUAN, CMD_SPR_GETBIGUAN, CMD_SPR_UPSKILLLEVEL, CMD_SPR_ADD_SKILL, CMD_SPR_JINGMAI_INFO, CMD_SPR_HORSEENCHANCE,
        CMD_SPR_HORSEUPGRADE, CMD_SPR_SALEGOODS, CMD_SPR_SELFSALEGOODSLIST, CMD_SPR_OTHERSALEGOODSLIST, CMD_SPR_MARKETROLELIST,
        CMD_SPR_MARKETGOODSLIST, CMD_SPR_MARKETBUYGOODS, CMD_SPR_MODDEFSKILLID, CMD_SPR_MODAUTODRINK, CMD_SPR_PLAYDECO, CMD_SPR_BUFFERDATA,
        CMD_SPR_RUNTOMAP, CMD_SPR_SEARCHROLES, CMD_SPR_LISTROLES, CMD_SPR_LISTTEAMS, CMD_SPR_RESETBAG, CMD_SPR_DAILYTASKDATA, CMD_SPR_DAILYJINGMAIDATA,
        CMD_SPR_CHGNUMSKILLID, CMD_SPR_GETSKILLUSEDNUM, CMD_SPR_CHGHORSEBODY, CMD_SPR_PORTABLEBAGDATA, CMD_SPR_RESETPORTABLEBAG,
        CMD_SPR_EXECWABAO, CMD_SPR_GETWABAODATA, CMD_SPR_GETHUODONGDATA, CMD_SPR_GETWLOGINGIFT, CMD_SPR_GETNEWSTEPGIFT, CMD_SPR_GETMTIMEGIFT,
        CMD_SPR_GETBIGGIFT, CMD_SPR_GETSONGLIGIFT, CMD_SPR_CHGHUODONGID, CMD_SPR_FUBENDATA, CMD_SPR_ENTERFUBEN, CMD_SPR_NOTIFYENTERFUBEN,
        CMD_SPR_CLIENTHEART_OLD, CMD_SPR_OHTERJINGMAIEXP, CMD_GETRANDOMNAME, CMD_SKILLUSEDNUMFULL, CMD_SPR_GETFUBENHISTDATA, CMD_SPR_GETFUBENBEGININFO,
        CMD_SPR_COPYMAPMONSTERSNUM, CMD_SPR_FINDMONSTER, CMD_SPR_BATCHYINPIAO, CMD_SPR_FORCETOLAOFANG, CMD_SPR_CHGPURPLENAME, CMD_SPR_CHGLIANZHAN,
        CMD_SPR_GETROLEDAILYDATA, CMD_SPR_GETBOSSINFODICT, CMD_SPR_GETPAIHANGLIST, CMD_SPR_YABIAODATA, CMD_SPR_STARTYABIAO, CMD_SPR_ENDYABIAO,
        CMD_SPR_YABIAOTAKEGOODS, CMD_SPR_TOUBAO, CMD_SPR_GETOTHERATTRIB2, CMD_SPR_NEWBIAOCHE, CMD_SPR_DELBIAOCHE, CMD_SPR_FINDBIAOCHE,
        CMD_SPR_CHGBIAOCHELIFEV, CMD_SPR_NOTIFYENDCHONGXUE, CMD_SPR_ADDHORSELUCKY, CMD_SPR_BATTLEKILLEDNUM, CMD_SPR_CHGBATTLENAMEINFO,
        CMD_SPR_NOFITYPOPUPWIN, CMD_SPR_NOTIFYBATTLEROLEINFO, CMD_SPR_NOTIFYBATTLEENDINFO, CMD_SPR_GETCHONGZHIJIFEN, CMD_SPR_NOTIFYTEAMCHGLEVEL,
        CMD_SPR_GETFUBENHISTLISTDATA, CMD_SPR_CHGHEROINDEX, CMD_GETOTHERHORSEDATA, CMD_UPDATEALLTHINGINDEXS, CMD_SPR_CHGHALFYINLIANGPERIOD,
        CMD_SPR_GETBANGHUILIST, CMD_SPR_CREATEBANGHUI, CMD_SPR_CHGBANGHUIINFO, CMD_SPR_QUERYBANGHUIDETAIL, CMD_SPR_UPDATEBANGHUIBULLETIN,
        CMD_SPR_GETBHMEMBERDATALIST, CMD_SPR_UPDATEBHVERIFY, CMD_SPR_APPLYTOBHMEMBER, CMD_SPR_ADDBHMEMBER, CMD_SPR_REMOVEBHMEMBER,
        CMD_SPR_QUITFROMBANGHUI, CMD_SPR_DESTROYBANGHUI, CMD_SPR_BANGHUIVERIFY, CMD_SPR_INVITETOBANGHUI, CMD_SPR_CHGBHMEMBERZHIWU,
        CMD_SPR_CHGBHMEMBERCHENGHAO, CMD_SPR_SEARCHROLESFROMDB, CMD_SPR_AGREETOTOBANGHUI, CMD_SPR_REFUSEAPPLYTOBH, CMD_SPR_GETBANGGONGHIST,
        CMD_SPR_DONATEBGMONEY, CMD_SPR_DONATEBGGOODS, CMD_SPR_BANGGONGCHANGE, CMD_SPR_GETBANGQIINFO, CMD_SPR_RENAMEBANGQI, CMD_SPR_UPLEVELBANGQI,
        CMD_SPR_CHGJUNQILIFEV, CMD_SPR_NEWJUNQI, CMD_SPR_DELJUNQI, CMD_SPR_LINGDIFORBH, CMD_SPR_CHGHUANGDIROLEID, CMD_SPR_GETBHLINGDIINFODICTBYBHID,
        CMD_SPR_SETLINGDITAX, CMD_SPR_TAKELINGDITAXMONEY, CMD_SPR_GETHUANGDIBHINFO, CMD_SPR_NOTIFYBHZHIWU, CMD_SPR_OPENYANGGONGBK, CMD_SPR_REFRESHYANGGONGBK,
        CMD_SPR_CLICKYANGGONGBK, CMD_SPR_REFRESHQIZHENGE, CMD_SPR_QIZHEGEBUY, CMD_SPR_QUERYQIZHEGEBUYHIST, CMD_SPR_QUICKJINGMAI, CMD_SPR_QUICKHORSEENCHANCE,
        CMD_SPR_QUICKEQUIPENHANCE, CMD_SPR_QUICKEQUIPFORGE, CMD_SPR_GETHUANGDIROLEDATA, CMD_SPR_ADDHUANGFEI, CMD_SPR_REMOVEHUANGFEI, CMD_SPR_GETHUANGFEIDATA,
        CMD_SPR_SENDTOLAOFANG, CMD_SPR_TAKEOUTLAOFANG, CMD_SPR_BANCHAT, CMD_SPR_CHGHUANGHOU, CMD_SPR_GETLINGDIMAPINFO, CMD_SPR_GETHUANGCHENGMAPINFO,
        CMD_SPR_ADDLINGDITAXMONEY, CMD_SPR_INVITEADDHUANGFEI, CMD_SPR_AGREEADDHUANGFEI, CMD_SPR_TASKTRANSPORT, CMD_SPT_LINGLIGUANZHU, CMD_SPR_GETGOODSBYDBID,
        CMD_SPR_QUICKCOMPLETETASK, CMD_SPR_QUERYCHONGZHIMONEY, CMD_SPR_GETFIRSTCHONGZHIDALI, CMD_SPR_NOTIFYBATTLESIDE, CMD_SPR_NOTIFYBATTLEAWARD, CMD_SPR_EXECWABAOBYYAOSHI,
        CMD_SPR_SUBFORGE, CMD_SPR_GETUSERMAILLIST, CMD_SPR_GETUSERMAILDATA, CMD_SPR_FETCHMAILGOODS, CMD_SPR_DELETEUSERMAIL, CMD_SPR_GETMAILSENDCODE,
        CMD_SPR_SENDUSERMAIL, CMD_SPR_RECEIVELASTMAIL, CMD_SPR_EQUIPBORNINDEXUPDATE, CMD_SPR_EQUIPINHERIT, CMD_SPR_QUERYINPUTFANLI,
        CMD_SPR_QUERYINPUTJIASONG, CMD_SPR_QUERYINPUTKING, CMD_SPR_QUERYLEVELKING, CMD_SPR_QUERYEQUIPKING, CMD_SPR_QUERYHORSEKING, CMD_SPR_QUERYJINGMAIKING,
        CMD_SPR_QUERYAWARDHIST, CMD_SPR_EXECUTEINPUTFANLI, CMD_SPR_EXECUTEINPUTJIASONG, CMD_SPR_EXECUTEINPUTKING, CMD_SPR_EXECUTELEVELKING, CMD_SPR_EXECUTEEQUIPKING,
        CMD_SPR_EXECUTEHORSEKING, CMD_SPR_EXECUTEJINGMAIKING, CMD_SPR_MALLZHENQIBUY, CMD_SPR_FETCHACTIVITYAWARD, CMD_SPR_VIPDAILYDATA, CMD_SPR_USEVIPDAILYPRIORITY,
        CMD_SPR_ACTIVITYTRANSPORT, CMD_SPR_YANGGONGBKDAILYDATA, CMD_SPR_FETCHYANGGONGBKJIFENAWARD, CMD_SPR_QUERYSHILIANTAAWARDINFO, CMD_SPR_FETCHSHILIANTAAWARD,
        CMD_SPR_COMPLETETINYCLIENT, CMD_SPR_USERGOLDCHANGE, CMD_SPR_NOTIFYSHENGXIAOGUESSSTAT, CMD_SPR_NOTIFYSHENGXIAOGUESSRESULT, CMD_SPR_ADDSHENGXIAOMORTGAGE,
        CMD_SPR_QUERYROLESHENGXIAOGUESSLIST, CMD_SPR_QUERYSHENGXIAOGUESSHISTORY, CMD_SPR_QUERYSHENGXIAORECENTRESULTLIST, CMD_SPR_QUERYSHENGXIAOGUESSSELFHISTORY,
        CMD_SPR_UPDATETENGXUNFCMRATE, CMD_SPR_NEWNPC, CMD_SPR_DELNPC, CMD_SPR_EXTGRIDBYYUANBAO, CMD_SPR_SUBMONEY, CMD_SPR_EXTBAGNUMBYYUANBAO, CMD_SPR_STOPMOVE,
        CMD_SPR_NOTIFYEQUIPSTRONG,
        CMD_SPR_EXCUTENPCLUATALK, CMD_SPR_EXCUTENPCLUAFUNCTION, CMD_SPR_ARENABATTLE, CMD_SPR_ARENABATTLEKILLEDNUM, CMD_SPR_CITYWARREQUEST, CMD_SPR_TAKELINGDIDAILYAWARD,
        CMD_SPR_NOTIFYOPENWINDOW, CMD_SPR_CHENGJIUDATA, CMD_SPR_FETCHCHENGJIUAWARD, CMD_SPR_DSHIDECMD, CMD_SPR_NEWDECO, CMD_SPR_DELDECO, CMD_SPR_MENDEQUIPMENT,
        CMD_SPR_NOTIFYGOODSINFO, CMD_SPR_ROLEPARAMSCHANGE, CMD_SPR_EQUIPFENJIE, CMD_SPR_JINGYUANEXCHANGE, CMD_SPR_HUIZHANGEXCHANGE, CMD_SPR_ACTIVATNEXTLEVELJINGMAI,
        CMD_SPR_FETCHVIPONCEAWARD, CMD_SPR_TASKTRANSPORT2, CMD_SPR_ACTIVATNEXTLEVELWUXUE, CMD_SPR_CAIJI, CMD_SPR_RUNTASKPLOTLUA,
        CMD_SPR_PLAYGAMEEFFECT, CMD_SPR_TRANSFERSOMETHING, CMD_SPR_CHANGEPETAITYPE, CMD_SPR_FETCHMALLDATA, CMD_SPR_MALLQIANGGOUBUYGOODS,
        CMD_SPR_FETCHZUANHUANGAWARD, CMD_SPR_SETSYSTEMOPENPARAMS, CMD_SPR_ENTERTASKFUBEN, CMD_SPR_GETUPLEVELGIFTOK, CMD_SPR_UPDATEWEIGHTS,
        CMD_SPR_GETTASKAWARDS, CMD_SPR_NOTIFYGETGOODSPACK, CMD_SPR_RESETJINDANBAG, CMD_SPR_GETJINDANGOODSLIST, CMD_SPR_ZAJINDAN, CMD_SPR_QUERYZAJINDANHISTORY,
        CMD_SPR_QUERYSELFZAJINDANHISTORY, CMD_SPR_GETWANGCHENGMAPINFO, CMD_SPR_GETLIMITTIMELOGINGIFT, CMD_SPR_ROLESTATUSCMD, CMD_SPR_GETTO60AWARD, CMD_SPR_GETKAIFUONLINEINFO,
        CMD_SPR_GETDAYCHONGZHIDALI, CMD_SPR_GETJIERIXMLDATA, CMD_SPR_QUERYJIERIDALIBAO, CMD_SPR_QUERYJIERIDENGLU, CMD_SPR_QUERYJIERIVIP, CMD_SPR_QUERYJIERICZSONG, CMD_SPR_QUERYJIERICZLEIJI,
        CMD_SPR_QUERYJIERIZIKA, CMD_SPR_QUERYJIERIXIAOFEIKING, CMD_SPR_QUERYJIERICZKING, CMD_SPR_EXECUTEJIERIDALIBAO, CMD_SPR_EXECUTEJIERIDENGLU, CMD_SPR_EXECUTEJIERIVIP, CMD_SPR_EXECUTEJIERICZSONG, CMD_SPR_EXECUTEJIERICZLEIJI,
        CMD_SPR_EXECUTEJIERIZIKA, CMD_SPR_EXECUTEJIERIXIAOFEIKING, CMD_SPR_EXECUTEJIERICZKING, CMD_SPR_CHGJIERICHENGHAO, CMD_SPR_FACTIVITIESDATA, CMD_SPR_YUANBAOCOMPLETETASK,
        CMD_SPR_QUERYHEFUDALIBAO, CMD_SPR_QUERYHEFUVIP, CMD_SPR_QUERYHEFUCZSONG, CMD_SPR_QUERYHEFUFANLI, CMD_SPR_QUERYHEFUPKKING, CMD_SPR_QUERYHEFUWCKING, CMD_SPR_QUERYXINFANLI,
        CMD_SPR_EXECUHEFUDALIBAO, CMD_SPR_EXECUHEFUVIP, CMD_SPR_EXECUHEFUCZSONG, CMD_SPR_EXECUHEFUFANLI, CMD_SPR_EXECUHEFUPKKING, CMD_SPR_EXECUHEFUWCKING, CMD_SPR_EXECUXINFANLI,
        CMD_SPR_ONEKEYQUICKSALEOUT, CMD_SPR_ACTIVATNEXTLEVELZHANHUN, CMD_SPR_ACTIVATNEXTLEVELRONGYU, CMD_SPR_ACTIVATRONGYUBUFFER, CMD_SPR_LIANLUJINGLIAN, CMD_SPR_ZJDJIFEN,
        CMD_SPR_FETCHZJDJIFENAWARD,
        CMD_SPR_QUERYACTIVITYINFO,  // 客户端请求活动的相关信息 -- 比如冲级豪礼名额 神装领取名额 幸运抽奖次数[7/18/2013 LiaoWei]
        CMD_SPR_XINGYUNCHOUJIANG,   // 幸运抽奖 [7/18/2013 LiaoWei]
        CMD_SPR_QUERYYUEDUCHOUJIANGHISTORY,         // 客户端请求月度抽奖历史(全服玩家)[7/23/2013 LiaoWei]
        CMD_SPR_QUERYSELFQUERYYUEDUCHOUJIANGHISTORY,// 客户端请求月度抽奖历史(玩家自己) [7/23/2013 LiaoWei]
        CMD_SPR_EXECUTEYUEDUCHOUJIANG,              // 客户端点击月度抽奖 [7/23/2013 LiaoWei]
        CMD_SPR_QUERYYUEDUCHOUJIANGINFO,            // 客户端请求月度抽奖信息--能玩的次数和活动期间充值的元宝数 [7/23/2013 LiaoWei]
        CMD_SPR_EXECUTEHUNQIEXCHANGE,               // 客户端发起魂器卖出操作 [8/7/2013 LiaoWei]
        CMD_SPR_EXECUTECHANGEOCCUPATION,            // 客户端发起转职操作  [9/28/2013 LiaoWei]
        CMD_SPR_EXECUTECHANGELIFE,                  // 客户端发起转生操作  [9/28/2013 LiaoWei]
        CMD_SPR_BEGINBLINK,                         // 闪现开始 [10/28/2013 LiaoWei]
        CMD_SPR_ENDBLINK,                           // 闪现结束 [10/28/2013 LiaoWei]
        CMD_SPR_GETROLEUSINGGOODSDATALIST,
        CMD_SPR_EXECUTEPROPADDPOINT,                // 属性加点 [10/31/2013 LiaoWei]
        CMD_SPR_EXECUTERECOMMENDPROPADDPOINT,       // 推荐属性加点 [10/31/2013 LiaoWei]
        CMD_SPR_EXECUTERECLEANPROPADDPOINT,         // 清除属性加点 [10/31/2013 LiaoWei]
        CMD_SPR_QUERYCLEANPROPADDPOINT,             // 请求清除属性加点信息 [2/11/2014 LiaoWei]
        CMD_SPR_BLOODCASTLEBEGINFIGHT,              // 血色堡垒开始战斗 -- 客户端把桥头的阻挡去掉 [11/7/2013 LiaoWei]
        CMD_SPR_BLOODCASTLEKILLMONSTERAHASDONE,     // 血色堡垒断桥怪击杀到达限额 -- 客户端把桥尾的阻挡去掉 [11/7/2013 LiaoWei]
        CMD_SPR_BLOODCASTLEENDFIGHT,                // 血色堡垒结束战斗 -- 客户端显示倒计时界面 [11/7/2013 LiaoWei]
        CMD_SPR_FUBENCLEANOUT,                      // 副本扫荡 [11/15/2013 LiaoWei]
        CMD_SPR_FUBENPASSNOTIFY,                    // 副本通关通告 [11/15/2013 LiaoWei]
        CMD_SPR_QUERYFUBENINFO,                    // 客户端请求副本信息 [11/15/2013 LiaoWei]
        CMD_SPR_ATTACK2,                           // 2号攻击请求 针对于黑龙波等特殊技能 [11/22/2013 LiaoWei]
        CMD_SPR_COMPLETEFLASHSCENE,                // 完成新手场景 [11/30/2013 LiaoWei]
        CMD_SPR_FRESHPLAYERSCENEKILLMONSTERAHASDONE,// 新手场景断桥怪击杀到达限额 -- 客户端把桥尾的阻挡去掉 [12/1/2013 LiaoWei]
        CMD_SPR_REFURBISHTASKSTARLEVEL,             // 客户端刷新任务星级 [12/3/2013 LiaoWei]
        CMD_SPR_COMPLETEDAILYCIRCLETASKFORONCECLICK,// 一键完成日常跑环任务 [12/5/2013 LiaoWei]
        CMD_SPR_ADMIREDPLAYER,                      // 客户端点击崇拜某人的操作 [12/10/2013 LiaoWei]
        CMD_SPR_QUERYBLOODCASTLEINFO,               // 请求血色堡垒基本信息 [12/14/2013 LiaoWei]
        CMD_SPR_EQUIPAPPENDPROP,                    // 装备追加消息 [12/18/2013 LiaoWei]
        CMD_SPR_BLOODCASTLEPREPAREFIGHT,            // 血色堡垒准备战斗 -- 客户端显示战斗倒计时 [12/20/2013 LiaoWei]
        CMD_SPR_BLOODCASTLECOMBATPOINT,             // 血色堡垒战斗积分 -- 客户端显示战斗积分 [12/20/2013 LiaoWei]
        CMD_SPR_BLOODCASTLEKILLMONSTERSTATUS,       // 血色堡垒杀怪状态 -- 客户端显示杀怪的状态 [12/20/2013 LiaoWei]
        CMD_SPR_QUERYCAMPBATTLEINFO,                // 请求阵营战场基本信息 [12/23/2013 LiaoWei]
        CMD_SPR_QUERYDAIMONSQUAREINFO,              // 请求恶魔广场基本信息 [12/25/2013 LiaoWei]
        CMD_SPR_QUERYDAIMONSQUARETIMERINFO,         // 恶魔广场时间信息 [12/25/2013 LiaoWei]
        CMD_SPR_QUERYDAIMONSQUAREMONSTERWAVEANDPOINTRINFO,// 恶魔广场怪物和得分信息 [12/25/2013 LiaoWei]
        CMD_SPR_DAIMONSQUAREENDFIGHT,                // 恶魔广场结束 [12/25/2013 LiaoWei]
        CMD_SPR_UPDATEEVERYDAYONLINEAWARDGIFTINFO,    // 更新玩家的每日在线信息 [1/12/2014 LiaoWei]
        CMD_SPR_GETEVERYDAYONLINEAWARDGIFT,          // 领取每日在线奖励 [1/12/2014 LiaoWei]
        CMD_SPR_UPDATEEVERYDAYSERIESLOGININFO,      // 更新玩家的连续登陆信息 [1/12/2014 LiaoWei]
        CMD_SPR_GETEVERYDAYSERIESLOGINAWARDGIFT,    // 领取连续登陆奖励 [1/12/2014 LiaoWei]
        CMD_SPR_FRESHPLAYERSCENEOVERTIME,           // 新手场景超时 通知客户端 [1/16/2014 LiaoWei]
        CMD_SPR_UPDATEGETTHINGSFLAG,                // 更新拾取设置
        CMD_SPR_BLOODCASTLEPLAYERNUMNOTIFY,         // 血色堡垒人数通知 [1/20/2014 LiaoWei]
        CMD_SPR_DAIMONSQUAREPLAYERNUMNOTIFY,        // 恶魔广场人数通知 [1/20/2014 LiaoWei]
        CMD_SPR_BATTLEPLAYERNUMNOTIFY,              // 阵营战人数通知  [1/20/2014 LiaoWei]
        CMD_SPR_EXCHANGEMOJINGANDQIFU,              // 魔晶和祈福兑换 [1/23/2014 LiaoWei]
        CMD_SPR_GETMEDITATEEXP,                     // 获取冥想经验 [1/24/2014 LiaoWei]
        CMD_SPR_GETMEDITATETIMEINFO,                // 获取冥想时间信息 [1/24/2014 LiaoWei]
        CMD_SPR_QUERYTOTALLOGININFO,                // 请求累计登陆数据 [2/11/2014 LiaoWei]
        CMD_SPR_GETTOTALLOGINAWARD,                 // 领取累计登陆奖励 [2/11/2014 LiaoWei]
        CMD_SPR_CHANGELIFEFOREQUIP,                 // 客户端装备转生操作 [2/15/2014 LiaoWei]
        CMD_SPR_FLAKEOFFCHANGELIFEFOREQUIP,         // 客户端装备转生剥离操作 [2/15/2014 LiaoWei]
        CMD_SPR_ONEKEYFINDFRIEND,                   // 点击一键征友 [2/15/2014 LiaoWei]
        CMD_SPR_ONEKEYADDFRIEND,                    // 点击一键加友 [2/15/2014 LiaoWei]
        CMD_SPR_GETVIPAWARD,                        // 获得VIP奖励 [2/20/2014 LiaoWei]
        CMD_SPR_DAILYACTIVEDATA,                    // 获取每日活跃信息 [2/25/2014 LiaoWei]
        CMD_SPR_GETDAILYACTIVEAWARD,                // 获取每日活跃奖励 [2/25/2014 LiaoWei]
        CMD_SPR_SETAUTOASSIGNPROPERTYPOINT,         // 设置自动分配点设置 [3/3/2014 LiaoWei]
        CMD_SPR_GETBLOODCASTLEAWARD,                // 领取血色堡垒的奖励 [3/8/2014 LiaoWei]
        CMD_SPR_GETDAIMONSQUAREAWARD,               // 领取恶魔广场的奖励 [3/8/2014 LiaoWei]
        CMD_SPR_GETCOPYMAPAWARD,                    // 领取副本奖励 [3/5/2014 LiaoWei]
        CMD_SPR_GETSKILLINFO,                       // 客户端请求技能信息 [3/17/2014 LiaoWei]
        CMD_SPR_EXPERIENCECOPYMAPINFO,              // 经验副本信息 [3/18/2014 LiaoWei]
        CMD_SPR_ZHANMENGSHIJIAN_DETAIL,             // 战盟事件详情 [3/14/2014 JinJieLong]
        CMD_SPR_KAIFUACTIVITYINFO,                  // 开服活动信息 [3/20/2014 LiaoWei]
        CMD_SPR_GETTHEKINGOFPKINFO,                 // 请求PK之王基本信息 [3/22/2014 LiaoWei]
        CMD_SPR_NOTIFYTHEKINGOFPKAWARDINFO,         // PK之王奖励信息 [3/22/2014 LiaoWei]
        CMD_SPR_ANGELTEMPLETIMERINFO,               // 天使神殿时间信息(准备战斗、开始战斗、结束战斗) [12/20/2013 LiaoWei]
        CMD_SPR_ANGELTEMPLEFIGHTEND,                // 天使神殿结束--显示奖励[12/20/2013 LiaoWei]
        CMD_SPR_ANGELTEMPLEFIGHTINFOALL,            // 天使神殿战斗信息--群发 [3/23/2014 LiaoWei]
        CMD_SPR_ANGELTEMPLEFIGHTINFOSINGLE,         // 天使神殿战斗信息--给自己 [3/23/2014 LiaoWei]
        CMD_SPR_ANGELTEMPLESPARK,                   // 天使神殿战力鼓舞 [3/23/2014 LiaoWei]
        CMD_SPR_GETANGELTEMPLEBASEINFO,             // 天使神殿基本信息[3/23/2014 LiaoWei]
        CMD_SPR_QUERYADRATIONPKKINGINFO,            // 请求PK之王崇拜信息[3/23/2014 LiaoWei]
        CMD_SPR_ADRATIONPKKING,                     // PK之王崇拜[3/23/2014 LiaoWei]
        CMD_SPR_JINGJI_DETAIL,                      // 竞技场详情 [3/24/2014 JinJieLong]   
        CMD_SPR_JINGJI_REQUEST_CHALLENGE,           // 竞技场请求挑战 [3/24/2014 JinJieLong]
        CMD_SPR_JINGJI_CHALLENGE_END,               // 竞技场挑战结束弹出奖励窗口[3/24/2014 JinJieLong]
        CMD_SPR_JINGJI_NOTIFY_START,                // 竞技场通知开始倒计时
        CMD_SPR_JINGJI_CHALLENGEINFO,                // 竞技场战报[3/25/2014 JinJieLong]
        CMD_SPR_JINGJI_RANKING_REWARD,              // 竞技场领取排行榜奖励[3/25/2014 JinJieLong]
        CMD_SPR_JINGJICHANG_REMOVE_CD,              // 竞技场消除挑战CD [3/25/2014 JinJieLong]
        CMD_SPR_JINGJICHANG_GET_BUFF,               // 竞技场领取Buff [3/25/2014 JinJieLong]
        CMD_SPR_JINGJICHANG_JUNXIAN_LEVELUP,        // 竞技场升级军衔 [3/25/2014 JinJieLong]
        CMD_SPR_JINGJICHANG_LEAVE,                  // 离开竞技场消息[3/29/2014 JinJieLong]
        CMD_SPR_CHGFAKEROLELIFEV,                   //假人的血量修改
        CMD_SPR_NEWFAKEROLE,                        //新假人通知
        CMD_SPR_DELFAKEROLE,                        //删除假人
        CMD_SPR_OPENMARKET,                         //打开交易市场
        CMD_SPR_MARKETSALEMONEY,                    //交易市场中上架金币
        CMD_SPR_GETVIPINFO,                         // 玩家请求VIP信息 [3/28/2014 LiaoWei]
        CMD_SPR_GETVIPLEVELAWARD,                   // 玩家领取VIP等级奖励 [3/28/2014 LiaoWei]
        CMD_SPR_VIPLEVELUP,                         // 玩家VIP等级升级 [3/28/2014 LiaoWei]
        CMD_SPR_GETLIXIANBAITANTICKS,               // 获取离线摆摊时长(毫秒)
        CMD_SPR_UPDATELIXIANBAITANTICKS,            // 修改离线摆摊时长(毫秒)
        CMD_SPR_QUERYOPENGRIDTICK,                  // 请求开背包格子时间戳 [4/7/2014 LiaoWei]
        CMD_SPR_QUERYOPENPORTABLEGRIDTICK,          // 请求开随身仓库包裹的时间戳 [4/7/2014 LiaoWei]
        CMD_SPR_STARTMEDITATE,                      // 开始冥想
        CMD_SPR_ZHANMENGBUILDUPLEVEL,               // 战盟建筑升级
        CMD_SPR_ZHANMENGBUILDGETBUFFER,             // 领取战盟建筑的buffer
        CMD_SPR_GETBAITANLOG,                       // 获取摆摊日志
        CMD_SPR_GETPUSHMESSAGEINFO,                 // 客户端把推送信息发给服务器[4/23/2014 LiaoWei]
        CMD_SPR_ACTIVATIONPICTUREJUDGE,             // 激活图鉴 [5/3/2014 LiaoWei] (已废弃，请勿再使用，chenjingui 2015-05-29)
        CMD_SPR_GETNPICTUREJUDGEINFO,               // 取得图鉴信息 [5/3/2014 LiaoWei] (已废弃，请勿再使用，chenjingui 2015-05-29)
        CMD_SPR_MUEQUIPUPGRADE,                     // 装备进阶 [4/30/2014 LiaoWei]
        CMD_SPR_WINGUPSTAR,                         // 翅膀升星 [5/4/2014 liuhuicheng]
        CMD_SPR_WINGUPGRADE,                        // 翅膀进阶 [5/4/2014 liuhuicheng]
        CMD_SPR_WINGOFFON,                          // 翅膀佩戴/卸载 [5/4/2014 liuhuicheng]
        CMD_SPR_CHECK,                              // 与服务器心跳，每两秒发一次，校验是否加速
        CMD_SPR_REFERPICTUREJUDGE,                  // 提交图鉴信息 [5/17/2014 LiaoWei]
        CMD_SPR_GETMOJINGEXCHANGEINFO,              // 客户端请求魔晶钻石兑换信息 [5/21/2014 LiaoWei]
        CMD_SPR_REFRESH_ICON_STATE,                 // 刷新图标状态信息 [5/21/2014 ChenXiaojun]
        CMD_SPR_EQUIPAPPENDINHERIT,                 // 追加传承 [5/24/2014 LiaoWei]
        CMD_SPR_SWEEP_WANMOTA,                      // 扫荡万魔塔 [6/5/2014 ChenXiaojun]
        CMD_SPR_UPDATE_SWEEP_STATE,                 // 更新扫荡状态 [6/5/2014 ChenXiaojun]
        CMD_SPR_GET_WANMOTA_DETAIL,                 // 获取万魔塔信息 [6/5/2014 ChenXiaojun]
        CMD_SPR_GET_SWEEP_REWARD,                   // 领取扫荡奖励 [6/5/2014 ChenXiaojun]
        CMD_SPR_LISTCOPYTEAMS,                      // 搜索副本队伍 [6/5/2014 LiTeng]
        CMD_SPR_COPYTEAM,                           // 副本组队命令 [6/5/2014 LiTeng]
        CMD_SPR_COPYTEAMDATA,                       // 副本队伍信息 [6/5/2014 LiTeng]
        CMD_SPR_COPYTEAMSTATE,                      // 副本队伍成员状态变更 [6/5/2014 LiTeng]
        CMD_SPR_REGEVENTNOTIFY,                     // 注册事件通知(副本组队) [6/5/2014 LiTeng]
        CMD_SPR_LISTCOPYTEAMDATA,                   // 队伍列表中的队伍信息变化 [6/5/2014 LiTeng]
        CMD_SPR_COPYTEAMDAMAGEINFO,                 // 队伍成员伤害信息 [6/6/2014 LiTeng]
        CMD_SPR_GOLDCOPYSCENEPREPAREFIGHT,          // 金币副本准备战斗 -- 客户端显示战斗倒计时 [6/11/2014 LiaoWei]
        CMD_SPR_GOLDCOPYSCENEMONSTERWAVE,           // 金币副本刷怪波数 [6/11/2014 LiaoWei]
        CMD_SPR_GETNEWZONEACTIVEAWARD,              // 获取新区活动奖 [6/10/2014 gwz]
        CMD_SPR_QUERYUPLEVELMADMAN,                 // 冲级狂人 [6/10/2014 gwz]
        CMD_SPR_QUERYNEWZONEACTIVE,                 // 新区活动 [6/10/2014 gwz]
        CMD_SPR_QUERYUPLEVELGIFTINFO,               // 请求等级奖励领取信息 [6/16/2014 LiTeng]
        CMD_SPR_GETUPLEVELGIFTAWARD,                // 领取等级奖励奖励 [6/16/2014 LiTeng]
        CMD_SPR_JINGJI_START_FIGHT,                 // 竞技场战斗开始消息[6/17/2014 ChenXiaojun]
        CMD_SPR_QUERY_REPAYACTIVEINFO,              // 查询回馈活动信息 [6/17/2014 gwz]
        CMD_SPR_GET_REPAYACTIVEAWARD,               // 获取回馈活动奖励 [6/17/2014 gwz]
        CMD_SPR_QUERY_ALLREPAYACTIVEINFO,           // 获取所有回馈信息，充值和消费值 [6/19/2014 gwz]
        CMD_SPR_QUERYACTIVITYSOMEINFO,              // 请求活动(血色城堡、恶魔广场)的一些信息 [7/8/2014 LiaoWei]
        //CMD_SPR_DESTROYGOODS,                     //摧毁物品
        CMD_SPR_PLAYBOSSANIMATION,                  //boss出生前通知播放动画
        CMD_SPR_ENDBOSSANIMATION,                   //客户端通知服务器端开始刷新boss（防止外挂，参数有校验）
        CMD_SPR_QUERY_TODAYCANDOINFO,               //查询今日可做 [7/9/2014 gwz]
        CMD_SPR_QUERY_GETOLDRESINFO,                //查询资源找回信息 [7/9/2014 gwz]
        CMD_SPR_GET_OLDRESOURCE,                    //资源找回，领取资源 [7/9/2014 gwz]
        CMD_SPR_EXTENSIONPROPSHITED,                //拓展属性命中通知
        CMD_SPR_EXEC_WASHPROPS,                     //执行装备洗练
        CMD_SPR_EXEC_WASHPROPSINHERIT,              //执行装备洗练传承
        CMD_SPR_BATTLE_SCORE_LIST,                  //阵营战积分排名信息 [7/23/2014 lt]
        CMD_SPR_STORYCOPYMAPINFO,                   // 剧情副本信息 [7/24/2014 LiaoWei]
        CMD_SPR_GETUSERMAILCOUNT,                   //获取邮件数量 [7/28/2014 lt]
        CMD_SPR_QUERYIMPETRATEINFO,                 // 请求祈福数据 [7/30/2014 LiaoWei]
        CMD_SPR_EXECUTEIMPETRATE,                   // 执行祈福 [7/30/2014 LiaoWei]
        CMD_SPR_OPENMARKET2,                        //打开交易市场 MU交易所功能修改的第二套交易类指令开始
        CMD_SPR_MARKETSALEMONEY2,                   //交易市场中上架金币
        CMD_SPR_SALEGOODS2,
        CMD_SPR_SELFSALEGOODSLIST2,
        CMD_SPR_OTHERSALEGOODSLIST2,
        CMD_SPR_MARKETROLELIST2,
        CMD_SPR_MARKETGOODSLIST2,
        CMD_SPR_MARKETBUYGOODS2,                    //MU交易所功能修改的第二套交易类指令结束
        CMD_SPR_QUERYSTARCONSTELLATIONINFO,         // 请求星座数据 [8/1/2014 LiaoWei]
        CMD_SPR_EXECUTEACTIVATIONSTARCONSTELLATION, // 激活星座 [8/1/2014 LiaoWei]
        CMD_SPR_CHANGEANGLE, // 修改角色的360角度

        CMD_SPR_UPDATESHARESTATE,                   // 处理分享[8/6/2014 gwz]
        CMD_SPR_GETSHAREAWARD,                      // 发放分享奖励[8/6/2014 gwz]
        CMD_SPR_GETSHARESTATE,                      //获取分享状态
        CMD_SPR_BROADSPECIALHINTTEXT,               // 播放特殊的提示信息，例如boss AI描述
        CMD_SPR_MAPAIEVENT,                         // 发送地图事件，例如清除光幕
        CMD_SPR_EXEC_LIANZHI,                       // 执行炼制
        CMD_SPR_QUERY_LIANZHICOUNT,                 // 查询炼制次数
        CMD_SPR_UPGRADE_CHENGJIU,                   // 提升成就 [9/15/2014 ChenXiaojun]
        CMD_SPR_GETFIRSTCHARGEINFO,                 //获得各个充值档首次充值信息
        CMD_SPR_BATCHFETCHMAILGOODS,                //批量提取邮件
        CMD_SPR_PUSH_VERSION,                       //报告客户端代码版本号
        CMD_SPR_NOTIFYTEAMCHGZHANLI,                 //通知组队队员战力变化
        CMD_SPR_NOTIFYSELFCHGZHANLI,                 //通知自己战力变化
        CMD_SPR_NOTIFYOTHERBUFFERDATA,               //通知他人Buff变化变化
        CMD_SPR_NOTIFYSHOWGONGGAO,                   //登录后获取公告显示信息 [10/28/2014 ChenXiaojun]
        CMD_SPR_GETWINGINFO,                        //获取翅膀信息
        CMD_SPR_EMOLAIXIMONSTERINFO,                //恶魔来袭副本怪物数信息 [11/18/2014 LiTeng]
        CMD_SPR_CAIJI_START,                        //开始采集
        CMD_SPR_CAIJI_FINISH,                       //完成采集
        CMD_SPR_CAIJI_LASTNUM,                      //水晶幻境采集剩余次数
        CMD_SPR_QUERYJIERITOTALCONSUME,
        CMD_SPR_EXECUTEJIERITOTALCONSUME,
        CMD_MAP_TELEPORT,                           //地图传送点状态列表（罗兰法阵）
        CMD_SPR_SPECIALMACHINE,                     // 是否特殊的机器
        CMD_SPR_EXTRADATA,                          // 报告特殊信息
        CMD_SPR_SHOWALLICON,                        // 通知客户端showallicon

        // 避免Client和GameServer、GameServer和GameDBServer之间协议号出错的问题
        // 从1.3.0开始，协议号都要自己制定枚举值！！！！！
        CMD_SPR_GE = 699,
        CMD_SPR_CHENGZHAN_JINGJIA = 700,            //罗兰城战竞价进攻方资格
        CMD_SPR_GET_CHENGZHAN_DAILY_AWARD = 701,    //罗兰城战胜利战盟成员领取每日奖励
        CMD_SPR_LUOLANCHENGZHAN = 702,              //罗兰城战进入指令
        CMD_SPR_LUOLANCHENGZHAN_LONGTA_ROLEINFO = 703,              //罗兰城战龙塔内人数信息列表
        CMD_SPR_LUOLANCHENGZHAN_QIZHI_OWNERINFO = 704,              //罗兰城战旗帜拥有者列表
        CMD_SPR_LUOLANCHENGZHAN_LONGTA_OWNERINFO = 705,              //龙塔占有者信息
        CMD_SPR_GET_LUOLANCHENGZHU_INFO = 706,              //获取罗兰城主战盟信息
        CMD_SPR_LUOLANCHENGZHAN_RESULT_INFO = 707,         //罗兰城战结果和奖励信息
        CMD_SPR_GET_LUOLANCHENGZHAN_REQUEST_INFO_LIST = 708, //请求帮会领地信息，主要用来获取竞价信息
        CMD_SPR_SERVERUPDATE_ZHANMENGZIJIN = 709,         //服务器发送战盟当前资金信息
        CMD_SPR_MODIFY_FASHION = 710,                       //使用和卸下时装

        CMD_SPR_GETBANGHUIFUBEN = 711,                    // 取得帮会副本的信息
        CMD_SPR_GETBANGHUIFUBENAWARD = 712,               // 取得帮会副本的奖励

        CMD_SPR_GET_ELEMENTHRT_SLIST = 720,               //申请元素背包数据
        CMD_SPR_GET_ELEMENTHRTS_INFO = 721,               //申请获取猎取元素相关信息,
        CMD_SPR_USE_ELEMENTHRT = 722,                     //佩戴/卸下元素之心
        CMD_SPR_GET_SOMEELEMENTHRTS = 723,                //执行猎取操作
        CMD_SPR_POWER_ELEMENTHRT = 724,                   //强化元素之心
        CMD_SPR_RESET_EHRTSBAG = 725,                     //整理元素背包
        CMD_SPR_GET_USINGELEMENTHRT_SLIST = 726,          //申请元素装备栏数据

        CMD_SPR_HOLD_QINGGONGYAN = 730,                   // 申请举办庆功宴
        CMD_SPR_GET_QINGGONGYAN = 731,                    // 申请庆功宴信息
        CMD_SPR_JOIN_QINGGONGYAN = 732,                   // 申请参加庆功宴
        CMD_SPR_IFQINGGONGYANOPEN = 733,                // 当前是否开启了庆功宴

        CMD_SPR_GETDAMONGOODSLIST = 740,                    // 获取精灵栏精灵

        CMD_SPR_GET_PET_LIST = 750,                       // 申请精灵背包数据
        CMD_SPR_GET_PET_INFO = 751,                       // 申请召唤精灵界面信息
        CMD_SPR_CALL_PET = 752,                           // 请求精灵召唤
        CMD_SPR_MOVE_PET = 753,                           // 从精灵背包中拿出精灵
        CMD_SPR_RESET_PETBAG = 754,                       // 整理精灵背包

        CMD_SPR_FAZHEN_BOSS = 760,                        //罗兰法阵副本boss信息
        CMD_SPR_GET_STORE_YINLIANG = 761,                 // 取得仓库金币
        CMD_SPR_GET_STORE_MONEY = 762,                    // 取得仓库绑定金币
        CMD_SPR_STORE_YINLIANG_CHANGE = 763,              // 通知客户端仓库金币改变
        CMD_SPR_STORE_MONEY_CHANGE = 764,                 // 通知客户端仓库绑定金币改变

        CMD_SPR_JIERIACT_STATE = 770,                     // 通知客户端节日活动开启或结束
        CMD_SPR_GETJIERIFANBEI_INFO = 771,                // 客户端请求节日活动翻倍的类型

        CMD_SPR_ACHIEVEMENT_RUNE_INFO = 780,              //成就符文——提升信息
        CMD_SPR_ACHIEVEMENT_RUNE_UP = 781,                //成就符文——提升

        CMD_SPR_PRESTIGE_MEDAL_INFO = 782,              //声望勋章——提升信息
        CMD_SPR_PRESTIGE_MEDAL_UP = 783,                //声望勋章——提升

        CMD_SPR_ARTIFACT_UP = 791,                        //神器再造

        CMD_SPR_GET_LINGYU_LIST = 800,                      // 查看翎羽信息
        CMD_SPR_ADVANCE_LINGYU_LEVEL = 801,                 // 提升翎羽等级
        CMD_SPR_ADVANCE_LINGYU_SUIT = 802,                  // 提升翎羽品阶

        CMD_SPR_WING_ZHULING = 810,                         // 请求翅膀注灵
        CMD_SPR_WING_ZHUHUN = 811,                          // 请求翅膀注魂

        CMD_SPR_HYSY_LIANSHA = 818,                         // 幻影寺院连杀信息
        CMD_SPR_HYSY_STOP_LIANSHA = 819,                    // 幻影寺院终结连杀
        CMD_SPR_HYSY_ENQUEUE = 820,                         // 幻影寺院加入自动匹配队列
        CMD_SPR_HYSY_DEQUEUE = 821,                         // 幻影寺院离开自动匹配队列
        CMD_SPR_HYSY_QUEUE_PLAYER_NUM = 822,                // 幻影寺院等待队列玩家数（有效值：0-10）
        CMD_SPR_HYSY_ENTER_NOTIFY = 823,                    // 幻影寺院通知自动匹配成功
        CMD_SPR_HYSY_ENTER_RESPOND = 824,                   // 幻影寺院自动匹配回应，立即开始或暂不进入
        CMD_SPR_HYSY_AWARD = 825,                           // 幻影寺院活动结果奖励信息
        CMD_SPR_HYSY_SCORE_INFO = 826,                      // 幻影寺院通知活动双方得分状态
        CMD_SPR_NOTIFY_TIME_STATE = 827,                    // 通知活动状态和时间(通用)
        CMD_SPR_HYSY_SUCCESS_COUNT = 828,                   // 幻影寺院查询/通知今日获胜次数
        CMD_SPR_HYSY_ADD_SCORE = 829,                       // 幻影寺院通知分数增加

        CMD_SPR_REGION_EVENT = 830,                         // 地图区域事件报告
        CMD_SYNC_TIME_BY_CLIENT = 831,                      // 客户端每2分钟校验时间消息
        CMD_SYNC_TIME_BY_SERVER = 832,                      // 服务器向客户端发送时间消息
        CMD_SYNC_CHANGE_DAY_SERVER = 833,                   // 服务器通知客户端跨天了

        CMD_SPR_GETLUOLANCHENGZHU = 840,                    // 请求罗兰城主基本信息
        CMD_SPR_QUERYADRATIONLANCHENGZHUO = 841,            // 请求罗兰城主崇拜信息
        CMD_SPR_ADRATIONLANCHENGZHU = 842,                  // 罗兰城主崇拜

        CMD_SPR_GET_YUEKA_DATA = 850,                       // 请求玩家月卡信息
        CMD_SPR_GET_YUEKA_AWARD = 851,                      // 请求领取月卡返利奖励

        CMD_SECOND_PASSWORD_CHECK_STATE = 860,              // 登录时请求账号下所有角色的二级密码，客户端一定要先于CMD_ROLE_LIST发送
        CMD_SECOND_PASSWORD_SET = 861,                      // 客户端请求设置二级密码
        CMD_SECOND_PASSWORD_VERIFY = 862,                   // 客户端请求验证二级密码
        CMD_SECOND_PASSWORD_CANCEL = 863,                  // 客户端请求清除二级密码

        CMD_SPR_MARRY_FUBEN = 870,                          //[bing] 情侣副本协议
        CMD_SPR_MARRY_ROSE = 871,                           //[bing] 情侣献花
        CMD_SPR_MARRY_RING = 872,                           //[bing] 婚戒替换
        CMD_SPR_MARRY_MESSAGE = 873,                        //[bing] 爱情宣言更新
        CMD_SPR_MARRY_PARTY_QUERY = 880,                    // 获取婚宴列表
        CMD_SPR_MARRY_PARTY_CREATE = 881,                   // 举行婚宴
        CMD_SPR_MARRY_PARTY_CANCEL = 882,                   // 取消婚宴
        CMD_SPR_MARRY_PARTY_JOIN = 883,                     // 參加婚宴
        CMD_SPR_MARRY_PARTY_JOIN_LIST = 884,                // 已经參加婚宴次数列表

        CMD_SPR_MARRY_INIT = 890,                           //求婚发起
        CMD_SPR_MARRY_REPLY = 891,                          //求婚回复
        CMD_SPR_MARRY_DIVORCE = 892,                        //离婚或离婚回复
        CMD_SPR_MARRY_AUTO_REJECT = 893,                    //自动拒绝求婚
        CMD_SPR_MARRY_NOTIFY = 894,                         //回复求婚离婚通知对方
        CMD_SPR_MARRY_UPDATE = 895,                         //婚姻状态更新
        CMD_SPR_MARRY_SPOUSE_DATA = 896,                    //情侣婚姻数据发送给客户端

        //CMD_SPR_RETURN_RECELL_INFO = 900,                   // (当前推荐人信息——获取信息)
        //CMD_SPR_RETURN_RECELL_SET = 901,                    // (当前推荐人信息——设置)
        //CMD_SPR_RETURN_AWARD_INFO = 902,                    // (回归礼包——获取信息)
        //CMD_SPR_RETURN_AWARD_SET = 903,                     // (回归礼包——领取)
        //CMD_SPR_RETURN_CHECK_INFO = 904,                    // (签到信息——获取信息)
        //CMD_SPR_RETURN_CHECK_SET = 905,                     // (签到信息——签到)
        //CMD_SPR_RETURN_RECELL_AWARD_INFO = 906,             // (召回奖励——获取信息)
        //CMD_SPR_RETURN_RECELL_AWARD_SET = 907,              // (召回奖励——设置)
        ////CMD_SPR_RETURN_RECELL_EXTRA_AWARD = 908,           // (召回奖励——额外奖励领取)

        CMD_SPR_RETURN_DATA = 900,                  // (获取召回活动信息)
        CMD_SPR_RETURN_CHECK = 901,                 // (校验回归资格)
        CMD_SPR_RETURN_AWARD = 902,                 // (领取奖励)

        CMD_SPR_QUERY_JIERI_GIVE_INFO = 920,                // 查询节日赠送信息
        CMD_SPR_JIERI_GIVE_TO_OTHER = 921,                  // 节日赠送礼物给别人
        CMD_SPR_GET_JIERI_GIVE_AWARD = 922,                 // 领取节日赠送奖励

        CMD_SPR_QUERY_JIERI_GIVE_KING_INFO = 923,           // 查询节日赠送王信息
        CMD_SPR_GET_JIERI_GIVE_KING_AWARD = 924,            //领取节日赠送王奖励

        CMD_SPR_QUERY_JIERI_RECV_KING_INFO = 925,           // 查询节日收取王信息
        CMD_SPR_GET_JIERI_RECV_KING_AWARD = 926,            //领取节日赠送王奖励
        CMD_DB_EXECUXJIERIFANLI = 927,                      //[bing] 节日返利活动

        CMD_SPR_QUERY_GUARD_POINT_RECOVER = 930,    // 客户端查询守护点回收信息
        CMD_SPR_GUARD_POINT_RECOVER = 931,  // 客户端回收守护点
        CMD_SPR_QUERY_GUARD_STATUE_INFO = 932, // 客户端查询守护雕像信息
        CMD_SPR_GUARD_STATUE_LEVEL_UP = 933, // 客户端升级守护雕像信息
        CMD_SPR_GUARD_STATUE_SUIT_UP = 934, // 客户端升阶守护雕像信息
        CMD_SPR_MOD_GUARD_SOUL_EQUIP = 935, // 客户端穿戴卸下守护之灵

        CMD_SPR_QUERY_LIANXU_CHARGE_INFO = 940, // 查询连续充值活动信息
        CMD_SPR_GET_LIANXU_CHARGE_AWARD = 941, // 领取连续充值活动奖励

        CMD_SPR_QUERY_JIERI_RECV_INFO = 944,    //查询节日收礼活动信息
        CMD_SPR_GET_JIERI_RECV_AWARD = 945,   //领取节日收礼奖励
        CMD_SPR_GET_FASHION_SLIST = 946,        //获取时装列表  panghui  add

        CMD_SPR_TIANTI_JOIN = 950,  //开始匹配
        CMD_SPR_TIANTI_QUIT = 951, //取消匹配
        CMD_SPR_TIANTI_ENTER = 952, //匹配成功，通知进入活动
        CMD_SPR_TIANTI_AWARD = 953, //结果和奖励信息
        CMD_SPR_TIANTI_DAY_DATA = 954, //角色天梯数据和日排行
        CMD_SPR_TIANTI_MONTH_PAIHANG = 955, //获取月段位排行榜.
        CMD_SPR_TIANTI_GET_PAIMING_AWARDS = 956, //领取上月段位排行奖励
        CMD_SPR_ROLE_ATTRIBUTE_VALUE = 968, //通知角色货币变化(当前值和增减量)
        CMD_SPR_TIANTI_GET_LOG = 969, //获取战报列表
        CMD_SPR_EFFECT_HIDE_FLAGS = 970, //(客户端)效果屏蔽选项
        CMD_SPR_LOGIN_WAITING_INFO = 971,// 通知客户端排队信息

        CMD_SPR_MERLIN_QUERY = 981,    // 客户端请求梅林魔法书数据 [XSea 2015/6/23]
        CMD_SPR_MERLIN_STAR_UP = 982, // 客户端请求梅林魔法书升星 [XSea 2015/6/23]
        CMD_SPR_MERLIN_LEVEL_UP = 983, // 客户端请求梅林魔法书升阶 [XSea 2015/6/24]
        CMD_SPR_MERLIN_SECRET_ATTR_UPDATE = 984,    // 客户端请求擦拭梅林魔法书秘语 [XSea 2015/6/25]
        CMD_SPR_MERLIN_SECRET_ATTR_REPLACE = 985,    // 客户端请求替换梅林魔法书秘语 [XSea 2015/6/25]
        CMD_SPR_MERLIN_SECRET_ATTR_NOT_REPLACE = 986,    // 客户端请求放弃替换梅林魔法书秘语 [XSea 2015/6/25]

        // 荧光宝石 991-999 [XSea 2015/8/7]
        CMD_SPR_FLUORESCENT_GEM_RESET_BAG = 991, // 客户端请求整理荧光宝石背包 [XSea 2015/8/7]
        CMD_SPR_FLUORESCENT_GEM_EQUIP = 992, // 客户端请求装备荧光宝石
        CMD_SPR_FLUORESCENT_GEM_UN_EQUIP = 993, // 客户端请求卸下荧光宝石
        CMD_SPR_FLUORESCENT_GEM_LEVEL_UP = 994, // 客户端请求升级荧光宝石
        CMD_SPR_FLUORESCENT_GEM_DIG = 995, // 客户端请求挖掘荧光宝石
        CMD_SPR_FLUORESCENT_GEM_RESOLVE = 996, // 客户端请求分解荧光宝石
        CMD_SPR_FLUORESCENT_GEM_EQUIP_CHANGES = 997, // 通知客户端荧光宝石装备栏变动

        CMD_SPR_TALENT_OTHER = 999,         //获取天赋数据——他人
        CMD_SPR_TALENT_GET_DATA = 1000,     //获取天赋数据
        CMD_SPR_TALENT_ADD_EXP = 1001,      //注入经验
        CMD_SPR_TALENT_WASH = 1002,         //洗点
        CMD_SPR_TALENT_ADD_EFFECT = 1003,   //效果升级

        CMD_SPR_WARN_INFO = 1004, //警告信息

        CMD_SPR_ELEMENT_WAR_JOIN = 1010, // 元素试炼——开始匹配
        CMD_SPR_ELEMENT_WAR_QUIT = 1011, // 元素试炼——取消匹配
        CMD_SPR_ELEMENT_WAR_ENTER = 1012, // 元素试炼——匹配成功进入
        CMD_SPR_ELEMENT_WAR_PLAYER_NUM = 1013, // 元素试炼——匹配人数变化  
        CMD_SPR_ELEMENT_WAR_CANCEL = 1016, // 元素试炼——副本取消

        CMD_SPR_ELEMENT_WAR_SCORE_INFO = 1014, // 元素试炼——得分信息
        CMD_SPR_ELEMENT_WAR_AWARD = 1015, // 元素试炼——领奖信息

        CMD_SPR_SPREAD_SIGN = 1017,//成为推广员
        CMD_SPR_SPREAD_AWARD = 1018,//领取奖励
        CMD_SPR_SPREAD_VERIFY_CODE = 1019,//填写推荐人
        CMD_SPR_SPREAD_TEL_CODE_GET = 1020,//获取验证码
        CMD_SPR_SPREAD_TEL_CODE_VERIFY = 1021,//确认验证码
        CMD_SPR_SPREAD_INFO = 1022,//推广信息

        CMD_SPR_COPY_WOLF_SCORE_INFO = 1025,//狼魂要塞——得分信息
        CMD_SPR_COPY_WOLF_AWARD = 1026,//狼魂要塞——领奖信息

        CMD_SPR_TODAY_DATA = 1030,             // 每日专项——获取数据
        CMD_SPR_TODAY_AWARD = 1031,             // 每日专项——领取奖励

        CMD_SPR_FUND_INFO = 1032,             // 基金——信息
        CMD_SPR_FUND_BUY = 1033,             // 基金——购买
        CMD_SPR_FUND_AWARD = 1034,             // 基金——领取奖励

        CMD_SPR_UNION_PALACE_DATA = 1035,
        CMD_SPR_UNION_PALACE_UP = 1036,

        CMD_SPR_PET_SKILL_UP = 1037,
        CMD_SPR_PET_SKILL_AWAKE = 1038,
        CMD_SPR_PET_SKILL_AWAKE_COST = 1039,

        CMD_SPR_ACTIVATE_INFO = 1040,
        CMD_SPR_ACTIVATE_AWARD = 1041,

        CMD_SPR_UNION_ALLY_REQUEST = 1042,
        CMD_SPR_UNION_ALLY_CANCEL = 1043,
        CMD_SPR_UNION_ALLY_REMOVE = 1044,
        CMD_SPR_UNION_ALLY_AGREE = 1045,
        CMD_SPR_UNION_ALLY_DATA = 1046,
        CMD_SPR_UNION_ALLY_LOG = 1047,
        CMD_SPR_UNION_ALLY_NUM = 1048,



        #region 1100-1199-lt

        CMD_SPR_YONGZHEZHANCHANG_JOIN = 1100, //勇者战场报名
        CMD_SPR_YONGZHEZHANCHANG_ENTER = 1101, //勇者战场进入
        CMD_SPR_YONGZHEZHANCHANG_AWARD = 1102, //勇者战场结束及奖励(通知客户端可以领取)
        CMD_SPR_YONGZHEZHANCHANG_STATE = 1103, //勇者战场报名状态
        CMD_SPR_YONGZHEZHANCHANG_SIDE_SCORE = 1104, //勇者战场分数信息
        CMD_SPR_YONGZHEZHANCHANG_SELF_SCORE = 1105, //勇者战场自己分数增加信息
        CMD_SPR_YONGZHEZHANCHANG_LIANSHA = 1106, //勇者战场连杀信息
        CMD_SPR_YONGZHEZHANCHANG_STOP_LIANSHA = 1107, //勇者战场终结连杀
        CMD_SPR_YONGZHEZHANCHANG_AWARD_GET = 1108, //领取奖励

        CMD_SPR_KUAFU_BOSS_JOIN = 1120, //跨服BOSS报名
        CMD_SPR_KUAFU_BOSS_ENTER = 1121, //跨服BOSS进入
        CMD_SPR_KUAFU_BOSS_DATA = 1122, //跨服BOSS场景数据
        CMD_SPR_KUAFU_BOSS_STATE = 1123, //跨服BOSS报名状态

        CMD_SPR_KUAFU_MAP_INFO = 1140, //跨服主线地图线路状态信息
        CMD_SPR_KUAFU_MAP_ENTER = 1141, //跨服主线地图进入

        CMD_SPR_LANGHUNLINGYU_LONGTA_ROLEINFO = 1150,    //龙塔内人数信息列表
        CMD_SPR_LANGHUNLINGYU_QIZHI_OWNERINFO = 1151,    //旗帜拥有者列表
        CMD_SPR_LANGHUNLINGYU_LONGTA_OWNERINFO = 1152,   //龙塔占有者信息
        CMD_SPR_LANGHUNLINGYU_JOIN = 1153,               //报名
        CMD_SPR_LANGHUNLINGYU_DATA = 1154,               //请求玩家自己的圣域争霸数据
        CMD_SPR_LANGHUNLINGYU_CITY_DATA = 1155,          //请求城池占领、进攻信息数据
        CMD_SPR_LANGHUNLINGYU_WORLD_DATA = 1156,         //请求玩家自己的圣域争霸数据
        CMD_SPR_LANGHUNLINGYU_ENTER = 1157,              //进入城池
        CMD_SPR_LANGHUNLINGYU_GET_DAY_AWARD = 1158,      //获取每日奖励
        CMD_SPR_LANGHUNLINGYU_AWARD = 1159,              //服务器推送战斗结果和奖励信息
        CMD_SPR_LANGHUNLINGYU_ADMIRE_DATA = 1160,        //获取当前圣域城主膜拜数据
        CMD_SPR_LANGHUNLINGYU_ADMIRE_HIST = 1161,        //获取历届圣域城主膜拜信息
        CMD_SPR_LANGHUNLINGYU_ADMIRE = 1162,             //膜拜

        CMD_SPR_KINGOFBATTLE_JOIN = 1180, //王者战场报名
        CMD_SPR_KINGOFBATTLE_ENTER = 1181, //王者战场进入
        CMD_SPR_KINGOFBATTLE_AWARD = 1182, //王者战场结束及奖励(通知客户端可以领取)
        CMD_SPR_KINGOFBATTLE_STATE = 1183, //王者战场报名状态
        CMD_SPR_KINGOFBATTLE_SIDE_SCORE = 1184, //王者战场分数信息
        CMD_SPR_KINGOFBATTLE_SELF_SCORE = 1185, //王者战场自己分数增加信息
        CMD_SPR_KINGOFBATTLE_LIANSHA = 1186, //王者战场连杀信息
        CMD_SPR_KINGOFBATTLE_STOP_LIANSHA = 1187, //王者战场终结连杀
        CMD_SPR_KINGOFBATTLE_AWARD_GET = 1188, //领取奖励
        CMD_SPR_KINGOFBATTLE_TELEPORT = 1189, // 王者战场传送门数据

        CMD_SPR_KINGOFBATTLE_MALL_DATA = 1190, // 获取王者商店数据
        CMD_SPR_KINGOFBATTLE_MALL_BUY = 1191, // 王者商店购买
        CMD_SPR_KINGOFBATTLE_MALL_REFRESH = 1192, // 王者商店刷新

        #endregion 1100-1199-lt

        CMD_SPR_HOLYITEM_DATA = 1200,                     //返回圣物全部数据
        CMD_SPR_HOLYITEM_PART_DATA = 1201,                //返回某个圣物数据

        CMD_ID_PLACE_HOLDER_BY_CHENJG_START = 1300, // 1300---1399 被我预定了 chenjingui

        CMD_SPR_QUERY_JIERI_PLAT_CHARGE_KING = 1300, // 查询节日平台充值王活动

        CMD_SPR_MORI_JOIN = 1301, //开始匹配末日审判
        CMD_SPR_MORI_QUIT = 1302, //取消匹配
        CMD_MORI_NTF_ROLE_COUNT = 1303, // 服务器通知客户端队伍人数
        CMD_MORI_NTF_ENTER = 1304, // 服务器通知客户端可以进入末日审判了
        CMD_NTF_MORI_MONSTER_EVENT = 1305, //服务器通知客户端boss事件(出生，死亡)
        CMD_NTF_MORI_COPY_CANCEL = 1306, // 副本取消

        CMD_SPR_SEVEN_DAY_ACT_QUERY = 1310, // 查询七日活动信息
        CMD_SPR_SEVEN_DAY_ACT_GET_AWARD = 1311, // 领取七日活动奖励
        CMD_SPR_SEVEN_DAY_ACT_QIANG_GOU = 1312, // 抢购物品

        CMD_NTF_BANGHUI_CHANGE_NAME = 1315, // 通知帮会改名

        CMD_SPR_SOUL_STONE_QUERY_GET = 1320, //查询·魂石获取·额外功能
        CMD_SPR_SOUL_STONE_GET = 1321, // 获取魂石
        CMD_SPR_SOUL_STONE_LVL_UP = 1322, // 魂石升级
        CMD_SPR_SOUL_STONE_MOD_EQUIP = 1323, // 穿戴或卸下
        CMD_SPR_SOUL_STONE_RESET_BAG = 1324, // 整理魂石背包

        CMD_SPR_SET_FUNCTION_OPEN = 1330, // 设置二态功能的开启或关闭

        CMD_SPR_JINGJICHANG_GET_ROLE_LOOKS = 1340, // 竞技场排行界面中查看角色外貌
        CMD_SPR_PKKING_GET_ROLE_LOOKS = 1341,      // 查看PKKing角色
        CMD_SPR_LUOLANKING_GET_ROLE_LOOKS = 1342,  // 查看罗兰城主    

        CMD_SPR_ZHENGBA_GET_MAIN_INFO = 1350,       // 众神争霸 --- 获取16强信息
        CMD_SPR_ZHENGBA_GET_ALL_PK_LOG = 1351,      // 众神争霸 --- 查看全部战报
        CMD_SPR_ZHENGBA_GET_ALL_PK_STATE = 1352,    // 众神争霸 --- 查看全部参赛状态
        CMD_SPR_ZHENGBA_GET_16_PK_STATE = 1353,     // 众神争霸 --- 获取16强中的两两pk状态
        CMD_SPR_ZHENGBA_SUPPORT = 1354,             // 众神争霸 --- 支持
        CMD_SPR_ZHENGBA_YA_ZHU = 1355,              // 众神争霸 --- 押注, 已废弃
        CMD_NTF_ZHENGBA_CAN_ENTER = 1356,           // 众神争霸 --- 服务器通知客户端可以进入
        CMD_SPR_ZHENGBA_ENTER = 1357,               // 众神争霸 --- 进入
        CMD_NTF_ZHENGBA_PK_RESULT = 1358,           // 众神争霸 --- pk结果
        CMD_SPR_ZHENGBA_GET_MINI_STATE = 1359,      // 众神争霸 --- 获取活动mini进度
        CMD_SPR_ZHENGBA_QUERY_JOIN_HINT = 1360,     // 众神争霸 --- 查询角色是否提示本月参与

        CMD_COUPLE_ARENA_GET_MAIN_DATA = 1370,      // 夫妻竞技场 --- 查询主界面信息
        CMD_COUPLE_ARENA_GET_ZHAN_BAO = 1371,       // 夫妻竞技场 --- 获取战报
        CMD_COUPLE_ARENA_GET_PAI_HANG = 1372,       // 夫妻竞技场 --- 获取排行
        CMD_COUPLE_ARENA_SET_READY = 1373,          // 夫妻竞技场 --- 设置准备状态
        CMD_COUPLE_ARENA_SINGLE_JOIN = 1374,        // 夫妻竞技场 --- 单人匹配
        CMD_COUPLE_ARENA_QUIT = 1375,               // 夫妻竞技场 --- 取消匹配
        CMD_COUPLE_ARENA_NTF_CAN_ENTER = 1376,      // 夫妻竞技场 --- 服务器通知客户端匹配成功，可以进入
        CMD_COUPLE_ARENA_ENTER = 1377,              // 夫妻竞技场 --- 进入     
        CMD_COUPLE_ARENA_NTF_PK_RESULT = 1378,      // 夫妻竞技场 --- 服务器通知客户端战斗结果
        CMD_COUPLE_ARENA_NTF_COUPLE_STATE = 1379,   // 夫妻竞技场 --- 夫妻状态
        CMD_COUPLE_ARENA_REG_STATE_WATCHER = 1380,  // 夫妻竞技场 --- 注册关注夫妻状态变更
        CMD_COUPLE_ARENA_NTF_BUFF_HOLDER = 1381,    // 夫妻竞技场 --- 通知客户端buff持有信息
        CMD_COUPLE_ARENA_DB_SAVE_ZHAN_BAO = 1382,   // 夫妻竞技场 --- db存储战报
        CMD_COUPLE_ARENA_DB_CLR_ZHAN_BAO = 1383,    // 夫妻竞技场 --- 清除战报

        CMD_COUPLE_WISH_GET_MAIN_DATA = 1390,       // 情侣祝福榜 --- 查看主界面信息
        CMD_COUPLE_WISH_GET_WISH_RECORD = 1391,     // 情侣祝福榜 --- 查看祝福记录
        CMD_COUPLE_WISH_WISH_OTHER_ROLE = 1392,     // 情侣祝福榜 --- 祝福他人
        CMD_COUPLE_WISH_NTF_WISH_EFFECT = 1393,     // 情侣祝福榜 --- 显示祝福特效
        CMD_COUPLE_WISH_GET_ADMIRE_DATA = 1394,     // 情侣祝福榜 --- 获取膜拜数据
        CMD_COUPLE_WISH_ADMIRE_STATUE = 1395,       // 情侣祝福榜 --- 膜拜雕像
        CMD_COUPLE_WISH_GET_PARTY_DATA = 1396,      // 情侣祝福榜 --- 查看宴会信息
        CMD_COUPLE_WISH_JOIN_PARTY = 1397,          // 情侣祝福榜 --- 参加宴会

        CMD_ID_PLACE_HOLDER_BY_CHENJG_END = 1399, // 1300---1399 被我预定了 chenjingui

        #region 1400-1499-lt

        CMD_SPR_QUERY_OTHER_SALE_PRICE = 1400, //交易所,根据goodsId查询其他人卖出物品的价格

        #endregion 1400-1499-lt

        CMD_SPR_GETINPUT_POINTS_EXCHGINFO = 1500,        //获得充值积分相关数据
        CMD_SPR_GETWEEKEND_INPUT_DATA = 1501,         //获得周末充值相关数据
        CMD_SPR_SYNCINPUT_POINTS_ONLY = 1502,         //同步充值点积分

        CMD_SPR_SPECIALACTIVITY_GETXMLDATA = 1510,	    // 获取专属活动xml配置文件
        CMD_SPR_SPECIALACTIVITY_QUERY = 1511,			// 查询专属活动数据
        CMD_SPR_SPECIALACTIVITY_FETCHAWARD = 1512,	    // 获取专属活动奖励

        CMD_SPR_BUILD_GET_LIST = 1550,                  // 获得领地所有信息
        CMD_SPR_BUILD_EXCUTE,	                        // 执行开发任务
        CMD_SPR_BUILD_FINISH,                           // 一键完成开发任务
        CMD_SPR_BUILD_REFRESH,                          // 刷新开发任务
        CMD_SPR_BUILD_GET_ALLLEVEL_AWARD,               // 获取总等级奖励
        CMD_SPR_BUILD_GET_AWARD,                        // 获取开发奖励
        CMD_SPR_BUILD_OPEN_QUEUE,                       // 开启收费开发队列
        CMD_SPR_BUILD_GET_QUEUE,                        // 获得开发队列数据
        CMD_SPR_BUILD_GET_STATE,                        // 获得建筑物状态数据
        CMD_SPR_BUILD_GET_ALLLEVEL_AWARD_STATE,         // 同步总等级奖励领取状态
        CMD_SPR_BUILD_SYNC_SINGLE,                      // 同步单个建筑物数据

        CMD_SPR_ONEPIECE_GET_INFO = 1600,               // c2s 获取藏宝秘境相关信息
        CMD_SPR_ONEPIECE_ROLL,                          // c2s 扔骰子
        CMD_SPR_ONEPIECE_TRIGGER_EVENT,                 // c2s 客户端触发事件 
        CMD_SPR_ONEPIECE_SYNC_EVENT,                    // s2c 服务器向客户端同步当前事件信息
        CMD_SPR_ONEPIECE_MOVE,                          // c2s 请求移动
        CMD_SPR_ONEPIECE_ROLL_MIRACLE,                  // c2s 扔奇迹骰子
        CMD_SPR_ONEPIECE_DICE_BUY,                      // c2s 购买骰子
        CMD_SPR_ONEPIECE_SYNC_DICE,                     // s2c 骰子数同步

        CMD_SPR_FASHION_FORGE = 1610,                   // 时装强化
        CMD_SPR_FASHION_ACTIVE = 1611,                  // 时装激活

        CMD_SPR_VIDEO_OPEN = 1700,                      //亲加视频 打开视频请求
        CMD_SPR_TAROT_UPORINIT = 1701,                  //塔罗牌升级或激活
        CMD_SPR_SET_TAROTPOS = 1702,                     //设置塔罗牌上阵数据
        CMD_SPR_USE_TAROTKINGPRIVILEGE = 1703,                //使用塔罗牌国王特权
        CMD_SPR_TAROT_DATA = 1704,                     //返回塔罗牌全部数据

        CMD_DB_START_CMD = 10000,//数据库命令
        CMD_DB_UPDATE_POS, CMD_DB_UPDATE_EXPLEVEL, CMD_DB_UPDATE_INTERPOWER,
        CMD_DB_UPDATEMONEY1_CMD, CMD_DB_ADDGOODS_CMD, CMD_DB_UPDATEGOODS_CMD,
        CMD_DB_UPDATETASK_CMD, CMD_DB_UPDATEPKMODE_CMD, CMD_DB_UPDATEPKVAL_CMD, CMD_DB_UPDATEKEYS,
        CMD_DB_UPDATEUSERMONEY_CMD, CMD_DB_UPDATEUSERYINLIANG_CMD, CMD_DB_MOVEGOODS_CMD, CMD_DB_UPDATE_LEFTFIGHTSECS,
        CMD_DB_ROLE_ONLINE, CMD_DB_ROLE_HEART, CMD_DB_ROLE_OFFLINE, CMD_DB_GET_CHATMSGLIST,
        CMD_DB_HORSEON, CMD_DB_HORSEOFF, CMD_DB_PETOUT, CMD_DB_PETIN, CMD_DB_ADDDJPOINT, CMD_DB_UPJINGMAI_LEVEL,
        CMD_DB_REGUSERID, CMD_DB_BANROLENAME, CMD_DB_BANROLECHAT, CMD_DB_GETBANROLECATDICT, CMD_DB_ADDBULLMSG, CMD_DB_REMOVEBULLMSG,
        CMD_DB_GETBULLMSGDICT, CMD_DB_UPDATEONLINETIME, CMD_DB_GAMECONFIGDICT, CMD_DB_GAMECONIFGITEM, CMD_DB_RESETBIGUAN,
        CMD_DB_ADDSKILL, CMD_DB_UPSKILLINFO, CMD_DB_UPDATEJINGMAIEXP, CMD_DB_UPDATEDEFSKILLID, CMD_DB_UPDATEAUTODRINK,
        CMD_DB_UPDATEDAILYTASKDATA, CMD_DB_UPDATEDAILYJINGMAI, CMD_DB_UPDATENUMSKILLID, CMD_DB_UPDATEPBINFO, CMD_DB_UPDATHUODONGINFO,
        CMD_DB_SUBCHONGZHIJIFEN, CMD_DB_USELIPINMA, CMD_DB_UPDATEFUBENDATA, CMD_DB_GETFUBENSEQID, CMD_DB_UPDATEROLEDAILYDATA,
        CMD_DB_UPDATEBUFFERITEM, CMD_DB_UNDELROLENAME, CMD_DB_ADDFUBENHISTDATA, CMD_DB_UPDATELIANZHAN, CMD_DB_UPDATEKILLBOSS, CMD_DB_UPDATEROLESTAT,
        CMD_DB_UPDATEYABIAODATA, CMD_DB_UPDATEYABIAODATASTATE, CMD_DB_UPDATEBATTLENAME, CMD_DB_ADDMALLBUYITEM, CMD_DB_GETLIPINMAINFO,
        CMD_DB_UPDATECZTASKID, CMD_DB_GETTOTALONLINENUM, CMD_DB_UPDATEBATTLENUM, CMD_DB_UPDATEHEROINDEX, CMD_DB_FORCERELOADPAIHANG, CMD_DB_ADDYINPIAOBUYITEM,
        CMD_DB_DELROLENAME, CMD_SPR_QUERYUMBYNAME, CMD_DB_QUERYBHMGRLIST, CMD_DB_UPDATEBANGGONG_CMD, CMD_DB_UPDATEBHTONGQIAN_CMD, CMD_DB_GETBHJUNQILIST,
        CMD_DB_GETBHLINGDIDICT, CMD_DB_UPDATELINGDIFORBH, CMD_DB_GETLEADERROLEIDBYBHID, CMD_DB_ADDBHTONGQIAN_CMD, CMD_DB_ADDQIZHENGEBUYITEM,
        CMD_DB_UPDATEJIEBIAOINFO, CMD_DB_ADDREFRESHQIZHENREC, CMD_DB_CLEARCACHINGROLEIDATA, CMD_DB_ADDMONEYWARNING, CMD_DB_QUERYCHONGZHIMONEY,
        CMD_DB_ADDYINLIANGBUYITEM, CMD_DB_ADDBANGGONGBUYITEM, CMD_DB_SENDUSERMAIL, CMD_DB_GETUSERMAILDATA, CMD_DB_FINDROLEID_BYROLENAME, CMD_DB_QUERYLIMITGOODSUSEDNUM,
        CMD_DB_UPDATELIMITGOODSUSEDNUM, CMD_DB_UPDATEDAILYVIPDATA, CMD_DB_UPDATEDAILYYANGGONGBKJIFENDATA, CMD_DB_UPDATESINGLETIMEAWARDFLAG, CMD_DB_ADDSHENGXIAOGUESSHIST,
        CMD_DB_UPDATEUSERGOLD_CMD, CMD_DB_ADDGOLDBUYITEM, CMD_DB_UPDATEROLEBAGNUM, CMD_DB_SETLINGDIWARREQUEST, CMD_DB_UPDATEGOODSLIMIT, CMD_DB_UPDATEROLEPARAM,
        CMD_DB_ADDQIANGGOUBUYITEM, CMD_DB_ADDQIANGGOUITEM, CMD_DB_QUERYCURRENTQIANGGOUITEM, CMD_DB_QUERYQIANGGOUBUYITEMS, CMD_DB_UPDATEQIANGGOUTIMEOVER,
        CMD_DB_GETBANGHUIMINIDATA, CMD_DB_ADDBUYITEMFROMNPC, CMD_DB_ADDZAJINDANHISTORY, CMD_DB_QUERYQIANGGOUBUYITEMINFO, CMD_DB_QUERYFIRSTCHONGZHIBYUSERID,
        CMD_DB_QUERYKAIFUONLINEAWARDROLEID, CMD_DB_ADDKAIFUONLINEAWARD, CMD_DB_ADDGIVEUSERMONEYITEM, CMD_DB_QUERYKAIFUONLINEAWARDLIST,
        CMD_DB_ADDEXCHANGE1ITEM, CMD_DB_ADDEXCHANGE2ITEM, CMD_DB_ADDEXCHANGE3ITEM, CMD_DB_ADDFALLGOODSITEM, CMD_DB_UPDATEROLEPROPS, CMD_DB_QUERYTODAYCHONGZHIMONEY,
        CMD_DB_QUERYDAYCHONGZHIBYUSERID, CMD_DB_CLEARALLCACHINGROLEDATA,
        CMD_DB_QUERYXINGYUNORYUEDUCHOUJIANGINFO,    // GS-DB 询问幸运或月度抽奖信息 [7/17/2013 LiaoWei]
        CMD_DB_EXECUXINGYUNORYUEDUCHOUJIANGINFO,    // GS-DB 更新幸运或月度抽奖信息 [7/17/2013 LiaoWei]
        CMD_DB_ADDYUEDUCHOUJIANGHISTORY,            // GS-DB 增加月度抽奖历史信息 [7/23/2013 LiaoWei]
        CMD_DB_EXECUTECHANGEOCCUPATION,             // GS-DB 转职操作  [9/28/2013 LiaoWei]
        CMD_DB_QUERYBLOODCASTLEENTERCOUNT,          // GS-DB 请求血色堡垒进入次数[11/6/2013 LiaoWei]
        CMD_DB_UPDATEBLOODCASTLEENTERCOUNT,         // GS-DB 更新血色堡垒进入次数[11/6/2013 LiaoWei]
        CMD_DB_QUERYFUBENHISINFO,                   // GS-DB 请求副本历史信息 [11/16/2013 LiaoWei] 
        CMD_DB_CLEANDATAWHENFRESHPLAYERLOGOUT,      // GS-DB 在新手阶段掉线处理 [12/2/2013 LiaoWei]
        CMD_DB_FINISHFRESHPLAYERSTATUS,             // GS-DB 结束新手阶段 [12/2/2013 LiaoWei]
        CMD_DB_EXECUTECHANGETASKSTARLEVEL,          // GS-DB 改变任务星级等级[12/3/2013 LiaoWei]
        CMD_DB_EXECUTEUPDATEROLESOMEINFO,           // GS-DB 更新角色的一些信息 [12/17/2013 LiaoWei]
        CMD_DB_QUERYDAYACTIVITYTOTALPOINT,          // GS-DB 请求日常活动最高积分信息 [12/24/2013 LiaoWei]
        CMD_DB_QUERYDAYACTIVITYSELFPOINT,           // GS-DB 请求自己的日常活动积分信息 [12/24/2013 LiaoWei]
        CMD_DB_UPDATEDAYACTIVITYSELFPOINT,          // GS-DB 更新自己的日常活动积分信息 [12/24/2013 LiaoWei]
        CMD_DB_QUERYEVERYDAYONLINEAWARDGIFTINFO,    // GS-DB 请求每日在线奖励信息 [1/12/2014 LiaoWei]
        CMD_DB_ADD_ZHANMENGSHIJIAN,                 // GS-DB 请求请求添加战盟事件 [3/14/2014 JinJieLong]
        CMD_DB_ZHANMENGSHIJIAN_DETAIL,              // GS-DB 请求战盟事件详情 [3/14/2014 JinJieLong]
        CMD_DB_JINGJICHANG_GET_DATA,                // GS-DB 请求获取玩家竞技场数据 [3/21/2014 JinJieLong]
        CMD_DB_JINGJICHANG_GET_CHALLENGE_DATA,      // GS-DB 请求获取竞技场被挑战者mini数据 [3/21/2014 JinJieLong]
        CMD_DB_JINGJICHANG_CREATE_DATA,             // GS-DB 请求创建竞技场数据 [3/22/2014 JinJieLong]
        CMD_DB_JINGJICHANG_REQUEST_CHALLENGE,       // GS-DB 竞技场请求挑战 [3/22/2014 JinJieLong]
        CMD_DB_JINGJICHANG_CHALLENGE_END,           // GS-DB 竞技场挑战结束 [3/22/2014 JinJieLong]
        CMD_DB_JINGJICHANG_SAVE_DATA,               // GS-DB 保存竞技场数据 [3/22/2014 JinJieLong]
        CMD_DB_JINGJICHANG_ZHANBAO_DATA,            // GS-DB 获取竞技场战报数据 [3/22/2014 JinJieLong]
        CMD_DB_JINGJICHANG_REMOVE_CD,               // GS-DB 消除挑战CD [3/25/2014 JinJieLong]
        CMD_DB_JINGJICHANG_GET_RANKING_AND_NEXTREWARDTIME,// GS-DB 获取排名和下次领取奖励时间 [3/25/2014 JinJieLong]
        CMD_DB_JINGJICHANG_UPDATE_NEXTREWARDTIME,   // GS-DB  更新下次领取竞技场排行榜奖励时间 [3/25/2014 JinJieLong]
        CMD_DB_ADD_BAITANLOG,                       // GS-DB 请求请求添加摆摊日志
        CMD_DB_UPDATEPUSHMESSAGEINFO,               // GS-DB 更新推送信息 [4/23/2014 LiaoWei]
        CMD_DB_QUERYPUSHMESSAGEUSERLIST,            // GS-DB 请求要推送的玩家列表 [4/23/2014 LiaoWei]
        CMD_DB_ADDWING,                             // GS-DB 请求得到第一个翅膀[4/30/2014, liuhuicheng]
        CMD_DB_MODWING,                             // GS-DB 请求修改翅膀[4/30/2014, liuhuicheng]
        CMD_DB_REFERPICTUREJUDGE,                   // GS-DB 提交图鉴信息 [5/18/2014 LiaoWei]
        CMD_DB_QUERYMOJINGEXCHANGEINFO,             // GS-DB 请求绑定钻石兑换信息 [5/21/2014 LiaoWei]
        CMD_DB_UPDATEMOJINGEXCHANGEINFO,            // GS-DB 更新绑定钻石兑换信息 [5/21/2014 LiaoWei]
        CMD_DB_MODIFY_WANMOTA,                      // GS-DB 修改万魔塔表数据 [6/6/2014 ChenXiaojun]
        CMD_DB_GET_WANMOTA_DETAIL,                  // GS-DB 获取万魔塔信息 [6/6/2014 ChenXiaojun]
        CMD_DB_QUERY_REPAYACTIVEINFO,               // GS-DB 查询回馈活动信息
        CMD_DB_GET_REPAYACTIVEAWARD,                // GS-DB 获取回馈活动奖励
        CMD_DB_UPDATE_ACCOUNT_ACTIVE,               // GS-DB 更新帐户活跃信息  [7/9/2014 ChenXiaojun]
        CMD_DB_QUERY_GETOLDRESINFO,                 // GS-DB 查询资源找回信息 [7/11/2014 gwz]
        CMD_DB_UPDATE_OLDRESOURCE,                  // GS-DB 资源找回，领取资源 [7/11/2014 gwz]
        CMD_DB_UPDATEGOODS_CMD2,                    // GS-DB 更新物品扩展信息(装备洗练等)
        CMD_DB_UPDATESTARCONSTELLATION,             // GS-DB 激活星座更新星座信息 [8/1/2014 LiaoWei]
        CMD_DB_SAVECONSUMELOG,                      // GS-DB 保存钻石消费信息 [8/19/2014 gwz]
        CMD_DB_QUERYVIPLEVELAWARDFLAG,              // GS-DB 玩家领取VIP等级奖励 [8/21/2014 LiaoWei]
        CMD_DB_UPDATEVIPLEVELAWARDFLAG,             // GS-DB 玩家更新VIP等级奖励标记信息 [8/21/2014 LiaoWei]
        CMD_DB_UPDATEFIRSTCHARGE,                   // GS-DB 玩家更新首充信息 [9/16/2014 gwz]
        CMD_DB_FIRSTCHARGE_CONFIG,                  // GS-DB 启动时发送给db首充配置表 [12/11/2014 gwz]
        CMD_DB_UPDATEBANGHUIFUBEN,					// GS-DB 更新帮会副本信息
        CMD_DB_ADD_STORE_YINLIANG,                  // GS-DB 更新玩家仓库金币信息
        CMD_DB_ADD_STORE_MONEY,                     // GS-DB 更新玩家仓库绑定金币信息
        CMD_DB_GM_UPDATE_BANGLEVEL,                   // GS-DB 更新玩家帮会战旗等级
        CMD_DB_UPDATE_LINGYU,                       // GS-DB 更新翎羽
        CMD_DB_REQUESTNEWGMAILLIST,                 // GS-DB 去GameDBServer获取新的群邮件列表 
        CMD_DB_MODIFYROLEGMAIL,                     // GS-DB 去GameDBServer设置玩家群邮件读取记录

        CMD_DB_QUERYROLEMONEYINFO,                  // GS-DB 查询玩家钻石的相关数据

        CMD_DB_ALL_COMPLETION_OF_TASK_BY_TASKID,    // GS-DB 完成某任务与之前所有任务(仅限对db操作完成，不走任务流程)
        CMD_DB_ROLE_BUY_YUE_KA_BUT_OFFLINE,         // GS-DB 玩家买了月卡但是下线了，交由DB处理
        CMD_DB_MODIFY_ROLE_HUO_BI_OFFLINE,          // GS-DB 后台离线修改角色货币
        CMD_DB_UPDATE_USR_SECOND_PASSWORD,          // GS-DB 更新账号二级密码
        CMD_DB_GET_USR_SECOND_PASSWORD,             // GS-DB 获取账号的二级密码

        CMD_DB_UPDATE_MARRY_DATA,                   // GS_DB [bing] 更新婚姻数据
        CMD_DB_GET_MARRY_DATA,                      // GS_DB [bing] 根据Roleid获取婚姻数据
        CMD_DB_MARRY_PARTY_QUERY,                   // GS_DB 读取婚宴列表
        CMD_DB_MARRY_PARTY_ADD,                     // GS_DB 加婚宴
        CMD_DB_MARRY_PARTY_REMOVE,                  // GS_DB 刪婚宴
        CMD_DB_MARRY_PARTY_JOIN_INC,                // GS_DB 婚宴參予次数
        CMD_DB_MARRY_PARTY_JOIN_CLEAR,              // 清空婚宴个人參予数
        CMD_DB_TIANTI_ADD_ZHANBAO_LOG = 10200,      // 添加天梯战报日志
        CMD_DB_TIANTI_UPDATE_ROLE_DATA = 10201,      // 更新角色天梯数据
        CMD_DB_TIANTI_UPDATE_RONGYAO = 10202,      // 更新角色天梯数据

        CMD_DB_MERLIN_CREATE,                               // GS-DB 创建梅林魔法书数据
        CMD_DB_MERLIN_UPDATE,                              // GS-DB 更新梅林魔法书数据
        CMD_DB_MERLIN_QUERY,                                // GS-DB 查询梅林魔法书数据

        CMD_DB_UPDATE_HOLYITEM,                     // GS_DB [bing] 更新圣物数据

        CMD_DB_FLUORESCENT_GEM_RESET_BAG, // GS-DB 整理荧光宝石背包 [XSea 2015/8/7]
        CMD_DB_FLUORESCENT_POINT_UPDATE, // GS-DB 更新荧光粉末 [XSea 2015/8/10]
        CMD_DB_FLUORESCENT_EQUIP, // GS-DB 装备荧光宝石 [XSea 2015/8/13]
        CMD_DB_FLUORESCENT_UN_EQUIP, // GS-DB 卸下荧光宝石 [XSea 2015/8/13]
        CMD_DB_FLUORESCENT_POINT_MODIFY, // GS-DB 更新荧光粉末增加 or 减少

        #region 10220-10300-lt

        CMD_DB_QUERY_ROLEMINIINFO = 10220, //根据角色ID查询角色区号/帐号等不易变信息
        CMD_DB_QUERY_USERACTIVITYINFO = 10221, //查询帐号_活动_活动时间相对应的活动状态和奖励信息
        CMD_DB_UPDATE_USERACTIVITYINFO = 10222, //保存帐号_活动_活动时间相对应的活动状态和奖励信息

        #endregion 10220-10300-lt

        CMD_DB_GET_SERVERLIST = 11000,
        CMD_DB_ONLINE_SERVERHEART,
        CMD_DB_GET_SERVERID,
        CMD_NAME_REGISTERNAME = 12000,             //注册名字到名字服务器
        CMD_SPR_GM_SET_MAIN_TASK = 13000,          //GM命令设置任务

        //CMD_DB_RETURN_RECELL_COUNT = 13100, //玩家召回人数
        //CMD_DB_RETURN_RECELL_USER_ID = 13101, //玩家召回推荐人id
        //CMD_DB_RETURN_RECELL_USER_ID_SET = 13102, //玩家召回推荐人id设置
        //CMD_DB_RETURN_AWARD = 13103, //玩家召回奖励列表
        //CMD_DB_RETURN_AWARD_UPDATE = 13104, //玩家召回奖励
        //CMD_DB_RETURN_IS_OPEN = 13105, //玩家召回设置是否开放  
        //CMD_DB_RETURN_UPDATE_STATE = 13106, //玩家找回_检查审核状态
        //CMD_DB_GM_BAN_CHACK                 = 13107, //获取玩家外挂进程列表

        CMD_DB_RETURN_IS_OPEN = 13100,      //设置开放状态  
        CMD_DB_RETURN_DATA = 13101,         //玩家找回_数据
        CMD_DB_RETURN_DATA_UPDATE = 13102,  //玩家找回_数据更新
        CMD_DB_RETURN_DATA_DEL = 13103,     //玩家找回_删除
        CMD_DB_RETURN_DATA_LIST = 13104,    //玩家找回_列表
        CMD_DB_RETURN_AWARD_LIST = 13105,   //奖励列表
        CMD_DB_RETURN_AWARD_UPDATE = 13106, //奖励更新

        CMD_DB_TALENT_MODIFY = 13108, //天赋数据——基本更新
        CMD_DB_TALENT_EFFECT_MODIFY = 13109, //天赋数据——效果更新
        CMD_DB_TALENT_EFFECT_CLEAR = 13110, //天赋数据——效果清除

        CMD_DB_GM_BAN_CHACK = 13111, //获取玩家外挂进程列表
        CMD_DB_GM_BAN_LOG = 13112, //记录玩家外挂封号信息

        CMD_DB_TEN_INIT = 13113, //应用宝初始化 

        CMD_DB_SPREAD_AWARD_GET = 13114,
        CMD_DB_SPREAD_AWARD_UPDATE = 13115,

        CMD_DB_FUND_INFO = 13116,
        CMD_DB_FUND_BUY = 13117,
        CMD_DB_FUND_AWARD = 13118,
        CMD_DB_FUND_MONEY = 13119,

        CMD_DB_ACTIVATE_GET = 13120,
        CMD_DB_ACTIVATE_SET = 13121,

        CMD_DB_UNION_ALLY_LOG = 13122,
        CMD_DB_UNION_ALLY_LOG_ADD = 13123,


        CMD_DB_INPUTPOINTS_EXCHANGE = 13150,  //充值积分兑换
        CMD_DB_UPDATE_INPUTPOINTS = 13151,  //更新充值积分
        CMD_DB_UPDATE_INPUTPOINTS_USERID = 13152,  //更新充值积分 by userid

        CMD_DB_UPDATE_SPECACT = 13160,  //更新专享活动数据
        CMD_DB_DELETE_SPECACT = 13161,  //删除专享活动
        CMD_DB_GET_SPECJIFENINFO = 13162,  //获得专享积分数据
        CMD_DB_UPDATE_SPECJIFEN = 13163,  //更新专享积分
        CMD_DB_GET_SPECACTINFO = 13164,  //获得专享活动数据

        CMD_DB_ROLE_JIERI_GIVE_TO_OTHER = 13200,                // GS-DB 赠送节日物品
        CMD_DB_SPR_GET_JIERI_GIVE_AWARD = 13201,                // GS-DB 角色领取节日赠送奖励
        CMD_DB_LOAD_ROLE_JIERI_GIVE_RECV_INFO = 13202,               // GS-DB 角色首次查询节日赠送信息时，从数据库加载

        CMD_DB_LOAD_JIERI_GIVE_KING_RANK = 13203,               //GS-DB 加载节日赠送王排行, 服务器启动时加载前N条
        CMD_DB_LOAD_ROLE_JIERI_GIVE_KING = 13204,               //GS-DB 角色第一次上线时，加载角色的节日赠送信息
        CMD_DB_GET_JIERI_GIVE_KING_AWARD = 13205,               //GS-DB 领取节日赠送王奖励

        CMD_DB_LOAD_JIERI_RECV_KING_RANK = 13206,               //GS-DB 加载节日收取王排行, 服务器启动时加载前N条
        CMD_DB_LOAD_ROLE_JIERI_RECV_KING = 13207,               //GS-DB 角色第一次上线时，加载角色的节日赠送信息
        CMD_DB_GET_JIERI_RECV_KING_AWARD = 13208,               //GS-DB 领取节日收取王奖励

        CMD_DB_UPDATE_ROLE_GUARD_STATUE = 13210,        // GS-DB 更新角色守护雕像信息
        CMD_DB_UPDATE_ROLE_GUARD_SOUL = 13211,              // GS-DB 更新角色守护之灵信息

        CMD_DB_QUERY_JIERI_LIANXU_CHARGE = 13214,       // GS-DB 查询节日连续充值数据
        CMD_DB_UPDATE_JIERI_LIANXU_CHARGE_AWARD = 13215,  // GS-DB 更新连续充值领奖信息

        CMD_DB_SPR_GET_JIERI_RECV_AWARD = 13218,                // GS-DB 角色领取节日收礼奖励
        CMD_DB_LOAD_ROLE_JIERI_RECV_INFO = 13219,               // GS-DB 角色首次查询节日收礼信息时，从数据库加载
        CMD_DB_UPDATE_SEVEN_DAY_ITEM_DATA = 13220,          // GS-DB 更新七日活动信息
        CMD_DB_CLEAR_SEVEN_DAY_DATA = 13221,                    // GS-DB 超时清除七日活动信息
        CMD_DB_GET_EACH_DAY_CHARGE = 13222,                        // GS-DB 查询每日充值

        CMD_DB_GET_KING_ROLE_DATA = 13230,                         // 保存王者数据，pk之王，罗兰城主
        CMD_DB_PUT_KING_ROLE_DATA = 13231,                         // 设置王者数据，pk之王，罗兰城主
        CMD_DB_CLR_KING_ROLE_DATA = 13232,                         // 清除王者数据，pk之王，罗兰城主

        CMD_DB_UPDATE_BUILDING_DATA = 13300,        // 更新建筑数据
        CMD_DB_UPDATE_BUILDING_LOG = 13301,        // 更新建筑Log

        CMD_DB_UPDATE_ONEPIECE_TREASURE_LOG = 13400,    // 更新藏宝秘境Log

        CMD_SPR_KF_SWITCH_SERVER = 14000,           //跨服_通知客户端切换服务器(包含跨服登录Token)

        CMD_SPR_CHANGE_NAME = 14001,                //角色请求改名
        CMD_NTF_EACH_ROLE_ALLOW_CHANGE_NAME = 14002, //服务器向客户端主动推送每个角色的允许改名信息
        CMD_NTF_CANNOT_JOIN_KUAFU_FU_BEN_END_TICKS = 14003, //服务器通知客户端更新禁止参与跨服副本的结束时间, DateTime.Now.Ticks   客户端说先不发这个消息 2015/08/15
        CMD_PLEASE_TELL_ME = 14004,
        CMD_DB_GET_PLAT_CHARGE_KING_LIST = 14005, // 获取平台充值王排行榜, 废弃不再使用
        CMD_SPR_CHANGE_BANGHUI_NAME = 14006, // 更改帮会名字
        CMD_DB_LOAD_TRADE_BLACK_HOUR_ITEM = 14007, // 加载交易黑名单信息
        CMD_DB_SAVE_TRADE_BLACK_HOUR_ITEM = 14008, // 保存交易黑名单信息

        CMD_NTF_MAGIC_CRASH_UNITY = 14010, //

        CMD_DB_ZHENGBA_SAVE_SUPPORT_LOG = 14011,    // 众神争霸 --- 存储支持日志
        CMD_DB_ZHENGBA_SAVE_PK_LOG = 14012,         // 众神争霸 --- 存储pk日志
        CMD_DB_ZHENGBA_LOAD_SUPPORT_LOG = 14013,    // 众神争霸 --- 加载支持日志
        CMD_DB_ZHENGBA_LOAD_PK_LOG = 14014,         // 众神争霸 --- 加载pk日志
        CMD_DB_ZHENGBA_LOAD_SUPPORT_FLAG = 14015,   // 众神争霸 --- 加载我的支持信息
        CMD_DB_ZHENGBA_LOAD_WAIT_AWARD_YAZHU = 14016,   // 众神争霸 --- 加载等待押注发奖
        CMD_DB_ZHENGBA_SET_YAZHU_AWARD_FLAG = 14017, // 众神争霸 --- 更新押注发奖标记

        CMD_LOGDB_ADD_ITEM_LOG = 20000,             // 向日志数据库服务器添加物品操作日志
        CMD_LOGDB_ADD_TRADEMONEY_FREQ_LOG = 20001,             // 向日志数据库服务器添加物品操作日志
        CMD_LOGDB_ADD_TRADEMONEY_NUM_LOG = 20002,             // 向日志数据库服务器添加物品操作日志
        CMD_LOGDB_UPDATE_ROLE_KUAFU_DAY_LOG = 20003,             // 向日志数据库服务器添加物品操作日志


        CMD_DB_UPDATA_TAROT = 20100,                //塔罗牌 向DB服更新数据

        /// <summary>
        /// Xóa kỹ năng khỏi DB
        /// </summary>
        CMD_DB_DEL_SKILL = 20101,


        CMD_SPR_TASKLIST_DATA = 29900,
        CMD_SPR_TASKLIST_KEY = 30000,
        CMD_SPR_TASKLIST_NOTIFY = 30001,

        // linyl
        CMD_SPR_GETATTRIBALL = 30100,   // 获取装备二级属性

        CMD_DB_ERR_RETURN = 30767, //MAX 消息定义不可超过此值


        #region KiemThe
        #region CreateRole
        /// <summary>
        /// Lấy danh sách Tân Thủ Thôn
        /// </summary>
        CMD_KT_GET_NEWBIE_VILLAGES = 40000,
        #endregion

        #region Skill
        /// <summary>
        /// Gói tin gửi về Client làm mới lại danh sách kỹ năng
        /// </summary>
        CMD_KT_G2C_RENEW_SKILLLIST = 45000,

        /// <summary>
        /// Gói tin gửi về Server yêu cầu cộng điểm kỹ năng của Client
        /// </summary>
        CMD_KT_C2G_SKILL_ADDPOINT = 45001,

        /// <summary>
        /// Gói tin gửi từ Client lên Server lưu thiết lập kỹ năng tay vào khung sử dụng
        /// </summary>
        CMD_KT_C2G_SET_SKILL_TO_QUICKKEY = 45002,

        /// <summary>
        /// Gói tin gửi từ Client lên Server lưu thiết lập và kích hoạt vòng sáng tại ô tương ứng
        /// </summary>
        CMD_KT_C2G_SET_AND_ACTIVATE_AURA = 45003,


        /// <summary>
        /// Gói tin gửi từ Client về Server yêu cầu sử dụng kỹ năng
        /// </summary>
        CMD_KT_C2G_USESKILL = 45009,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo đối tượng sử dụng kỹ năng
        /// </summary>
        CMD_KT_G2C_USESKILL = 45010,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo kỹ năng thiết lập trạng thái chờ phục hồi
        /// </summary>
        CMD_KT_G2C_NOTIFYSKILLCOOLDOWN = 45011,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo tạo đạn
        /// </summary>
        CMD_KT_G2C_CREATEBULLET = 45012,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo đạn nổ
        /// </summary>
        CMD_KT_G2C_BULLETEXPLODE = 45013,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo kết quả kỹ năng
        /// </summary>
        CMD_KT_G2C_SKILLRESULT = 45014,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo thao tác Buff
        /// </summary>
        CMD_KT_G2C_SPRITEBUFF = 45015,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo đối tượng tốc biến tới vị trí chỉ định
        /// </summary>
        CMD_KT_G2C_BLINKTOPOSITION = 45016,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo tạo nhiều tia đạn
        /// </summary>
        CMD_KT_G2C_CREATEBULLETS = 45017,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo đạn nổ nhiều vị trí
        /// </summary>
        CMD_KT_G2C_BULLETEXPLODES = 45018,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo tốc độ di chuyển của đối tượng thay đổi
        /// </summary>
        CMD_KT_G2C_MOVESPEEDCHANGED = 45019,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo đối tượng khinh công tới vị trí chỉ định
        /// </summary>
        CMD_KT_G2C_FLYTOPOSITION = 45020,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo trạng thái ngũ hành của đối tượng thay đổi
        /// </summary>
        CMD_KT_G2C_SPRITESERIESSTATE = 45021,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo danh sách kết quả kỹ năng
        /// </summary>
        CMD_KT_G2C_SKILLRESULTS = 45022,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo trạng thái tàng hình của đối tượng thay đổi
        /// </summary>
        CMD_KT_G2C_OBJECTINVISIBLESTATECHANGED = 45023,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo làm mới tất cả thời gian hồi kỹ năng
        /// </summary>
        CMD_KT_G2C_RESETSKILLCOOLDOWN = 45024,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo tốc độ xuất chiêu của đối tượng thay đổi
        /// </summary>
        CMD_KT_G2C_ATTACKSPEEDCHANGED = 45025,
        #endregion

        /// <summary>
        /// Lệnh GM
        /// </summary>
        CMD_KT_GM_COMMAND = 50000,

        #region RoleAttributes
        /// <summary>
        /// Lấy thông tin thuộc tính nhân vật
        /// </summary>
        CMD_KT_ROLE_ATRIBUTES = 50001,
        #endregion

        #region Notification Tips
        /// <summary>
        /// Hiển thị NotificationTip
        /// </summary>
        CMD_KT_SHOW_NOTIFICATIONTIP = 50002,
        #endregion

        #region Faction and Route changed
        /// <summary>
        /// Thông báo môn phái người chơi đã thay đổi
        /// </summary>
        CMD_KT_FACTIONROUTE_CHANGED = 50003,
        #endregion

        #region Click NPC
        /// <summary>
        /// Người chơi ấn vào NPC
        /// </summary>
        CMD_KT_CLICKON_NPC = 50004,
        #endregion

        #region NPCDialog
        /// <summary>
        /// Server gửi lệnh mở khung NPC Dialog cho Client
        /// </summary>
        CMD_KT_G2C_NPCDIALOG = 50005,

        /// <summary>
        /// Client phản hồi về Server về sự lựa chọn của người chơi vào thành phần trong khung NPC Dialog (nếu có)
        /// </summary>
        CMD_KT_C2G_NPCDIALOG = 50006,
        #endregion

        #region Change Action
        /// <summary>
        /// Server gửi lệnh cho Client thay đổi động tác
        /// </summary>
        CMD_KT_G2C_CHANGEACTION = 50007,

        /// <summary>
        /// Client gửi yêu cầu thay đổi động tác cho Server
        /// </summary>
        CMD_KT_C2G_CHANGEACTION = 50008,
        #endregion

        #region Debug
        /// <summary>
        /// Server gửi lệnh cho Client hiện khối Debug Object ở các vị trí
        /// </summary>
        CMD_KT_G2C_SHOWDEBUGOBJECTS = 50009,
        #endregion

        #region UI
        /// <summary>
        /// Server gửi lệnh cho Client hiện khung hồi sinh
        /// </summary>
        CMD_KT_G2C_SHOWREVIVEFRAME = 50010,

        /// <summary>
        /// Gói tin phản hồi từ Client về Server phương thức hồi sinh được người chơi lựa chọn
        /// </summary>
        CMD_KT_C2G_CLIENTREVIVE = 50011,
        #endregion

        #region Trap
        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo có bẫy tại vị trí tương ứng
        /// </summary>
        CMD_KT_SPR_NEWTRAP = 50012,

        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo có bẫy tại vị trí tương ứng
        /// </summary>
        CMD_KT_SPR_DELTRAP = 50013,
        #endregion

        #region Settings
        /// <summary>
        /// Gói tin phản hồi từ Client về Server lưu thiết lập hệ thống
        /// </summary>
        CMD_KT_C2G_SAVESYSTEMSETTINGS = 50014,

        /// <summary>
        /// Gói tin phản hồi từ Client về Server lưu thiết lập Auto
        /// </summary>
        CMD_KT_C2G_SAVEAUTOSETTINGS = 50015,
        #endregion

        #region Team
        /// <summary>
        /// Gói tin thông báo mời vào nhóm
        /// </summary>
        CMD_KT_INVITETOTEAM = 50016,
        /// <summary>
        /// Gói tin yêu cầu tạo nhóm
        /// </summary>
        CMD_KT_CREATETEAM = 50017,
        /// <summary>
        /// Gói tin đồng ý thêm vào nhóm tương ứng
        /// </summary>
        CMD_KT_AGREEJOINTEAM = 50018,
        /// <summary>
        /// Gói tin từ chối thêm vào nhóm tương ứng
        /// </summary>
        CMD_KT_REFUSEJOINTEAM = 50019,
        /// <summary>
        /// Gói tin lấy thông tin nhóm tương ứng
        /// </summary>
        CMD_KT_GETTEAMINFO = 50020,
        /// <summary>
        /// Gói tin trục xuất người chơi khỏi nhóm
        /// </summary>
        CMD_KT_KICKOUTTEAMMATE = 50021,
        /// <summary>
        /// Gói tin bổ nhiệm đội trưởng
        /// </summary>
        CMD_KT_APPROVETEAMLEADER = 50022,
        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo thay đổi thông tin đội viên
        /// </summary>
        CMD_KT_REFRESHTEAMMEMBERATTRIBUTES = 50023,
        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo thành viên thay đổi
        /// </summary>
        CMD_KT_TEAMMEMBERCHANGED = 50024,
        /// <summary>
        /// Gói tin thông báo bản thân rời nhóm
        /// </summary>
        CMD_KT_LEAVETEAM = 50025,
        /// <summary>
        /// Gói tin gửi từ Server về Client thông báo cập nhật thông tin tổi đội của người chơi tương ứng
        /// </summary>
        CMD_KT_G2C_UPDATESPRITETEAMDATA = 50026,
        /// <summary>
        /// Gói tin thông báo yêu cầu xin vào nhóm của người chơi tương ứng
        /// </summary>
        CMD_KT_ASKTOJOINTEAM = 50027,
        #endregion

        #region ItemDialog
        /// <summary>
        /// Server gửi lệnh mở khung Item Dialog cho Client
        /// </summary>
        CMD_KT_G2C_ITEMDIALOG = 50030,

        /// <summary>
        /// Client phản hồi về Server về sự lựa chọn của người chơi vào thành phần trong khung Item Dialog (nếu có)
        /// </summary>
        CMD_KT_C2G_ITEMDIALOG = 50031,
        #endregion
        #endregion


        #region SHOPCMD


        CMD_KT_C2G_OPENSHOP = 50032,

        #endregion




        #region Test
        /// <summary>
        /// Gói tin Test
        /// </summary>
        CMD_KT_TESTPACKET = 32123,
        #endregion
    };

    public enum TCPProcessCmdResults { RESULT_OK = 0, RESULT_FAILED = 1, RESULT_DATA = 2, RESULT_UNREGISTERED = 3, };

    /// <summary>
    /// 处理收到的远程客户端的TCP协议命令
    /// </summary>
    class TCPCmdHandler
    {
        public static bool isUpdateFuBenData = false;
        /// <summary>
        /// SHA1密码
        /// </summary>
        public static string KeySHA1 = "abcde";

        /// <summary>
        /// 数据加密密码
        /// </summary>
        public static string KeyData = "12345";

        /// <summary>
        /// Web加密密码
        /// </summary>
        public static string WebKey = "12345";

        /// <summary>
        /// 本地存储的WebKey
        /// </summary>
        public static string WebKeyLocal = "12345";

        /// <summary>
        /// 过期时间
        /// </summary>
        public static long MaxTicks = (60L * 60L * 24 * 1000L * 10000L);

        #region 统计指令信息

        /// <summary>
        /// 总共处理的指令个数
        /// </summary>
        public static long TotalHandledCmdsNum = 0;

        /// <summary>
        /// 消耗时间最长的指令ID
        /// </summary>
        public static int MaxUsedTicksCmdID = 0;

        /// <summary>
        /// 消耗时间最长的指令ID消耗的时间
        /// </summary>
        public static long MaxUsedTicksByCmdID = 0;

        /// <summary>
        /// 正在处理指令的完成端口线程统计
        /// </summary>
        private static Dictionary<TMSKSocket, int> HandlingCmdDict = new Dictionary<TMSKSocket, int>();

        /// <summary>
        /// 获取正在处理指令的完成端口线程的个数
        /// </summary>
        /// <returns></returns>
        public static int GetHandlingCmdCount()
        {
            lock (HandlingCmdDict)
            {
                return HandlingCmdDict.Count;
            }
        }

        #endregion 统计指令信息


        /// <summary>
        /// Thực hiện kết nối với 1 session mới của GAMESERVER
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static void ProcessCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count)
        {

            //接收到了完整的命令包
            TCPOutPacket tcpOutPacket = null;
            TCPProcessCmdResults result = TCPProcessCmdResults.RESULT_FAILED;

            result = TCPCmdHandler.ProcessCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);

            if (result == TCPProcessCmdResults.RESULT_DATA && null != tcpOutPacket)
            {
                //向登陆客户端返回数据
                tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
            }
            else if (result == TCPProcessCmdResults.RESULT_FAILED)//解析失败, 直接关闭连接
            {
                if (nID != (int)TCPGameServerCmds.CMD_LOG_OUT)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("解析并执行命令失败: {0},{1}, 关闭连接", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                }

                //这儿需要关闭链接--->这样关闭对吗?
                tcpMgr.MySocketListener.CloseSocket(socket);
            }
        }

        /// <summary>
        /// Nhận gói tin từ CLient gửi về và giải mã nó (tương đương PlayZone_Network ở client)
        /// </summary>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            
            long startTicks = TimeUtil.NOW();

            
            lock (HandlingCmdDict)
            {
                HandlingCmdDict[socket] = 1;
            }

            TCPProcessCmdResults result = TCPProcessCmdResults.RESULT_FAILED;
            tcpOutPacket = null;

            
            socket.session.CmdID = nID;
            socket.session.CmdTime = startTicks;
#if DEBUG

            Console.Write(nID.ToString() + "::" + (TCPGameServerCmds)nID + "\r\n");

#endif
            #region 指令处理

            result = TCPCmdDispatcher.getInstance().dispathProcessor(socket, nID, data, count);
            if (result == TCPProcessCmdResults.RESULT_UNREGISTERED)
            {
                switch (nID)
                {
                    case (int)TCPGameServerCmds.CMD_LOGIN_ON2:
                        {
                            result = ProcessUserLogin2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_LOGIN_ON:
                        {
                            result = ProcessUserLoginCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_LOG_OUT:
                        {
                            result = TCPProcessCmdResults.RESULT_FAILED;
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_ROLE_LIST:
                        {
                            result = ProcessGetRoleListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            //result = TCPCmdDispatcher.getInstance().transmission(socket, nID, data, count);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_CREATE_ROLE:
                        {
                            result = ProcessCreateRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_REMOVE_ROLE:
                        {
                            result = ProcessRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_PREREMOVE_ROLE:
                        {
                            result = ProcessPreRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_UNREMOVE_ROLE:
                        {
                            result = ProcessUnRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_INIT_GAME:
                        {
                            result = ProcessInitGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SYNC_TIME:
                        {
                            result = ProcessTimeSyncGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    //[bing] 由客户端每间隔n分钟向服务器请求同步时间
                    case (int)TCPGameServerCmds.CMD_SYNC_TIME_BY_CLIENT:
                        {
                            result = ProcessTimeSyncGameByClientCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_PUSH_VERSION:
                        {
                            result = ProcessClientPushVersionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 登录后获取公告显示信息 [10/28/2014 ChenXiaojun]
                    case (int)TCPGameServerCmds.CMD_SPR_NOTIFYSHOWGONGGAO:
                        {
                            result = ProcessNotifyShowGonggaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_PLAY_GAME:
                        {
                            result = ProcessStartPlayGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MOVE:
                        {
                            result = ProcessSpriteMoveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MOVEEND:
                        {
                            result = ProcessSpriteMoveEndCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_STOPMOVE:
                        {
                            result = ProcessSpriteStopMoveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MOVE2:
                        {
                            result = ProcessSpriteMove2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_POSITION:
                        {
                            result = ProcessSpritePosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_PETPOS:
                        {
                            result = ProcessSpritePetPosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ACTTION:
                        {
                            result = ProcessSpriteActionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CHANGEANGLE:
                        {
                            result = ProcessSpriteChangeAngleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ACTTION2:
                        {
                            result = ProcessSpriteAction2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ATTACK:
                        {
                            result = ProcessSpriteAttackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MAGICCODE:
                        {
                            result = ProcessSpriteMagicCodeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_REALIVE:
                        {
                            result = ProcessSpriteRealiveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CLICKON:
                        {
                            //result = ProcessSpriteClickOnCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_NEWTASK:
                        {
                            result = ProcessSpriteNewTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MAPCHANGE:
                        {
                            result = ProcessSpriteMapChangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETATTRIB2:
                        {
                            result = ProcessSpriteGetAttrib2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETATTRIBALL:
                        {
                            result = ProcessSpriteGetAttribAllCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_NPC_BUY:
                        {
                            result = ProcessSpriteNPCBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_NPC_SALEOUT:
                        {
                            result = ProcessSpriteNPCSaleOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ADD_GOODS:
                        {
                            result = ProcessSpriteAddGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MOD_GOODS:
                        {
                            result = ProcessSpriteModGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MERGE_GOODS:
                        {
                            result = ProcessSpriteMergeGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SPLIT_GOODS:
                        {
                            result = ProcessSpriteSplitGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_COMPTASK:
                        {
                            result = ProcessSpriteCompTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETFRIENDS:
                        {
                            result = ProcessSpriteGetFriendsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ADDFRIEND:
                        {
                            result = ProcessSpriteAddFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_REMOVEFRIEND:
                        {
                            result = ProcessSpriteRemoveFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CLICKONGOODSPACK:
                        {
                            result = ProcessSpriteClickOnGoodsPackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETTHING:
                        {
                            result = ProcessSpriteGetThingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CHGPKMODE:
                        {
                            result = ProcessSpriteChangePKModeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETNEWTASKDATA:
                        {
                            result = ProcessSpriteGetNewTaskDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ABANDONTASK:
                        {
                            result = ProcessSpriteAbandonTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MODTASK:
                        {
                            result = ProcessSpriteModTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CHAT:
                        {
                            result = ProcessSpriteChatCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_USEGOODS:
                        {
                            result = ProcessSpriteUseGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_FORGE:
                        {
                            result = ProcessSpriteForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SUBFORGE:
                        {
                            result = ProcessSpriteSubForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPBORNINDEXUPDATE:
                        {
                            result = ProcessSpriteEquipBornIndexUpdateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPINHERIT:
                        {
                            result = ProcessSpriteEquipInheritCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ENCHANCE:
                        {
                            result = ProcessSpriteEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETOTHERATTRIB:
                        {
                            result = ProcessSpriteGetOtherAttribCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETOTHERATTRIB2:
                        {
                            result = ProcessSpriteGetOtherAttrib2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MALL_BUY:
                        {
                            result = ProcessSpriteMallBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_YINLIANG_BUY:
                        {
                            result = ProcessSpriteYinLiangBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GOODSEXCHANGE:
                        {
                            result = ProcessSpriteGoodsExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GOODSSTALL:
                        {
                            result = ProcessSpriteGoodsStallCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_TEAM:
                        {
                            result = ProcessSpriteTeamCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_BATTLE:
                        {
                            result = ProcessSpriteBattleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ARENABATTLE:
                        {
                            result = ProcessSpriteArenaBattleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_PKKING_GET_ROLE_LOOKS:
                        {
                            result = ProcessSpriteGetPKKingLooksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CITYWARREQUEST:
                        {
                            if (GameManager.OPT_ChengZhanType == 0)
                            {
                                result = ProcessSpriteCityWarRequestCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            }
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_NPCSCRIPT:
                        {
                            result = ProcessSpriteNPCScriptCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_DEAD:
                        {
                            result = ProcessSpriteDeadCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_AUTOFIGHT:
                        {
                            result = ProcessSpriteAutoFightCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_HORSE:
                        {
                            result = ProcessSpriteHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_PET:
                        {
                            result = ProcessSpritePetCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CHANGEPOS:
                        {
                            result = ProcessSpriteChangePosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_DIANJIANGLIST:
                        {
                            result = ProcessSpriteDianJiangListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_DIANJIANG:
                        {
                            result = ProcessSpriteDianJiangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETDJPOINTS:
                        {
                            result = ProcessSpriteGetDJPointsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GOTOMAP:
                        {
                            result = ProcessSpriteGoToMapCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_QUERYIDBYNAME:
                        {
                            result = ProcessSpriteQueryNameByIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETHORSELIST:
                        {
                            result = ProcessSpriteGetHorseListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETOTHERHORSELIST:
                        {
                            result = ProcessSpriteGetOtherHorseListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETPETLIST:
                        {
                            result = ProcessSpriteGetPetListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_MODHORSE:
                        {
                            result = ProcessSpriteModeHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_MODPET:
                        {
                           // ĐIỀU KHIỂN PET
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SELECTHORSE:
                        {
                           // result = ProcessSpriteSelectHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETGOODSLISTBYSITE:
                        {
                            result = ProcessSpriteGetGoodsListBySiteCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETLINEINFO:
                        {
                            result = ProcessSpriteGetLineInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GET_MERGETYPES:
                        {
                            result = ProcessSpriteGetMergeTypesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GET_MERGEITEMS:
                        {
                            result = ProcessSpriteGetMergeItemsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GET_MERGENEWGOODS:
                        {
                            result = ProcessSpriteMergeNewGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETJINGMAILIST:
                        {
                         // Kinh Mạch Xóa
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETOTHERJINGMAILIST:
                        {
                            // Kinh Mạch Xóa
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_UP_JINGMAI_LEVEL:
                        {
                            // Kinh Mạch Xóa
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_LOADALREADY:
                        {
                            result = ProcessSpriteLoadAlreadyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPUPGRADE:
                        {
                            result = ProcessSpriteEquipUpgradeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ENCHASEJEWEL:
                        {
                            result = ProcessSpriteEnchaseJewelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SHOWBIGUAN:
                        {
                            result = ProcessSpriteShowBigGuanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETBIGUAN:
                        {
                            result = ProcessSpriteGetBigGuanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_JINGMAI_INFO:
                        {
                            result = ProcessSpriteJingMaiInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_HORSEENCHANCE:
                        {
                            // Cường hóa ngựa đã bỏ
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_HORSEUPGRADE:
                        {
                           // Nâng cấp ngựa đã bỏ
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETLIXIANBAITANTICKS:
                        {
                            result = ProcessSpriteGetLiXianBaiTanTicksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_UPDATELIXIANBAITANTICKS:
                        {
                            result = ProcessSpriteUpdateLiXianBaiTanTicksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                      /// BÁN HÀNG TRÊN SHOP
                    case (int)TCPGameServerCmds.CMD_SPR_OPENMARKET:
                        {
                            result = ProcessSpriteOpenMarketCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MARKETSALEMONEY:
                        {
                            result = ProcessSpriteMarketSaleMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SALEGOODS:
                        {
                            result = ProcessSpriteSaleGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SELFSALEGOODSLIST:
                        {
                            result = ProcessSpriteSelfSaleGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_OTHERSALEGOODSLIST:
                        {
                            result = ProcessSpriteOtherSaleGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MARKETROLELIST:
                        {
                            result = ProcessSpriteMarketRoleListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MARKETGOODSLIST:
                        {
                            result = ProcessSpriteMarketGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_MARKETBUYGOODS:
                        {
                            result = ProcessSpriteMarketBuyGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    /// END BÁN HÀNG TRÊN SHOP

                    case (int)TCPGameServerCmds.CMD_SPR_MODAUTODRINK:
                        {
                            result = ProcessSpriteModAutoDrinkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_PLAYDECO:
                        {
                            result = ProcessSpritePlayDecoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_RUNTOMAP:
                        {
                            result = ProcessSpriteRunToMapCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_SEARCHROLES:
                        {
                            result = ProcessSpriteSearchRolesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_LISTROLES:
                        {
                            result = ProcessSpriteListRolesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_LISTTEAMS:
                        {
                            result = ProcessSpriteListTeamsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_RESETBAG:
                        {
                            result = ProcessSpriteResetBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CHGHORSEBODY:
                        {
                            result = ProcessSpriteChgHorseBodyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_RESETPORTABLEBAG:
                        {
                            result = ProcessSpriteResetPortableBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_RESETJINDANBAG:
                        {
                            result = ProcessSpriteResetJinDanBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETJINDANGOODSLIST:
                        {
                            // TÚI ĐỒ PET
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETDAMONGOODSLIST:
                        {
                           // TÚI ĐÔ FPET
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ZAJINDAN:
                        {
                            result = ProcessSpriteZaJinDanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECWABAO:
                        {
                            result = ProcessSpriteExecWaBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETWABAODATA:
                        {
                            result = ProcessSpriteGetWaBaoDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETHUODONGDATA:
                        {
                            result = ProcessSpriteGetHuoDongDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETWLOGINGIFT:
                        {
                            result = ProcessSpriteGetWLoginGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETLIMITTIMELOGINGIFT:
                        {
                            result = ProcessSpriteGetLimitTimeLoginGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETNEWSTEPGIFT:
                        {
                            result = ProcessSpriteGetNewStepGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETMTIMEGIFT:
                        {
                            result = ProcessSpriteGetMTimeGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETBIGGIFT:
                        {
                            result = ProcessSpriteGetBigGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETSONGLIGIFT:
                        {
                            result = ProcessSpriteGetSongLiGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ENTERFUBEN:
                        {
                            result = ProcessSpriteEnterFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_NOTIFYENTERFUBEN:
                        {
                            result = ProcessSpriteNotifyEnterFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CLIENTHEART:
                        {
                            result = ProcessSpriteClientHeartCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETRANDOMNAME:
                        {
                            result = ProcessGetRandomNameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETFUBENHISTDATA:
                        {
                            result = ProcessGetFuBenHistDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETFUBENBEGININFO:
                        {
                            result = ProcessGetFuBenBeginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_COPYMAPMONSTERSNUM:
                        {
                            result = ProcessGetFuBenMonstersNumCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_FINDMONSTER:
                        {
                            result = ProcessFindMonsterCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_BATCHYINPIAO:
                        {
                            result = ProcessBatchYinPiaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_FORCETOLAOFANG:
                        {
                            result = ProcessForceToLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETROLEDAILYDATA:
                        {
                            result = ProcessGetRoleDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETBOSSINFODICT:
                        {
                            result = ProcessGetBossInfoDictCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETPAIHANGLIST:
                        {
                            result = ProcessGetPaiHangListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_STARTYABIAO:
                        {
                             //ĐÃ XÓA
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ENDYABIAO:
                        {
                          //ĐÃ XÓA
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_TOUBAO:
                        {
                            //ĐÃ XÓA
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_YABIAOTAKEGOODS:
                        {
                                // ĐÃ XÓA
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_FINDBIAOCHE:
                        {
                            result = ProcessSpriteFindBiaoCheCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_ADDHORSELUCKY:
                        {
                            // Update ngựa đã bỏ
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETCHONGZHIJIFEN:
                        {
                            result = ProcessSpriteGetChongZhiJiFenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETINPUT_POINTS_EXCHGINFO:
                        {
                            result = ProcessSpriteGetInputPointsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETWEEKEND_INPUT_DATA:
                        {
                            result = ProcessGetWeekEndIputDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETFUBENHISTLISTDATA:
                        {
                            result = ProcessGetFuBenHistListDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_GETOTHERHORSEDATA:
                        {
                            result = ProcessGetOtherHorseDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                     // START BANG HỘI NHEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
                    case (int)TCPGameServerCmds.CMD_SPR_GETBANGHUILIST:
                        {
                            result = ProcessGetBangHuiListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_CREATEBANGHUI:
                        {
                            result = ProcessCreateBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_QUERYBANGHUIDETAIL:
                        {
                            result = ProcessQueryBangHuiDetailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_UPDATEBANGHUIBULLETIN:
                        {
                            result = ProcessUpdateBangHuiBulletinCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_GETBHMEMBERDATALIST:
                        {
                            result = ProcessGetBHMemberDataListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_UPDATEBHVERIFY:
                        {
                            result = ProcessUpdateBHVerifyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_APPLYTOBHMEMBER:
                        {
                            result = ProcessApplyToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REFUSEAPPLYTOBH:
                        {
                            result = ProcessRefuseApplyToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADDBHMEMBER:
                        {
                            result = ProcessAddBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_AGREETOTOBANGHUI:
                        {
                            result = ProcessAgreeToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REMOVEBHMEMBER:
                        {
                            result = ProcessRemoveBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUITFROMBANGHUI:
                        {
                            result = ProcessQuitFromBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_DESTROYBANGHUI:
                        {
                            result = ProcessDestroyBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_BANGHUIVERIFY:
                        {
                            result = ProcessBangHuiVerifyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHGBHMEMBERZHIWU:
                        {
                            result = ProcessChgBHMemberZhiWuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHGBHMEMBERCHENGHAO:
                        {
                            result = ProcessChgBHMemberChengHaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SEARCHROLESFROMDB:
                        {
                            result = ProcessSearchRolesFromDBCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBANGGONGHIST:
                        {
                            result = ProcessGetBangGongHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_DONATEBGMONEY:
                        {
                            result = ProcessDonateBGMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_DONATEBGGOODS:
                        {
                            result = ProcessDonateBGGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBANGQIINFO:
                        {
                            result = ProcessGetBangQiInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_RENAMEBANGQI:
                        {
                            result = ProcessRenameBangQiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_UPLEVELBANGQI:
                        {
                            result = ProcessUpLevelBangQiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBHLINGDIINFODICTBYBHID:
                        {
                            result = ProcessGetBHLingDiInfoDictByBHIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SETLINGDITAX:
                        {
                            result = ProcessSetLingDiTaxCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TAKELINGDITAXMONEY:
                        {
                            result = ProcessTakeLingDiTaxMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETHUANGDIBHINFO:
                        {
                            result = ProcessGetHuangDiBHInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                   // ENDDDDDDDDDD BANG HỘIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
                    case (int)TCPGameServerCmds.CMD_SPR_OPENYANGGONGBK:
                        {
                            result = ProcessOpenYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REFRESHYANGGONGBK:
                        {
                            result = ProcessRefreshYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CLICKYANGGONGBK:
                        {
                            result = ProcessClickYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REFRESHQIZHENGE:
                        {
                            result = ProcessRefreshQiZhenGeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QIZHEGEBUY:
                        {
                            result = ProcessQiZhenGeBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYQIZHEGEBUYHIST:
                        {
                            result = ProcessQueryQiZhenGeBuyHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUICKJINGMAI:
                        {
                            // Kinh Mạch Xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUICKHORSEENCHANCE:
                        {
                            // Update ngựa đã bỏ
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUICKEQUIPENHANCE:
                        {
                            result = ProcessQuickEquipEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUICKEQUIPFORGE:
                        {
                            result = ProcessQuickEquipForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETHUANGDIROLEDATA:
                        {
                           // result = ProcessGetHuangDiDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADDHUANGFEI:
                        {
                            result = ProcessAddHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_AGREEADDHUANGFEI:
                        {
                            result = ProcessAgreeAddHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REMOVEHUANGFEI:
                        {
                            result = ProcessRemoveHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETHUANGFEIDATA:
                        {
                            result = ProcessGetHuangFeiDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_BANCHAT:
                        {
                            result = ProcessBanChatCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SENDTOLAOFANG:
                        {
                            result = ProcessSendToLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TAKEOUTLAOFANG:
                        {
                            result = ProcessTakeOutLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETLINGDIMAPINFO:
                        {
                            result = ProcessGetLingDiMapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETHUANGCHENGMAPINFO:
                        {
                            result = ProcessGetHuangChengMapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TASKTRANSPORT:
                        {
                            result = ProcessTaskTransportCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TASKTRANSPORT2:
                        {
                            result = ProcessTaskTransport2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVITYTRANSPORT:
                        {
                            result = ProcessActivityTransportCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPT_LINGLIGUANZHU:
                        {
                          //  result = ProcessLingLiGuanZhuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETGOODSBYDBID:
                        {
                            result = ProcessGetGoodsByDbIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUICKCOMPLETETASK:
                        {
                            result = ProcessQuickCompleteTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYCHONGZHIMONEY:
                        {
                            result = ProcessQueryChongZhiMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETFIRSTCHONGZHIDALI:
                        {
                            result = ProcessGetFirstChongZhiDaLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETDAYCHONGZHIDALI:
                        {
                            result = ProcessGetDayChongZhiDaLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_COMPLETETINYCLIENT:
                        {
                            result = ProcessCompleteTinyClientCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECWABAOBYYAOSHI:
                        {
                            result = ProcessSpriteExecWaBaoByYaoShiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETUSERMAILLIST:
                        {
                            result = ProcessGetUserMailListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETUSERMAILDATA:
                        {
                            result = ProcessGetUserMailDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SENDUSERMAIL:
                        {
                            result = ProcessSpriteSendUserMailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHMAILGOODS:
                        {
                            result = ProcessFetchMailGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_BATCHFETCHMAILGOODS:
                        {
                            result = ProcessBatchFetchMailGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_DELETEUSERMAIL:
                        {
                            result = ProcessDeleteUserMailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETMAILSENDCODE:
                        {
                            result = ProcessSpriteGetMailSendCodeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_QUERYINPUTFANLI:
                        {
                            result = ProcessSprQueryInputFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYINPUTJIASONG:
                        {
                            result = ProcessSprQueryInputJiaSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYINPUTKING:
                        {
                            result = ProcessSprQueryInputKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYLEVELKING:
                        {
                            result = ProcessSprQueryLevelKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYEQUIPKING:
                        {
                            result = ProcessSprQueryEquipKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHORSEKING:
                        {
                            result = ProcessSprQueryHorseKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJINGMAIKING:
                        {
                            result = ProcessSprQueryJingMaiKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYAWARDHIST:
                        {
                            result = ProcessSprQueryAwardHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHACTIVITYAWARD:
                        {
                            result = ProcessSprFetchActivityAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MALLZHENQIBUY:
                        {
                            result = ProcessSpriteMallZhenQiBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_USEVIPDAILYPRIORITY:
                        {
                            result = ProcessSpriteUseVipDailyPriorityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_VIPDAILYDATA:
                        {
                            result = ProcessSpriteQueryVipDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_YANGGONGBKDAILYDATA:
                        {
                            result = ProcessSpriteQueryYangGongBKDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHYANGGONGBKJIFENAWARD:
                        {
                            result = ProcessSpriteFetchYangGongBKJiFenAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSHILIANTAAWARDINFO:
                        {
                            result = ProcessSpriteQueryShiLianTaAwardDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHSHILIANTAAWARD:
                        {
                            result = ProcessSpriteFetchShiLianTaAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADDSHENGXIAOMORTGAGE:
                        {
                            result = ProcessSpriteAddShengXiaoMortgageCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYROLESHENGXIAOGUESSLIST:
                        {
                            result = ProcessSpriteQuerySelfShengXiaoGuessListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSHENGXIAOGUESSHISTORY:
                        {
                            result = ProcessQueryShengXiaoGuessHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSHENGXIAOGUESSSELFHISTORY:
                        {
                            result = ProcessQueryShengXiaoGuessHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSHENGXIAORECENTRESULTLIST:
                        {
                            result = ProcessQueryShengXiaoGuessRecentResultListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_UPDATETENGXUNFCMRATE:
                        {
                            result = ProcessUpdateTengXunFcmRateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXTGRIDBYYUANBAO:
                        {
                            result = ProcessExtGridByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SUBMONEY:
                        {
                            result = ProcessSpriteRequestSubMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXTBAGNUMBYYUANBAO:
                        {
                            result = ProcessExtBagNumByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXCUTENPCLUATALK:
                        {
                            result = ProcessExcuteNpcLuaTalkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXCUTENPCLUAFUNCTION:
                        {
                            result = ProcessExcuteNpcLuaFunctionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TAKELINGDIDAILYAWARD:
                        {
                            if (GameManager.OPT_ChengZhanType == 0)
                            {
                                result = ProcessTakeLingDiDailyAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            }
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHENGJIUDATA:
                        {
                            result = ProcessQueryChengJiuDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHCHENGJIUAWARD:
                        {
                            result = ProcessFetchChengJiuAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MENDEQUIPMENT:
                        {
                            result = ProcessSprMendEquipmentCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPFENJIE:
                        {
                            result = ProcessSprEquipFenJieCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_JINGYUANEXCHANGE:
                        {
                            result = ProcessSprJingYuanExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_HUIZHANGEXCHANGE:
                        {
                            result = ProcessSprHuiZhangExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATNEXTLEVELJINGMAI:
                        {
                            result = ProcessSprActivateNextLevelJingMaiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHVIPONCEAWARD:
                        {
                            result = ProcessFetchVipOnceAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATNEXTLEVELWUXUE:
                        {
                            result = ProcessSprActivateNextLevelWuXueCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    //废弃的采集命令
                    //case (int)TCPGameServerCmds.CMD_SPR_CAIJI:
                    //    {
                    //        result = ProcessSprCaiJiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                    //        break;
                    //    }

                    case (int)TCPGameServerCmds.CMD_SPR_CAIJI_START:
                        {
                            result = ProcessSprCaiJiStartCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CAIJI_FINISH:
                        {
                            result = ProcessSprCaiJiFinishCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CAIJI_LASTNUM:
                        {
                            result = ProcessSprCaiJiLastNumCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_RUNTASKPLOTLUA:
                        {
                            result = ProcessSprRunTaskPlotLuaCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TRANSFERSOMETHING:
                        {
                            result = ProcessSprTransferSomethingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHMALLDATA:
                        {
                            result = ProcessSprFetchMallDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FACTIVITIESDATA:
                        {
                            result = ProcessSprFetchActivitiesDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MALLQIANGGOUBUYGOODS:
                        {
                            result = ProcessSpriteMallQiangGouBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHZUANHUANGAWARD:
                        {
                            result = ProcessSpriteFetchZuanHuangAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SETSYSTEMOPENPARAMS:
                        {
                            result = ProcessSpriteSystemOpenParamsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ENTERTASKFUBEN:
                        {
                            result = ProcessSpriteEnterTaskFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETTASKAWARDS:
                        {
                            result = ProcessSpriteGetTaskAwardsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_NOTIFYGETGOODSPACK:
                        {
                            result = ProcessSpriteNotifyGetGoodsPackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYZAJINDANHISTORY:
                        {
                            result = ProcessQueryZaJinDanHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSELFZAJINDANHISTORY:
                        {
                            result = ProcessQueryZaJinDanHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETTO60AWARD:
                        {
                            result = ProcessGetTo60AwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETKAIFUONLINEINFO:
                        {
                            result = ProcessGetKaiFuOnlineInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETJIERIXMLDATA:
                        {
                            result = ProcessGetJieriXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SPECIALACTIVITY_GETXMLDATA:
                        {
                            result = ProcessGetSpecialActXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SPECIALACTIVITY_QUERY:
                        {
                            result = ProcessGetSpecActDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SPECIALACTIVITY_FETCHAWARD:
                        {
                            result = ProcessFetchSpecActAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERIDALIBAO:
                        {
                            result = ProcessQueryJieriDaLiBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERIDENGLU:
                        {
                            result = ProcessQueryJieriDengLuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERIVIP:
                        {
                            result = ProcessQueryJieriVIPCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERICZSONG:
                        {
                            result = ProcessQueryJieriCZSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERICZLEIJI:
                        {
                            result = ProcessQueryJieriCZLeiJiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERITOTALCONSUME:
                        {
                            result = ProcessQueryJieriTotalConsumeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERIZIKA:
                        {
                            result = ProcessQueryJieriCZZiKaCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERIXIAOFEIKING:
                        {
                            result = ProcessQueryJieriXiaoFeiKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYJIERICZKING:
                        {
                            result = ProcessQueryJieriCZKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_YUANBAOCOMPLETETASK:
                        {
                            result = ProcessQueryYuanBaoCompleteTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUDALIBAO:
                        {
                            result = ProcessQueryHeFuDaLiBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUVIP:
                        {
                            result = ProcessQueryHeFuVIPCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUCZSONG:
                        {
                            result = ProcessQueryHeFuCZSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUPKKING:
                        {
                            result = ProcessQueryHeFuPKKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUWCKING:
                        {
                            result = ProcessQueryHeFuWCKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYHEFUFANLI:
                        {
                            result = ProcessQueryHeFuCZFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYXINFANLI:
                        {
                            result = ProcessQueryXinCZFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ONEKEYQUICKSALEOUT:
                        {
                            result = ProcessOneKeyQuickSaleOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATNEXTLEVELZHANHUN:
                        {
                            result = ProcessSprActivateNextLevelZhanHunCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATNEXTLEVELRONGYU:
                        {
                            result = ProcessSprActivateNextLevelRongYuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATRONGYUBUFFER:
                        {
                            result = ProcessSprActivateRongYuBufferCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_LIANLUJINGLIAN:
                        {
                           // result = ProcessSprLianLuJingLianCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ZJDJIFEN:
                        {
                            result = ProcessSprZJDJiFenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FETCHZJDJIFENAWARD:
                        {
                            result = ProcessSprFetchZJDJiFenAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYACTIVITYINFO:
                        {
                            result = ProcessSprQueryActivityInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_XINGYUNCHOUJIANG:
                        {
                            result = ProcessSprXingYunChouJiangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYYUEDUCHOUJIANGHISTORY:
                        {
                            result = ProcessQueryYueDuChouJiangHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSELFQUERYYUEDUCHOUJIANGHISTORY:
                        {
                            result = ProcessQueryYueDuChouJiangHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTEYUEDUCHOUJIANG:
                        {
                            result = ProcessSpriteExecuteCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYYUEDUCHOUJIANGINFO:
                        {
                            result = ProcessQueryYueDuChouJiangInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTEHUNQIEXCHANGE:
                        {
                            result = ProcessExecuteHunQiExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTECHANGEOCCUPATION:
                        {
                            //result = ProcessExecuteChangeOccupationCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTECHANGELIFE:
                        {
                            result = ProcessExecuteChangeLifeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETROLEUSINGGOODSDATALIST:
                        {
                            result = ProcessGetUsingGoodsDataListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTEPROPADDPOINT:
                        {
                            result = ProcessExecutePropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTERECOMMENDPROPADDPOINT:
                        {
                            result = ProcessExecuteRecommendPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTERECLEANPROPADDPOINT:
                        {
                            result = ProcessExecuteCleanPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYCLEANPROPADDPOINT:
                        {
                            result = ProcessQueryCleanPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FUBENCLEANOUT:
                        {
                            result = ProcessExecuteFuBenCleanOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYFUBENINFO:
                        {
                            result = ProcessQueryFuBenInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ATTACK2:
                        {
                            result = ProcessSpriteAttack2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_COMPLETEFLASHSCENE:
                        {
                            result = ProcessSpriteCompleteFlashSceneCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REFURBISHTASKSTARLEVEL:
                        {
                            result = ProcessSpriteRefurbishTaskStarLevelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_COMPLETEDAILYCIRCLETASKFORONCECLICK:
                        {
                            result = ProcessSpriteCompleteDailyCircleTaskForOnceClickCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADMIREDPLAYER:
                        {
                           // result = ProcessSpriteAdmiredPlayerCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYBLOODCASTLEINFO:
                        {
                            result = ProcessSpriteQueryBloodCastleInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPAPPENDPROP:
                        {
                            result = ProcessSpriteEquipAppendPropCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYCAMPBATTLEINFO:
                        {
                            result = ProcessSpriteQueryCampBattleInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYDAIMONSQUAREINFO:
                        {
                            result = ProcessSpriteQueryDaimoSquareInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_UPDATEEVERYDAYONLINEAWARDGIFTINFO:
                        {
                            result = ProcessSpriteUpdateEverydayOnlineAwardGiftInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETEVERYDAYONLINEAWARDGIFT:
                        {
                            result = ProcessSpriteGetEveryDayOnLineAwardGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_UPDATEEVERYDAYSERIESLOGININFO:
                        {
                            result = ProcessSpriteUpdateEverydaySeriesLoginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETEVERYDAYSERIESLOGINAWARDGIFT:
                        {
                            result = ProcessSpriteGetSeriesLoginAwardGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_UPDATEGETTHINGSFLAG:
                        {
                            result = ProcessSpriteUpdateGetThingsFlagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXCHANGEMOJINGANDQIFU:
                        {
                            result = ProcessSpriteExchangeMoJingAndQiFuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_STARTMEDITATE: //开始冥想
                        {
                            result = ProcessSpriteStartMeditateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETMEDITATEEXP:
                        {
                            result = ProcessSpriteGetMeditateExpCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETMEDITATETIMEINFO:
                        {
                            result = ProcessSpriteGetMeditateTimeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYTOTALLOGININFO:
                        {
                            result = ProcessSpriteQueryTotalLoginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETTOTALLOGINAWARD:
                        {
                            result = ProcessSpriteGetTotalLoginAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHANGELIFEFOREQUIP:
                        {
                            result = ProcessChangeLifeForEquipCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLAKEOFFCHANGELIFEFOREQUIP:
                        {
                            result = ProcessFlakeOffChangeLifeForEquipCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ONEKEYFINDFRIEND:
                        {
                            result = ProcessOneKeyFindFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ONEKEYADDFRIEND:
                        {
                            result = ProcessOneKeyAddFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETVIPAWARD:
                        {
                            result = ProcessGetVIPAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_DAILYACTIVEDATA:
                        {
                            result = ProcessDailyActiveDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETDAILYACTIVEAWARD:
                        {
                            result = ProcessFetchDailyActiveAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SETAUTOASSIGNPROPERTYPOINT:
                        {
                            result = ProcessSetAutoAssignPropertyPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBLOODCASTLEAWARD:
                        {
                            result = ProcessGetBloodCastleAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETDAIMONSQUAREAWARD:
                        {
                            result = ProcessGetDaimonsquareAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETCOPYMAPAWARD:
                        {
                            result = ProcessGetCopyMapAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_KAIFUACTIVITYINFO:
                        {
                            result = ProcessGetKaiFuActivityInfoInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETTHEKINGOFPKINFO:
                        {
                            result = ProcessSpriteQueryTheKingOfPKInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ANGELTEMPLESPARK:
                        {
                            result = ProcessAngelTempleSparkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETANGELTEMPLEBASEINFO:
                        {
                            result = ProcessGetAngelTempleBaseInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYADRATIONPKKINGINFO:
                        {
                            result = ProcessQueryAdrationPKKingInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADRATIONPKKING:
                        {
                            result = ProcessAdrationPKKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETVIPINFO:
                        {
                            result = ProcessGetVIPInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETVIPLEVELAWARD:
                        {
                            result = ProcessGetVIPLevelAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYOPENGRIDTICK:
                        {
                            result = ProcessQueryOpenGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYOPENPORTABLEGRIDTICK:
                        {
                            result = ProcessQueryOpenPortableGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBAITANLOG:
                        {
                            result = TCPCmdDispatcher.getInstance().transmission(socket, nID, data, count);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETPUSHMESSAGEINFO:
                        {
                            result = ProcessGetPushMessageInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACTIVATIONPICTUREJUDGE:
                        {
                            result = ProcessActivationPictureJudgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETNPICTUREJUDGEINFO:
                        {
                            result = ProcessGetPictureJudgeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MUEQUIPUPGRADE:
                        {
                            result = ProcessMuEquipUpgradeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHECK:
                        {
                            result = PorcessMUCheck(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXPERIENCECOPYMAPINFO:
                        {
                            result = PorcessExperienceCopymapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REFERPICTUREJUDGE:
                        {
                           // Đã xử lý
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETMOJINGEXCHANGEINFO:
                        {
                            result = PorcessMoJingExchangeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EQUIPAPPENDINHERIT:
                        {
                            //result = ProcessSpriteEquipAppendPropInheritCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_COPYTEAMDAMAGEINFO:
                        {
                            result = ProcessSpriteQueryCopyTeamDamageInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYNEWZONEACTIVE:
                        {
                            result = NewZoneActiveManager.ProcessGetActiveInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETNEWZONEACTIVEAWARD:
                        {
                            result = NewZoneActiveManager.ProcessGetActiveAwards(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYUPLEVELMADMAN:
                        {
                            result = NewZoneActiveManager.ProcessQueryLevelUpMadmanCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYUPLEVELGIFTINFO:
                        {
                            result = HuodongCachingMgr.ProcessQueryUpLevelGiftFlagList(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETUPLEVELGIFTAWARD:
                        {
                            result = HuodongCachingMgr.ProcessGetUpLevelGiftAward(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_REPAYACTIVEINFO:
                        {
                            result = RechargeRepayActiveMgr.QueryRechargeRepayActive(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_REPAYACTIVEAWARD:
                        {
                            result = RechargeRepayActiveMgr.ProcessGetRepayAwardCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_ALLREPAYACTIVEINFO:
                        {
                            result = RechargeRepayActiveMgr.QueryAllRechargeRepayActiveInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYACTIVITYSOMEINFO:
                        {
                            result = ProcessSpriteQueryActivitySomeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ENDBOSSANIMATION:
                        {
                            result = PorcessEndBossAnimationCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_TODAYCANDOINFO:
                        {
                            result = TodayCandoManager.ProcessQueryTodayCandoInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_OLDRESOURCE:
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_GETOLDRESINFO:
                        {
                            result = CGetOldResourceManager.ProcessOldResourceCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYIMPETRATEINFO:
                        {
                            result = ProcessQueryImpetrateInfoCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTEIMPETRATE:
                        {
                            result = ProcessExcuteImpetrateCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYSTARCONSTELLATIONINFO:
                        {
                            result = ProcessQueryStarConstellationCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXECUTEACTIVATIONSTARCONSTELLATION:
                        {
                            result = ProcessExcuteActivationStarConstellationCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETSHAREAWARD:
                    case (int)TCPGameServerCmds.CMD_SPR_GETSHARESTATE:
                    case (int)TCPGameServerCmds.CMD_SPR_UPDATESHARESTATE:
                        {
                            result = ShareManager.ProcessShareCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETFIRSTCHARGEINFO:
                        {
                            result = Global.ProcessGetFirstChargeInfoCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                        }
                        break;
                    case (int)TCPGameServerCmds.CMD_SPR_SPECIALMACHINE:
                        {
                            result = ProcessQuerySpecialMachineCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EXTRADATA:
                        {
                            result = ProcessExtraDataCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_NOTIFY_TIME_STATE:
                        {
                            result = ProcessGetSceneTimeStateInfoCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBANGHUIFUBEN:
                        {
                            result = ProcessGetBangHuiFuBenCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETBANGHUIFUBENAWARD:
                        {
                            result = ProcessGetBangHuiFuBenAwardCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    //申请元素数据
                    case (int)TCPGameServerCmds.CMD_SPR_GET_ELEMENTHRT_SLIST:
                    case (int)TCPGameServerCmds.CMD_SPR_GET_USINGELEMENTHRT_SLIST:
                        {
                            result = ElementhrtsManager.ProcessGetElementHrtList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
#if 移植
                    case 727:
                        {
                            result = ElementhrtsManager.ProcessElementLan(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
#endif
                    //获取时装数据
                    case (int)TCPGameServerCmds.CMD_SPR_GET_FASHION_SLIST:
                        {
                            // THỜI TRANG ĐÃ XÓA
                            break;
                        }
                    //申请获取猎取元素相关信息,
                    case (int)TCPGameServerCmds.CMD_SPR_GET_ELEMENTHRTS_INFO:
                        {
                            result = ElementhrtsManager.ProcessGetElementHrtsInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    //佩戴/卸下元素之心
                    case (int)TCPGameServerCmds.CMD_SPR_USE_ELEMENTHRT:
                        {
                            result = ElementhrtsManager.ProcessUseElementHrt(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    //执行猎取操作
                    case (int)TCPGameServerCmds.CMD_SPR_GET_SOMEELEMENTHRTS:
                        {
                            result = ElementhrtsManager.ProcessGetSomeElementHrts(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    //强化元素之心
                    case (int)TCPGameServerCmds.CMD_SPR_POWER_ELEMENTHRT:
                        {
                            result = ElementhrtsManager.ProcessPowerElementHrt(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 整理元素背包
                    case (int)TCPGameServerCmds.CMD_SPR_RESET_EHRTSBAG:
                        {
                            result = ElementhrtsManager.ProcessResetElementHrtBag(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 申请举办庆功宴
                    case (int)TCPGameServerCmds.CMD_SPR_HOLD_QINGGONGYAN:
                        {
                            result = GameManager.QingGongYanMgr.ProcessHoldQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 申请庆功宴信息
                    case (int)TCPGameServerCmds.CMD_SPR_GET_QINGGONGYAN:
                        {
                            result = GameManager.QingGongYanMgr.ProcessQueryQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 申请参加庆功宴
                    case (int)TCPGameServerCmds.CMD_SPR_JOIN_QINGGONGYAN:
                        {
                            result = GameManager.QingGongYanMgr.ProcessJoinQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 申请当前是否庆功宴已经开启了
                    case (int)TCPGameServerCmds.CMD_SPR_IFQINGGONGYANOPEN:
                        {
                            result = GameManager.QingGongYanMgr.ProcessCMD_SPR_QueryQingGongYanOpenCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                 
                    case (int)TCPGameServerCmds.CMD_SPR_FAZHEN_BOSS:
                        {
                            result = LuoLanFaZhenCopySceneManager.ProcessFazhenBossCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    // 请求罗兰法阵的传送门信息
                    case (int)TCPGameServerCmds.CMD_MAP_TELEPORT:
                        {
                            result = LuoLanFaZhenCopySceneManager.ProcessFazhenTeleportCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_STORE_YINLIANG:
                        {
                            result = ProcessGetStoreYinLiang(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_STORE_MONEY:
                        {
                            result = ProcessGetStoreMoney(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_LINGYU_LIST:
                        {
                           // LIÊN quan tới cánh
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADVANCE_LINGYU_LEVEL:
                        {
                            // Liên quan tưới cánh
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADVANCE_LINGYU_SUIT:
                        {
                           // Liên quan tới cánh
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACHIEVEMENT_RUNE_INFO:
                        {
                            result = ProcessGetAchievementRuneInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETJIERIFANBEI_INFO:
                        {
                            result = ProcessGetJieRiFanBeiInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ACHIEVEMENT_RUNE_UP:
                        {
                            result = ProcessUpAchievementRune(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_WING_ZHULING:
                        {
                            // Liên quan tới hê thống cánh đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_WING_ZHUHUN:
                        {
                            // Liên quan tới hệ thống cánh đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_REGION_EVENT:
                        {
                            result = ProcessRegionEventCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ARTIFACT_UP:
                        {
                            result = ProcessUpArtifact(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GETLUOLANCHENGZHU:
                        {
                            result = ProcessSpriteQueryLuoLanChengZhuInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERYADRATIONLANCHENGZHUO:
                        {
                            result = ProcessQueryAdrationLanChengZhuInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_ADRATIONLANCHENGZHU:
                        {
                            result = ProcessAdrationLanChengZhuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_YUEKA_DATA:
                        {
                            result = YueKaManager.ProcessGetYueKaData(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_YUEKA_AWARD:
                        {
                            result = YueKaManager.ProcessGetYueKaAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SECOND_PASSWORD_CHECK_STATE:
                        {
                            result = SecondPasswordManager.ProcessUsrCheckState(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SECOND_PASSWORD_VERIFY:
                        {
                            result = SecondPasswordManager.ProcessUsrVerify(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SECOND_PASSWORD_SET:
                        {
                            result = SecondPasswordManager.ProcessSetSecPwd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SECOND_PASSWORD_CANCEL:
                        {
                            result = SecondPasswordManager.ProcClrSecPwd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_PARTY_QUERY:
                        {
                           // PACKKET LIÊN QUAN TƯƠI CƯỚI
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_PARTY_CREATE:
                        {
                           // PAKCET LIÊN QUAN TỚI
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_PARTY_CANCEL:
                        {
                          // PACKET LIÊN QUAN TỚI CƯỚI
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_PARTY_JOIN:
                        {
                           // PACKET LILEEN QUAN TỚI CƯỚI
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_INIT:
                        {
                            // LIÊN QUAN TỚI CƯỚI
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_REPLY:
                        {
                            // Liên quan tới cưới
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_DIVORCE:
                        {
                           // Liên quan tới cưới
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MARRY_AUTO_REJECT:
                        {
                           // Liên quan tới cưới
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_DB_EXECUXJIERIFANLI:
                        {
                            result = ProcessQueryJieriFanLiActivityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_JIERI_GIVE_INFO:
                        {
                            result = ProcessQueryRoleJieriGiveInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_JIERI_GIVE_TO_OTHER:
                        {
                            result = ProcessRoleJieriGiveToOther(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_JIERI_GIVE_AWARD:
                        {
                            result = ProcessRoleGetJieriGiveAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_JIERI_RECV_INFO:
                        {
                            result = ProcessQueryRoleJieriRecvInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_JIERI_RECV_AWARD:
                        {
                            result = ProcessRoleGetJieriRecvAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_JIERI_GIVE_KING_INFO:
                        {
                            result = ProcessQueryJieriGiveKingInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_JIERI_GIVE_KING_AWARD:
                        {
                            result = ProcessGetJieriGiveKingAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_JIERI_RECV_KING_INFO:
                        {
                            result = ProcessQueryJieriRecvKingInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_JIERI_RECV_KING_AWARD:
                        {
                            result = ProcessGetJieriRecvKingAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_TASKLIST_DATA:
                    case (int)TCPGameServerCmds.CMD_SPR_TASKLIST_NOTIFY:
                        {
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GE:
                        {
                            //result = RobotTaskValidator.getInstance().ProcessGeniusList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_GUARD_POINT_RECOVER:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GUARD_POINT_RECOVER:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_GUARD_STATUE_INFO:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GUARD_STATUE_LEVEL_UP:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_EFFECT_HIDE_FLAGS:
                        {
                            result = ProcessSpriteEffectHideFlagsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GUARD_STATUE_SUIT_UP:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MOD_GUARD_SOUL_EQUIP:
                        {
                            // LINH HỒN
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_LIANXU_CHARGE_INFO:
                        {
                            result = ProcessQueryJieriLianXuChargeInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_GET_LIANXU_CHARGE_AWARD:
                        {
                            result = ProcessGetJieriLianXuChargeAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHANGE_NAME:
                        {
                            result = NameManager.Instance().ProcessChangeName(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_CHANGE_BANGHUI_NAME:
                        {
                            result = NameManager.Instance().ProcessChangeBangHuiName(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_QUERY: // 查询梅林魔法书信息 [XSea 2015/6/23]
                        {
                           // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_STAR_UP: // 客户端请求梅林魔法书升星 [XSea 2015/6/23]
                        {
                            // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_LEVEL_UP: // 客户端请求梅林魔法书升阶 [XSea 2015/6/24]
                        {
                            // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_SECRET_ATTR_UPDATE: // 客户端请求擦拭梅林魔法书秘语 [XSea 2015/6/25]
                        {
                            // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_SECRET_ATTR_REPLACE: // 客户端请求替换梅林魔法书秘语 [XSea 2015/6/25]
                        {
                            // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_MERLIN_SECRET_ATTR_NOT_REPLACE: // 客户端请求放弃替换梅林魔法书秘语 [XSea 2015/6/25]
                        {
                            // Liên quan tới hệ thống sách Merlin đã xóa
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_QUERY_JIERI_PLAT_CHARGE_KING: // 查询节日平台充值王
                        {
                            result = ActivityManagerNew.Instance().HandleClientQueryPlatChargeKing(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_RESET_BAG: // 客户端请求整理荧光宝石背包 [XSea 2015/8/11]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessResetBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_DIG: // 客户端请求挖掘荧光宝石 [XSea 2015/8/11]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessFluorescentGemDig(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_RESOLVE: // 客户端请求分解荧光宝石 [XSea 2015/8/11]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessFluorescentGemResolve(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_LEVEL_UP: // 客户端请求升级荧光宝石 [XSea 2015/8/12]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessFluorescentGemUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_EQUIP: // 客户端请求装备荧光宝石 [XSea 2015/8/12]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessFluorescentGemEquip(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_FLUORESCENT_GEM_UN_EQUIP: // 客户端请求卸下荧光宝石 [XSea 2015/8/12]
                        {
                            result = GameManager.FluorescentGemMgr.ProcessFluorescentGemUnEquip(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_SET_FUNCTION_OPEN:
                        {
                            result = ProcessSetFunctionOpen(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case (int)TCPGameServerCmds.CMD_SPR_VIDEO_OPEN:
                        {
                            result = VideoLogic.ProcessOpenVideoCmd(socket, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int)TCPGameServerCmds.CMD_KT_GET_NEWBIE_VILLAGES:
                        {
                            result = TCPCmdHandler.PrecessGetNewbieVillages(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_ROLE_ATRIBUTES:
                        {
                            result = KT_TCPHandler.GetRoleAttributes(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_CLICKON_NPC:
                        {
                            result = KT_TCPHandler.ProcessClickOnNPC(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_NPCDIALOG:
                        {
                            result = KT_TCPHandler.ResponseNPCDialog(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_ITEMDIALOG:
                        {
                            result = KT_TCPHandler.ResponseItemDialog(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_CHANGEACTION:
                        {
                            result = KT_TCPHandler.ResponseSpriteChangeAction(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_SKILL_ADDPOINT:
                        {
                            result = KT_TCPHandler.ResponseDistributeSkillPoints(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_SET_SKILL_TO_QUICKKEY:
                        {
                            result = KT_TCPHandler.ResponseSetQuickKey(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_SET_AND_ACTIVATE_AURA:
                        {
                            result = KT_TCPHandler.ResponseSetAndActivateAura(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_USESKILL:
                        {
                            result = KT_TCPHandler.ResponseUseSkill(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_GM_COMMAND:
                        {
                            result = KT_TCPHandler.ResponseGMCommand(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_CLIENTREVIVE:
                        {
                            result = KT_TCPHandler.ResponseClientRevive(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_SAVESYSTEMSETTINGS:
                        {
                            result = KT_TCPHandler.ResponseSaveSystemSettings(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_C2G_SAVEAUTOSETTINGS:
                        {
                            result = KT_TCPHandler.ResponseSaveAutoSettings(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_INVITETOTEAM:
                        {
                            result = KT_TCPHandler.ResponseInviteTeammate(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_CREATETEAM:
                        {
                            result = KT_TCPHandler.ResponseCreateTeam(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_AGREEJOINTEAM:
                        {
                            result = KT_TCPHandler.ResponseAgreeJoinTeam(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_REFUSEJOINTEAM:
                        {
                            result = KT_TCPHandler.ResponseRefuseJoinTeam(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_GETTEAMINFO:
                        {
                            result = KT_TCPHandler.ResponseGetTeamInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_KICKOUTTEAMMATE:
                        {
                            result = KT_TCPHandler.ResponseKickOutTeammate(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_LEAVETEAM:
                        {
                            result = KT_TCPHandler.ResponseLeaveTeam(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_APPROVETEAMLEADER:
                        {
                            result = KT_TCPHandler.ResponseApproveTeamLeader(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    case (int)TCPGameServerCmds.CMD_KT_ASKTOJOINTEAM:
                        {
                            result = KT_TCPHandler.ResponseAskToJoinTeam(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }

                    case (int) TCPGameServerCmds.CMD_KT_TESTPACKET:
                    {
                        result = KT_TCPHandler.ResponseCMDTestFromClient(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                        break;
                    }


#if 移植
                    case 784:
                        {
                            result = TCPCmdHandlerMy.ProcessFightingInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }
                    case 1840:
                        {
                            result = TCPCmdHandlerMy.ProcessTitleShowCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
                        }


                    default:
                        {
                            result = TCPCmdHandlerMy.ProcessGETATTRIBALL(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
                            break;
#else

                    default:
                        {

#endif
                            LogManager.WriteLog(LogTypes.Error, string.Format("未注册指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                            if (GameManager.FlagAlowUnRegistedCmd)
                            {
                                result = TCPProcessCmdResults.RESULT_OK;
                            }
                            else
                            {
                                result = TCPProcessCmdResults.RESULT_FAILED;
                            }
                            break;
                        }
                }
            }

            #endregion 指令处理
            /// 总共处理的指令个数
            TotalHandledCmdsNum++;

            //测试用
            long nowTicks = TimeUtil.NOW();
            long usedTicks = nowTicks - startTicks;
            //System.Diagnostics.Debug.WriteLine("ProcessCmd: {0}, ticks: {1}", (TCPGameServerCmds)nID, usedTicks);
            if (usedTicks > 0)
            {
                //LogManager.WriteLog(LogTypes.Error, string.Format("指令处理时间, CMD={0}, Client={1}, Ticks={2}",
                //(TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), nowTicks - startTicks));

                if (usedTicks > MaxUsedTicksByCmdID)
                {
                    MaxUsedTicksCmdID = nID;
                    MaxUsedTicksByCmdID = usedTicks;
                }
            }

            //删除统计
            lock (HandlingCmdDict)
            {
                HandlingCmdDict.Remove(socket);
            }

            //Thread.Sleep((int)Global.GetRandomNumber(100, 250)); ///模拟卡顿的操作

            return result;
        }

        /// <summary>
        /// 处理用户登录的验证操作(替代用户登录服务器)
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUserLogin2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                //if (fields.Length != 7 && fields.Length != 6)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                if (fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int verSign = 0;
                string userID = fields[1];
                string userName = fields[2];
                string lastTime = fields[3];
                string isadult = fields[4];
                string signCode = fields[5].ToLower();

                if (!int.TryParse(fields[0], out verSign))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("ProcessUserLogin2Cmd, verSign={0} userID={1}", fields[0], userID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //string hid = "";
                //if (fields.Length == 7)
                //{
                //    hid = fields[6];
                //}

                string key = WebKey;
                key = "9377(*)#mst9";
                //验证输入的信息是否有效
                string strVal = userID + userName + lastTime + isadult + key;
                string strMD5 = MD5Helper.get_md5_string(strVal).ToLower();
                if (strMD5 != signCode) //数据非法
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("验证指令数据完整性时错误, CMD={0}, Client={1}, UserID={2}, IsAdult={3}, LastTime={4}, SignCode={5}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), userID, isadult, lastTime, signCode));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //验证失败可能：Token被GM封了、没有跨服登录权限、服务器不允许非跨服登录
                if (!KuaFuManager.getInstance().OnUserLogin2(socket, verSign, userID, userName, lastTime, isadult, signCode))
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}:{3}", StdErrorCode.Error_Connection_Disabled, "", "", ""), (int)TCPGameServerCmds.CMD_LOGIN_ON2);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string strcmd = "";
                string clientIPPort = Global.GetSocketRemoteEndPoint(socket);
                if (clientIPPort.IndexOf("127.0.0.1") < 0 && GameManager.GM_NoCheckTokenTimeRemainMS <= 0) //如果不是本地连接就要严格检查时间了
                {
                    //验证用户登陆的时间是否超时
                    int oldLastTime = Convert.ToInt32(lastTime);
                    int nowSecs = DataHelper.UnixSecondsNow();

                    if (nowSecs - oldLastTime >= (60 * 60 * 24))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", StdErrorCode.Error_Token_Expired, "", "", "");
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON2);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                if (verSign != (int)TCPCmdProtocolVer.VerSign)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", StdErrorCode.Error_Version_Not_Match, "", "", "");
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON2);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                UserLoginToken ult = new UserLoginToken()
                {
                    UserID = userID,
                    RandomPwd = tcpRandKey.GetKey()
                };
                string userToken = ult.GetEncryptString(KeySHA1, KeyData);
                strcmd = string.Format("{0}:{1}:{2}:{3}", userID, userName, userToken, isadult);

                //LogManager.WriteLog(LogTypes.Robot, string.Format("hid = ", userID, hid));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON2);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Thực hiện Cho USER LOGIN
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUserLoginCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) 
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 6 && fields.Length != 12 && fields.Length != 13)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string userID = fields[0];
                string userName = fields[1];
                string userToken = fields[2];
                int roleRandToken = Convert.ToInt32(fields[3]);
                int verSign = Convert.ToInt32(fields[4]);
                int userIsAdult = Convert.ToInt32(fields[5]);

                string strcmd = "";

                /// Đánh dấu có phải GM không
                socket.session.IsGM = KTGMCommandManager.IsGM(socket, Convert.ToInt32(fields[7]));

                socket.session.InUseridWhiteList = Data.InUserWriteList(userID);
                if (!socket.session.IsGM && !Global.CheckAnyForMultipleCondition(socket.session.InIpWhiteList, socket.session.InUseridWhiteList))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if ((tcpMgr.MySocketListener.ConnectedSocketsCount - 1) >= (tcpMgr.MaxConnectedClientLimit + (tcpMgr.MaxConnectedClientLimit / 20))) //要减去自身, 增加20分之一的冗余值
                {
                    if (!socket.session.IsGM)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆后, 判断已经达到线路最大人数限制, 返回失败, CMD={0}, Client={1}, UserID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), userID));

                        //兼容下旧的版本
                        strcmd = string.Format("{0}", StdErrorCode.Error_Server_Connections_Limit);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //通讯协议不匹配
                if (verSign != (int)TCPCmdProtocolVer.VerSign)
                {
                    strcmd = string.Format("{0}", StdErrorCode.Error_Version_Not_Match2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool verified = true;
                int RandPwd = -1;
                UserLoginToken ult = new UserLoginToken();
                int verifyResult = ult.SetEncryptString(userToken, KeySHA1, KeyData, MaxTicks);
                if (verifyResult < 0) //用户口令格式错误或者过期
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("登录时验证token错误, CMD={0}, Client={1}, VerifyResult={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), verifyResult));

                    //if (-1 == roleRandToken || !tcpRandKey.FindKey(roleRandToken)) 此处可能会导致外挂利用，获取到随机key后，利用模拟指令包登录
                    {
                        verified = false;
                    }
                }
                else
                {
                    userID = ult.UserID;
                    RandPwd = ult.RandomPwd;
                    if (!tcpRandKey.FindKey(RandPwd))
                    {
                        verified = false;
                    }
                }

                if (fields.Length >= 12)
                {
                    int roleId = 0;
                    long gameId = 0;
                    int gameType = 0;
                    int serverId = 0;
                    string ip = "";
                    int port = 0;

                    // 带设备号的
                    if (fields.Length == 13)
                    {
                        socket.deviceID = fields[6]; // 设备号
                        roleId = Convert.ToInt32(fields[7]);
                        gameId = Convert.ToInt64(fields[8]);
                        gameType = Convert.ToInt32(fields[9]);
                        serverId = Convert.ToInt32(fields[10]);
                        ip = fields[11];
                        port = Convert.ToInt32(fields[12]);
                    }
                    else
                    {
                        roleId = Convert.ToInt32(fields[6]);
                        gameId = Convert.ToInt64(fields[7]);
                        gameType = Convert.ToInt32(fields[8]);
                        serverId = Convert.ToInt32(fields[9]);
                        ip = fields[10];
                        port = Convert.ToInt32(fields[11]);
                    }

                    string lastTime = DataHelper.UnixSecondsNow().ToString();
                    string strVal = userID + userName + lastTime + userIsAdult + WebKey;
                    string signCode = MD5Helper.get_md5_string(strVal).ToLower();

                    bool result = KuaFuManager.getInstance().OnUserLogin(socket, verSign, userID, userName, lastTime, userToken, userIsAdult.ToString(), signCode, serverId, ip, port, roleId, gameType, gameId);
                    if (!result)
                    {
                        string strResult = string.Format("{0}:{1}:{2}:{3}", StdErrorCode.Error_Redirect_Orignal_Server, "", "", "");
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strResult, (int)TCPGameServerCmds.CMD_LOGIN_ON);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else
                {
                    // 如果1.4.1的功能开放了，但是客户端上传的参数数量不对 则不让登陆
                    if (!GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System1Dot4Dot1))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("ProcessUserLoginCmd , System1Dot4Dot1 Param Error Count =, ", cmdData));
                        strcmd = string.Format("{0}", StdErrorCode.Error_Version_Not_Match2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                if (socket.ServerId == 0)
                {
                    socket.ServerId = GameManager.ServerId;
                }

                //是否已经在线
                bool alreadyOnline = false;

                //如果验证失败
                if (!verified)
                {
                    strcmd = string.Format("{0}", StdErrorCode.Error_Token_Expired);
                }
                else //验证成功
                {
                    //判断是否已经在线
                    if (!GameManager.OnlineUserSession.AddSession(socket, userID))
                    {
                        //已经在线，不再允许登陆
                        strcmd = string.Format("{0}", StdErrorCode.Error_Connection_Closing2);

                        LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 判断用户账号已经在会话中, Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket), userName));

                        //是否已经在线
                        alreadyOnline = true;
                    }
                    else
                    {
                        //和DBServer通讯查询是否在线，如果是，返回错误信息
                        int regUserID = GameDb.RegisterUserIDToDBServer(userID, 1, socket.ServerId, ref socket.session.LastLogoutServerTicks);
                        if (regUserID <= 0)
                        {
                            //已经在线，不再允许登陆
                            strcmd = string.Format("{0}", StdErrorCode.Error_Connection_Closing2);

                            LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 注册账号到DB失败，Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket), userName));

                            //将来修改为通知其他GameServer踢掉此用户的角色。
                            //是否已经在线
                            alreadyOnline = true;
                        }
                        else
                        {
                            //记录用户名称
                            GameManager.OnlineUserSession.AddUserName(socket, userName);

                            //记录用户是否成人标志
                            GameManager.OnlineUserSession.AddUserAdult(socket, userIsAdult);

                            int waitSecs = Global.GetSwitchServerWaitSecs(socket);
                            strcmd = string.Format("{0}:{1}", tcpRandKey.GetKey(), waitSecs);


                        }
                    }
                }

                bool bHasOtherSocket = false;
                //是否已经在线
                if (alreadyOnline)
                {
                    //添加要反注册的用户ID
                    //多余的操作，会导致重复登录的漏洞，录入A冲掉B，B马上登录，A服务器的延迟反注册会清掉B登录的标记。导致A也可以登录
                    //UnregisterUserIDMgr.AddUnRegisterUserID(userID);

                    //根据ID查找敌人
                    TMSKSocket clientSocket = GameManager.OnlineUserSession.FindSocketByUserName(userName);
                    if (null != clientSocket)
                    {
                        bHasOtherSocket = true;
                        if (clientSocket == socket)
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("已登录的用户再次发送登录指令,关闭连接, Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket), userName));
                            return TCPProcessCmdResults.RESULT_FAILED;
                        }

                        KPlayer otherClient = GameManager.ClientMgr.FindClient(clientSocket);
                        if (null == otherClient)
                        {
                            Global.ForceCloseSocket(clientSocket, "被GM踢了, 但是这个socket上没有对应的client");
                        }
                        else
                        {
                            //关闭角色连接
                            Global.ForceCloseClient(otherClient, "被顶掉了");
                        }
                    }
                    else
                    {
                        string gmCmdData = string.Format("-kicku {0} {1} {2}", userName, GameManager.ServerLineID, TimeUtil.NowRealTime());

                        //转发GM消息到DBServer
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                            string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", 0, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineIdAllLineExcludeSelf), //强迫发送到所有线， 包括自己
                            null, socket.ServerId);
                    }

                    LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 判断用户账号已经在线，强迫上次的登录断线..., Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket), userName));
                }

                //SysConOut.WriteLine(string.Format("strcmd={0}", strcmd));

                if (!socket.IsKuaFuLogin)
                {
                    // 非跨服登录CMD_LOGIN_ON的时候，初始化二级密码是否有以及是否需要验证的信息
                    SecPwdState pwdState = SecondPasswordManager.InitUserState(userID, bHasOtherSocket);

                }

                socket.session.SetSocketTime(1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_LOGIN_ON);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Trả về danh sách nhân vật trong tài khoản tương ứng
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetRoleListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                string cmdData = new UTF8Encoding().GetString(data, 0, count);
                string[] fields = cmdData.Split(':');
                if (fields.Length < 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string userID = fields[0];
                int zoneID = Convert.ToInt32(fields[1]);

                //判断是否已经登录验证在线
                if (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，获取角色列表, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                // 如果不被允许直接登陆 那么进行排队判断
                if (!socket.session.IsGM && !GameManager.loginWaitLogic.IsInAllowDict(userID))
                {
                    LoginWaitLogic.UserType userType = GameManager.loginWaitLogic.GetUserType(userID);

                    // 如果已经到达需要排队的人数，则通知客户端进行排队
                    if (GameManager.loginWaitLogic.GetUserCount() >= GameManager.loginWaitLogic.GetConfig(userType, LoginWaitLogic.ConfigType.NeedWaitNum))
                    {
                        if (!GameManager.loginWaitLogic.AddToWait(userID, zoneID, userType, socket))
                        {
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-2:", nID);
                        }
                        else
                        {
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-1:", nID);
                            socket.session.SetSocketTime(5);
                        }

                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                if (!socket.IsKuaFuLogin)
                {
                    ChangeNameInfo info = NameManager.Instance().GetChangeNameInfo(userID, zoneID, socket.ServerId);
                    if (info != null)
                    {
                        tcpMgr.MySocketListener.SendData(socket, DataHelper.ObjectToTCPOutPacket(info, pool, (int)TCPGameServerCmds.CMD_NTF_EACH_ROLE_ALLOW_CHANGE_NAME));
                    }
                }

                socket.session.SetSocketTime(0);
                socket.session.SetSocketTime(2);
                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Lấy danh sách Tân Thủ Thôn
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults PrecessGetNewbieVillages(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                string cmdData = new UTF8Encoding().GetString(data, 0, count);
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /// UserID
                string userID = fields[0];
                /// UserName
                string userName = fields[1];

                if (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                List<int> villages = new List<int>();
                foreach (NewbieVillage village in KTGlobal.NewbieVillages)
                {
                    villages.Add(village.ID);
                }
                string strcmd = string.Join(":", villages);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Xử lý packet tạo nhân vật
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessCreateRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                string cmdData = new UTF8Encoding().GetString(data, 0, count);
                string[] fields = cmdData.Split(':');
                if (fields.Length != 7) // 参数扩展 增加一个魔剑士参数0=力魔，1=智魔  [XSea 2015/4/14]
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /// UserID
                string userID = fields[0];
                /// UserName
                string userName = fields[1];
                /// Giới tính
                int sex = Convert.ToInt32(fields[2]);
                /// ID môn phái
                int factionID = Convert.ToInt32(fields[3]);
                /// Tên và loại thiết bị
                string[] nameAndPlatformID = fields[4].Split('$');
                /// ID máy chủ
                int serverID = Convert.ToInt32(fields[5]);
                /// ID tân thủ thôn
                int villageID = Convert.ToInt32(fields[6]);

                NewbieVillage village = KTGlobal.NewbieVillages.Where(x => x.ID == villageID).FirstOrDefault();
                if (village == null)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Newbie village is not Exist VillageID={3} CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData, villageID));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string positionInfo = string.Format("{0},{1},{2},{3}", villageID, 1, village.Position.X, village.Position.Y);
                cmdData += ":" + positionInfo;
                data = new UTF8Encoding().GetBytes(cmdData);

                /// ID thiết bị
                string deviceID = socket.deviceID;

                
                if (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";
                if (socket.IsKuaFuLogin || sex < 0 || sex > 1 || factionID != 0)
                {
                    strcmd = string.Format("{0}:{1}", StdErrorCode.Error_Operation_Denied, string.Format("{0}${1}${2}${3}${4}${5}", "", "", "", "", "", ""));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string name = nameAndPlatformID[0];
                int ret = NameServerNamager.CheckInvalidCharacters(name);
                if (ret <= 0)
                {
                    strcmd = string.Format("{0}:{1}", ret, string.Format("{0}${1}${2}${3}${4}${5}", "", "", "", "", "", ""));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // add by chenjingui. 20150702。创建角色时，增加一个名字长度判断
                if (!NameManager.Instance().IsNameLengthOK(name))
                {
                    // 长度不满足的话，返回现有的错误码，服务器禁止创建吧
                    strcmd = string.Format("{0}:{1}", (int)NameServerNamager.NameErrorCodes.ErrorServerDisabled, string.Format("{0}${1}${2}${3}${4}${5}", "", "", "", "", "", ""));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //注册名字到NameServer
                ret = NameServerNamager.RegisterNameToNameServer(serverID, userID, nameAndPlatformID, 0, 0);
                if (ret <= 0)
                {
                    strcmd = string.Format("{0}:{1}", ret, string.Format("{0}${1}${2}${3}${4}${5}", "", "", "", "", "", ""));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 玩家创建角色限制检查
                int NotifyLeftTime = 0;
                if (!CreateRoleLimitManager.Instance().IfCanCreateRole(userID, userName, deviceID, ((IPEndPoint)socket.RemoteEndPoint).Address.ToString(), out NotifyLeftTime))
                {
                    strcmd = string.Format("{0}:{1}", -7, NotifyLeftTime);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                if (null != tcpOutPacket)
                {
                    string strCmdResult = null;
                    tcpOutPacket.GetPacketCmdData(out strCmdResult);
                    if (null != strCmdResult)
                    {
                        string[] ResultField = strCmdResult.Split(':'); // 是否成功创建角色
                        if (ResultField.Length == 2 && Global.SafeConvertToInt32(ResultField[0]) == 1)
                        {
                            CreateRoleLimitManager.Instance().ModifyCreateRoleNum(userID, userName, deviceID, ((IPEndPoint)socket.RemoteEndPoint).Address.ToString());
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 恢复预删除用户角色
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUnRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length < 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}",
                        (TCPGameServerCmds)nID, cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string userID = fields[0];
                int roleID = Convert.ToInt32(fields[1]);

                //判断是否已经登录验证在线
                if (roleID < 0 || !GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (socket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }
                else
                {
                    //非跨服登录，检测是否验证二级密码
                    SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
                    if (pwdState != null && pwdState.NeedVerify)
                    {
                        //尚未验证，禁止删除
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 预删除用户角色
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessPreRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length < 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}",
                        (TCPGameServerCmds)nID, cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string userID = fields[0];
                int roleID = Convert.ToInt32(fields[1]);

                //判断是否已经登录验证在线
                if (roleID < 0 || !GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (socket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }
                else
                {
                    //非跨服登录，检测是否验证二级密码
                    SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
                    if (pwdState != null && pwdState.NeedVerify)
                    {
                        //尚未验证，禁止删除
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                

                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);

                //判断是否预删除角色成功
                do
                {
                    if (null == tcpOutPacket)
                        break;

                    string strCmdResult = null;
                    tcpOutPacket.GetPacketCmdData(out strCmdResult);
                    if (null == strCmdResult)
                        break;

                    string[] PreFields = strCmdResult.Split(':');
                    if (PreFields.Length != 2)
                        break;

                  

                } while (false);

                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 删除用户角色
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length < 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}",
                        (TCPGameServerCmds)nID, cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string userID = fields[0];
                int roleID = Convert.ToInt32(fields[1]);

                //判断是否已经登录验证在线
                if (roleID < 0 || !GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (socket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }
                else
                {
                    //非跨服登录，检测是否验证二级密码
                    SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
                    if (pwdState != null && pwdState.NeedVerify)
                    {
                        //尚未验证，禁止删除
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
           

                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);

                //判断是否删除角色成功
                if (null != tcpOutPacket)
                {
                    string strCmdResult = null;
                    tcpOutPacket.GetPacketCmdData(out strCmdResult);
                    if (null != strCmdResult)
                    {
                        int res_roleID = Convert.ToInt32(strCmdResult);
                      
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Hàm Định nghĩa khi nhân vật vào game
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessInitGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //Có lỗi xảy ra
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {

                //Bắt đầu xử lý login
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3 && fields.Length != 2 && fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), cmdData));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string userID = fields[0];
                int roleID = Convert.ToInt32(fields[1]);

                string hid = "";
                if (fields.Length >= 3)
                {
                    hid = fields[2];
                }

                int isYueYu = 0;
                if (fields.Length >= 4)
                {
                    isYueYu = (Convert.ToInt32(fields[3]) == 1) ? 1 : 0;
                }

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null != client)
                {
                    if (client.RoleID == roleID)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("Role ID đã tồn tại không cần tìm từ DB(ProcessInitGameCmd), CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("Role ID không nhất quán, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                        return TCPProcessCmdResults.RESULT_FAILED;
                    }
                }

               
                if (roleID < 0 || !GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Plugin login, no need SocketSession, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }
                // Nếu user đã bị band thì chim cút luôn
                if (BanManager.IsBanInMemory(userID))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // Thời gian hàng đợi đăng nhập
                int waitSecs = Global.GetSwitchServerWaitSecs(socket);
                if (waitSecs > 0)
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = StdErrorCode.Error_40, BodyCode = waitSecs }, pool, nID);
                    //LogManager.WriteLog(LogTypes.Error, string.Format("CMD_INIT_GAME user {0}跨服时间同步", userID));
                    socket.session.SetSocketTime(5);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (socket.IsKuaFuLogin)
                {
                    //Nếu là liên sv thì trả về dữ liệu login của máy chủ liên sv
                    roleID = socket.ClientKuaFuServerLoginData.RoleId;
                }

                // Truy vấn nhân vật từ GAME DB SERVER
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, socket.ServerId))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                UInt16 cmd = BitConverter.ToUInt16(bytesData, 4);

                ///Chuyển đội BYTE thành các đối tượng
                RoleDataEx roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);



                if (roleDataEx.RoleID < 0)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Không lấy được nhân vật từ CSDL: Cmd={0}, RoleID={1}, đóng kết nối ", (TCPGameServerCmds)nID, roleID));

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = roleDataEx.RoleID }, pool, cmd);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // Nếu không phải là máy chủ liên server
                if (!socket.IsKuaFuLogin)
                {
                    bool isKuaFuMap = KuaFuManager.getInstance().IsKuaFuMap(roleDataEx.MapCode);
                    if (isKuaFuMap)
                    {
                        KPlayer fakeClient = Global.MakeGameClientForGetRoleParams(roleDataEx);
                        int LastMapCode, LastPosX, LastPosY;
                        if (Global.GetMapRecordDataByField(fakeClient, (int)MapRecordIndexes.InitGameMapPostion, out LastMapCode, out LastPosX, out LastPosY) && Global.MapExists(LastMapCode))
                        {
                            roleDataEx.MapCode = LastMapCode;
                            Point pt = Global.GridToPixel(LastMapCode, LastPosX, LastPosY);
                            roleDataEx.PosX = (int)pt.X;
                            roleDataEx.PosY = (int)pt.Y;
                        }
                        else
                        {
                            roleDataEx.MapCode = GameManager.MainMapCode;
                            roleDataEx.PosX = 0;
                            roleDataEx.PosY = 0;
                        }
                    }

                    //NẾu không phải GM cần xác mình và đứng ở hàng đợi
                    if (!socket.session.IsGM)
                    {
                        // Xác định xem có cần phải đợi để đăng nhập không, Có phải xác minh mật khẩu câp s2 không
                        if (roleDataEx.LastOfflineTime < TimeUtil.CurrentTicksInexact - 5 * TimeUtil.MINITE || !isKuaFuMap)
                        {
                            if (!GameManager.loginWaitLogic.IsInAllowDict(userID))
                            {
                                LoginWaitLogic.UserType userType = GameManager.loginWaitLogic.GetUserType(userID);
                                // Kiểm tra xem có cần xếp hàng ko
                                if (GameManager.loginWaitLogic.GetUserCount() >= GameManager.loginWaitLogic.GetConfig(userType, LoginWaitLogic.ConfigType.NeedWaitNum))
                                {
                                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = StdErrorCode.Error_60 }, pool, nID);
                                    //LogManager.WriteLog(LogTypes.Error, string.Format("CMD_INIT_GAME user {0}进入排队列表", userID));
                                    socket.session.SetSocketTime(5);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }
                            }

                            // NẾu trạng thái cần kiểm tra mật khẩu phụ thì yêu cầu nhập mật khẩu phụ
                            SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
                            if (pwdState != null && pwdState.NeedVerify)
                            {
                                // Nếu không xác minh thì không thể đăng nhập
                                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = StdErrorCode.Error_30 }, pool, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }
                        else
                        {
                            SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
                            if (pwdState != null && pwdState.NeedVerify)
                            {
                                pwdState.NeedVerify = false;
                            }
                        }
                    }
                }

                //Fix lại nhiệm vụ chính tuyến trong các trường hợp mất vật phẩm VV
                Global.FixMainTaskID(roleDataEx);

                //FILL RA TOÀN BỘ ĐỒ ĐẠC | CHỖ NÀY SẼ REMOVE ĐI KHI LÀM ITEM
                if (null == roleDataEx.SaleGoodsDataList)
                {
                    roleDataEx.SaleGoodsDataList = new List<GoodsData>();
                }
                if (null == roleDataEx.ElementhrtsList)
                {
                    roleDataEx.ElementhrtsList = new List<GoodsData>();
                }

                if (null == roleDataEx.UsingElementhrtsList)
                {
                    roleDataEx.UsingElementhrtsList = new List<GoodsData>();
                }
                if (null == roleDataEx.LingYuDict)
                {
                    roleDataEx.LingYuDict = new Dictionary<int, LingYuData>();
                }
                if (null == roleDataEx.DamonGoodsDataList)
                {
                    roleDataEx.DamonGoodsDataList = new List<GoodsData>();
                }
                if (null == roleDataEx.GoodsDataList)
                {
                 
                    roleDataEx.GoodsDataList = new List<GoodsData>();

                }
                if (null == roleDataEx.RolePictureJudgeReferInfo)
                {
                    roleDataEx.RolePictureJudgeReferInfo = new Dictionary<int, int>();
                }
                if (null == roleDataEx.GroupMailRecordList)
                {
                    roleDataEx.GroupMailRecordList = new List<int>();
                }


               
           
                //Thuốc lắc gì đó
                if (null == roleDataEx.MyHolyItemDataDic)
                {
                    roleDataEx.MyHolyItemDataDic = new Dictionary<sbyte, HolyItemData>();
                }
                // ngọc đã khảm [XSea 2015/8/17]
                if (null == roleDataEx.FluorescentGemData)
                {
                    roleDataEx.FluorescentGemData = new FluorescentGemData();
                }
                //7 Ngày hoạt động
                if (null == roleDataEx.SevenDayActDict)
                {
                    roleDataEx.SevenDayActDict = new Dictionary<int, Dictionary<int, SevenDayItemData>>();
                }
                if (null == roleDataEx.SoulStonesInBag)
                {
                    roleDataEx.SoulStonesInBag = new List<GoodsData>();
                }
                if (null == roleDataEx.SoulStonesInUsing)
                {
                    roleDataEx.SoulStonesInUsing = new List<GoodsData>();
                }
                

                //Xác định xem nhân vật có bị cấm đăng nhập không
                int leftSecs = 78;
                int reason = BanManager.IsBanRoleName(Global.FormatRoleName3(roleDataEx.ZoneID, roleDataEx.RoleName), out leftSecs);
                if (reason > 0)
                {
                    int _phony_rid = reason == (int)BanManager.BanReason.UseSpeedSoftware ? StdErrorCode.Error_20 :
                        reason == (int)BanManager.BanReason.RobotTask ? StdErrorCode.Error_50 :
                        StdErrorCode.Error_80;
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = _phony_rid, BodyCode = leftSecs }, pool, cmd);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                if (!socket.IsKuaFuLogin)
                {
                    //Nếu bản đồ không tồn tại
                    if (!Global.MapExists(roleDataEx.MapCode))
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("Bản đồ không tồn tại ==> chuyển về bản đồ mặc định: MapCode={0}", roleDataEx.MapCode));
                      
                        {

                            roleDataEx.MapCode = GameManager.DefaultMapCode;

                        }
                      
                        // FILL TỌA ĐỘ HỒI SINH VÀO DÂY
                        roleDataEx.PosX = 0;
                        roleDataEx.PosY = 0;
                    }
                    else
                    {
                        //Nếu bản đồ có tồn tại | Sửa lại vị trí bản đồ nếu mà bị sai vị trí
                        GameMap gameMap = GameManager.MapMgr.DictMaps[roleDataEx.MapCode];
                        roleDataEx.PosX = Global.Clamp(roleDataEx.PosX, 1, gameMap.MapWidth);
                        roleDataEx.PosY = Global.Clamp(roleDataEx.PosY, 1, gameMap.MapHeight);
                        roleDataEx.PosX = gameMap.CorrectWidthPointToGridPoint(roleDataEx.PosX);
                        roleDataEx.PosY = gameMap.CorrectHeightPointToGridPoint(roleDataEx.PosY);
                    }
                }

                // Nếu là người chơi mới và đang ở bản đồ hướng đẫn chơi thì set về bản đồ bình thường
                if (roleDataEx.IsFlashPlayer == 0 && roleDataEx.MapCode == (int)FRESHPLAYERSCENEINFO.FRESHPLAYERMAPCODEID)
                {
                    roleDataEx.MapCode = (int)MAINCITYMAPCODE.YONGZHEDALUMAPID;

                    roleDataEx.PosX = 0;
                    roleDataEx.PosY = 0;
                }

                int fuBenSeqID = FuBenManager.FindFuBenSeqIDByRoleID(roleDataEx.RoleID);

              

                  // KHỞI TẠO GAMECLIENT
                KPlayer gameClient = new KPlayer()
                {
                    RoleData = roleDataEx,
                    FuBenSeqID = fuBenSeqID,
                    ReportPosTicks = 0,
                    WaitingForChangeMap = true,
                    ClientSocket = socket,
                    TeamID = -1,
                };

                /// Thêm các kỹ năng tân thủ mặc định
                KTLogic.AddNewbieAttackSkills(gameClient);

                /// Gọi tới khi hoàn tất quá trình tải xuống RoleDataEx
                gameClient.OnEnterGame();

                KTLogic.PlayerLogin(gameClient);



                // SET LẠI DỮ LIỆU TÀI KHOẢN | THẺ THÁNG
                gameClient.strUserID = GameManager.OnlineUserSession.FindUserID(gameClient.ClientSocket);
                gameClient.strUserName = GameManager.OnlineUserSession.FindUserName(socket);
                gameClient.deviceID = hid.Replace(" ", "");
                gameClient.IsYueYu = isYueYu > 0;


                // Khởi tạo danh sách buff vào HASHSET ==> phuc vụ cho việc chuyển về client 
                Global.InitBufferDataListHashSet(gameClient);

                // Nếu không phải người chơi mới begin [12/1/2013 LiaoWei]
                if (roleDataEx.IsFlashPlayer != 0)
                {
                 
                    int nSpecialMap = (int)GameManager.systemParamsList.GetParamValueIntByName("FreshPlayerSceneID");
                    if (nSpecialMap > 0)
                    {
                      

                        fuBenSeqID = Global.GetEnterFreshPlayerScene(roleDataEx, nSpecialMap);
                    }
                }

                // Khởi tạo dữ liệu cho MAP THẾ GIỚI
                TianTiManager.getInstance().InitRoleTianTiData(gameClient);

                // Giao nhiệm vụ cho người chơi mới [XSea 2015/4/14]
                if (!GameManager.ClientMgr.GiveFirstTask(tcpMgr, socket, tcpClientPool, pool, tcpRandKey, gameClient, true))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Không giao được nhiệm vụ cho người chơi mới, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SceneUIClasses sceneType = Global.GetMapSceneType(roleDataEx.MapCode);

               // Nếu đang ở máy chủ liên server
                if (socket.IsKuaFuLogin)
                {
                    // TOÀN BỘ PHỤ BẢN LIÊN SERVER PHẢI ĐƯỢC KHAI BÁO Ở ĐÂY
                    if (!KuaFuManager.getInstance().OnInitGame(gameClient))
                    {
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData() { RoleID = StdErrorCode.Error_Operation_Denied }, pool, cmd);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    fuBenSeqID = gameClient.FuBenSeqID;
                }
                else if (MapTypes.Normal != Global.GetMapType(roleDataEx.MapCode) || Global.IsMingJieMap(roleDataEx.MapCode))// NẾU ĐANG TRONG PHỤ BẢN
                {
                    if (MapTypes.NormalCopy == Global.GetMapType(roleDataEx.MapCode) ||
                        MapTypes.CaiShenMiaoCopy == Global.GetMapType(roleDataEx.MapCode) ||
                        MapTypes.TaskCopy == Global.GetMapType(roleDataEx.MapCode) ||
                        MapTypes.MarriageCopy == Global.GetMapType(roleDataEx.MapCode)
                        )
                    {
                        bool resetMapCode = false;
                        if (fuBenSeqID > 0) //Phụ bản của lần trước đang đánh dở và thoát ra
                        {
                            if (roleDataEx.IsFlashPlayer == 0) //Nếu không phải người chơi mới
                            {
                                //Xác định xem có thể quay lại phụ bản không
                                if (!Global.CanReEnterCopyMap(roleDataEx.MapCode, fuBenSeqID))
                                {
                                    resetMapCode = true;
                                }
                                else if (sceneType == SceneUIClasses.CangBaoMiJing)
                                {
                                    resetMapCode = true;
                                }
                                else if (sceneType == SceneUIClasses.BloodCastle)
                                {
                                    // Nếu là phụ bản tự tạo
                                    if (!GameManager.BloodCastleCopySceneMgr.CanEnterExistCopyScene(gameClient))
                                    {
                                        resetMapCode = true;
                                    }
                                }
                                else if (sceneType == SceneUIClasses.Demon)
                                {
                                    if (!GameManager.DaimonSquareCopySceneMgr.CanEnterExistCopyScene(gameClient))
                                    {
                                        resetMapCode = true;
                                    }
                                }
                                else if (roleDataEx.MapCode == (int)GoldCopySceneEnum.GOLDCOPYSCENEMAPCODEID)
                                {
                                    bool bReturn = false;
                                    bReturn = GlodCopySceneManager.EnterGoldCopySceneWhenLogin(gameClient, false);

                                    if (bReturn == false)
                                        resetMapCode = true;
                                }
                                else if (roleDataEx.MapCode == EMoLaiXiCopySceneManager.EMoLaiXiCopySceneMapCode)
                                {
                                    bool bReturn = false;
                                    bReturn = EMoLaiXiCopySceneManager.EnterEMoLaiXiCopySenceWhenLogin(gameClient, false);

                                    if (bReturn == false)
                                        resetMapCode = true;
                                }
                                else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(roleDataEx.MapCode))
                                {
                                    int mapid;
                                    int seqid;
                                    GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(gameClient, out mapid, out seqid, 0);
                                    if (mapid != roleDataEx.MapCode)
                                    {
                                        resetMapCode = true;
                                    }
                                }
                                else if (LuoLanFaZhenCopySceneManager.IsLuoLanFaZhenMap(roleDataEx.MapCode))
                                {
                                    bool bReturn = false;
                                    bReturn = LuoLanFaZhenCopySceneManager.EnterFubenMapWhenLogin(gameClient);

                                    if (bReturn == false)
                                        resetMapCode = true;
                                }
                            }
                        }
                        else
                        {
                            resetMapCode = true;
                        }

                        if (resetMapCode)
                        {
                            LogManager.WriteLog(LogTypes.Warning, string.Format("Người chơi đăng nhập lại -> Reset lại về bản đồ thương thường: MapCode={0}", roleDataEx.MapCode));
                            roleDataEx.MapCode = GameManager.NewDefaultMapCode;
                            roleDataEx.PosX = 0;
                            roleDataEx.PosY = 0;

                            fuBenSeqID = -1;

                          
                            FuBenManager.RemoveFuBenSeqID(roleDataEx.RoleID);
                        }
                    }
                    else 
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("Chuyển về bản đồ thường sau khi đăng nhập: MapCode={0}", roleDataEx.MapCode));
                        roleDataEx.MapCode = GameManager.DefaultMapCode;
                        roleDataEx.PosX = 0;
                        roleDataEx.PosY = 0;
                    }
                }
                else  
                {
                    // NẾU Ở BẢN ĐỒ THÔNG THƯỜNG
                    bool resetMapCode = false;
                    // NẾU ĐANG Ở CHIẾN TRƯỜNG
                    if (GameManager.BattleMgr.BattleMapCode == roleDataEx.MapCode)
                    {
                     
                        // Nếu không thể quay lkaij chiến trường thì bắt buộc thoát khỏi chiến trường
                        if (!Global.CanReEnterBattleMap(roleDataEx.RoleID))
                        {
                            LogManager.WriteLog(LogTypes.Warning, string.Format("Đưa người chơi về bản đồ thường vì không thể quay lại chiến trường: MapCode={0}", roleDataEx.MapCode));
                            resetMapCode = true;
                        }
                        else
                        {
                            Global.GetLastBattleSideInfo(gameClient);
                        }
                    }
                  
                    else if (GameManager.ArenaBattleMgr.BattleMapCode == roleDataEx.MapCode)//Nếu không thể uqy lại ARENA BATTLE
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("Không thể quay lại ARENA BATTEL ==> Đưa người chơi về bản đồ thông thường: MapCode={0}", roleDataEx.MapCode));
                        resetMapCode = true;
                    }
                    else if (Global.IsInGuMuMap(gameClient)/* && Global.IsGuMuTimeOver(gameClient)*/) // Nếu không thể quay lại LĂNG MỘ
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("Không thể quay lại bản đồ lăng mộ : MapCode={0}", roleDataEx.MapCode));
                        resetMapCode = true;
                    }
                    else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(roleDataEx.MapCode)) // Nếu không thể quay lại bản đồ công thành chiến
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("Không thể quay lại bản đồ công thành chiến==> Đưa người chơi về map thường: MapCode={0}", roleDataEx.MapCode));
                        resetMapCode = true;
                    }
                    else if (sceneType == SceneUIClasses.AngelTemple) // Nếu bản đồ là bản đồ thiên thần
                    {
                        if (!GameManager.AngelTempleMgr.CanEnterAngelTempleOnTime())
                        {
                            LogManager.WriteLog(LogTypes.Warning, string.Format("Không thể quay lại bản đồ thiên thần: MapCode={0}", roleDataEx.MapCode));
                            resetMapCode = true;
                        }
                    }
                    else
                    {
                       
                        if (JunQiManager.GetLingDiIDBy2MapCode(roleDataEx.MapCode) >= (int)LingDiIDs.HuangCheng)
                        {
                            LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将皇城或者领地地图转为常规地图: MapCode={0}", roleDataEx.MapCode));
                        }

                        //其他场景
                        switch (sceneType)
                        {
                            case SceneUIClasses.KaLunTe:
                            case SceneUIClasses.HuanShuYuan:
                                resetMapCode = true;
                                break;
                        }
                    }

                    if (resetMapCode)
                    {
                        roleDataEx.MapCode = GameManager.MainMapCode;
                        roleDataEx.PosX = 0;
                        roleDataEx.PosY = 0;
                    }
                }

           
                if (roleDataEx.MapCode <= 0) 
                {
                    roleDataEx.MapCode = GameManager.NewDefaultMapCode;
                    roleDataEx.PosX = 0;
                    roleDataEx.PosY = 0;
                }

                if (roleDataEx.PosX <= 0 || roleDataEx.PosY <= 0) // NẾU MÀ TỌA ĐỘ ÂM THÌ ĐƯA VỀ TỌA ĐỘ MẶC ĐỊNH
                {
                    int defaultBirthPosX = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosX;
                    int defaultBirthPosY = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosY;
                    int defaultBirthRadius = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].BirthRadius;

                   
                    Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                    roleDataEx.PosX = (int)newPos.X;
                    roleDataEx.PosY = (int)newPos.Y;
                    roleDataEx.RoleDirection = Global.GetRandomNumber(0, 8);
                }
                else if (Global.InObs(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, roleDataEx.PosX, roleDataEx.PosY)) //NẾu mà trong BLOCK ==> Đưa về điểm hồi sinh mặc định
                {
                    int defaultBirthPosX = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosX;
                    int defaultBirthPosY = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosY;
                    int defaultBirthRadius = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].BirthRadius;

                    Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                    roleDataEx.PosX = (int)newPos.X;
                    roleDataEx.PosY = (int)newPos.Y;
                }

                gameClient.FuBenSeqID = fuBenSeqID;

              
                if (gameClient.FuBenSeqID >= 0 && gameClient.FuBenID < 0)
                {
                    gameClient.FuBenID = FuBenManager.FindFuBenIDByMapCode(gameClient.MapCode);
                }


                gameClient.TotalLearnedSkillLevelCount = 0;



                //Lấy ra TẦNG TIẾP THEO CỦA PHỤ BẢN=> KIỂU NHƯ VƯỢT THÁP
                gameClient.WanMoTaNextLayerOrder = GameManager.ClientMgr.GetWanMoTaPassLayerValue(gameClient);
              
                // INIT TOÀN BỘ THUỘC TÍNH PHỤ CỦA NGƯỜI CHƠI
                Global.InitRoleParamsInfo(gameClient);


                // Thực hiện attak toàn bộ đồ đang sử dụng vào Dict
                gameClient.GetPlayEquipBody().InitEquipBody();
               
                // KIỂM TRA XEM THẺ THÁNG HẾT HẠN CHƯA
                YueKaManager.CheckValid(gameClient);

                // Khởi tạo các dữ liệu liên quan tới Thành TÍCH
                ChengJiuManager.InitRoleChengJiuData(gameClient);

                // THUỘC TÍNH TRÒM SAO ===> CÓ THỂ XÓA [8/4/2014 LiaoWei]
                GameManager.StarConstellationMgr.InitPlayerStarConstellationPorperty(gameClient);

                // Hệ thống CHUYỂN SINH===> CÓ THỂ XÓA [8/26/2014 LiaoWei]
                GameManager.ChangeLifeMgr.InitPlayerChangeLifePorperty(gameClient);

                // XỬ LÝ THÔNG TIN VIP ==> CÓ THỂ CÂN NHẮC BỎ 
                Global.QueryVipAwardFlagToDB(gameClient);
                Global.ProcessVipLevelUp(gameClient);

                // KHỞI TỌA THÔNG TIN HOẠT ĐỘNG HÀNG NGÀY [2/26/2014 LiaoWei]
                DailyActiveManager.InitRoleDailyActiveData(gameClient);

                // SỰ KIỆN 4 MÙA | NHẬN THƯỞNG CÁC KIỂU

                HuodongCachingMgr.OnJieriRoleLogin(gameClient, Global.SafeConvertToInt32(gameClient.MyHuodongData.LastDayID), true);
                bool isFirstLogin = false;
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (dayID != Global.SafeConvertToInt32(gameClient.MyHuodongData.LastDayID))
                {
                    isFirstLogin = true;
                }

                //Xử lý hệ thống thu thập như kiểu nhiệm vụ THƯƠNG HỘI==> TÌM RỒI NỘP CÁI J ĐÓ

                CaiJiLogic.InitRoleDailyCaiJiData(gameClient, true, isFirstLogin);

                // THIẾT LẬP LẠI CÁC THÀNH TÍCH CỦA BẢN ĐỒ LIÊN MÁY CHỦ | KIỂU NHƯ ĐIỂM 
                HuanYingSiYuanManager.getInstance().InitRoleDailyHYSYData(gameClient);

                //Cập nhật số lần đăng nhập liên quan đến thành tích ---> phải được gọi trước UpdateWeekLoginNum để đảm bảo LastDayID trong MyHuodongData không bị thay đổi
                ChengJiuManager.OnRoleLogin(gameClient, Global.SafeConvertToInt32(gameClient.MyHuodongData.LastDayID));

            

                // Kiểm tra login FLAT cho sự kiện HEFU
                Global.UpdateHeFuLoginFlag(gameClient);
                // Ghi lại số lần login liên tục cho sự kiện HEFU
                Global.UpdateHeFuTotalLoginFlag(gameClient);
                // Lưu lại số lần login
                Global.UpdateRoleLoginRecord(gameClient);

                bool bIsCompleted = false;
                if (gameClient.DailyActiveDayLginSetFlag != true)
                {
                    DailyActiveManager.ProcessLoginForDailyActive(gameClient, out bIsCompleted);

                    // 因为如果完成了 会把数据推给客户端 节省包流量
                    if (bIsCompleted != true)
                        DailyActiveManager.NotifyClientDailyActiveData(gameClient);
                }

                gameClient.DailyActiveDayLginSetFlag = false;

                //更新前七天的每天在线累计时长--->一定要在UpdateWeekLoginNum 前面调用，保证 MyHuodongData中LastDayID未被更改
                HuodongCachingMgr.ProcessDayOnlineSecs(gameClient, Global.SafeConvertToInt32(gameClient.MyHuodongData.LastDayID));

                //Số lần đăn gnhapaj liên tiếp trong tuần
                Global.UpdateWeekLoginNum(gameClient);

                //更新限时累计登录次数
                Global.UpdateLimitTimeLoginNum(gameClient);

                // 增加活动信息DB处理 [1/18/2014 LiaoWei]
                GameDb.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, gameClient);

                //初始化新手见面礼物的数据
                Global.InitNewStep(gameClient);

                //Lọc tất cả các task không hợp lệ
                Global.RemoveAllInvalidTasks(gameClient);

                //在用户登录后，将任务数据发送给用户前, 进行预先处理
                Global.ProcessTaskData(gameClient);

                //检查物品的有效性
                Global.CheckGoodsDataValid(gameClient);

                if (!GameManager.TestGamePerformanceMode || !(GameManager.TestGamePerformanceForAllUser || gameClient.strUserID == null || gameClient.strUserID.StartsWith("mu")))
                {
                    //刷新装备,压测账号禁用这个调用
                  //  gameClient.UsingEquipMgr.RefreshEquips(gameClient);
                }
                if (GameManager.TestGamePerformanceMode)
                {
                    Global.TestRoleRandomPosition(gameClient);
                }

                //用户登陆时处理副本每天的次数更新 gwz 2014-7-12 移动代码位置
                if (isUpdateFuBenData)
                    Global.ProcessUpdateFuBenData(gameClient);



                // ATTACK TOÀN BỘ THUỘC TÍNH CHO SKILL PASSIBLE Ở ĐÂY
                Global.RefreshSkillForeverProps(gameClient);

                //TODO ATTACK TOÀN BỘ THUỘC TÍNH CỦA VẬT PHẨM ĐANG MẶC LÊN NGƯỜI
               

                //角色通用参数
                gameClient.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(gameClient);

                //处理副本地图
                Global.InitCopyMap(gameClient);

                //进入罗兰法阵地图时会发送某些数据给客户端
                LuoLanFaZhenCopySceneManager.OnEnterFubenMap(gameClient, gameClient.MapCode, true);

                //添加到队列中
                if (!GameManager.ClientMgr.AddClient(gameClient))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("角色已在客户角色列表中,强制断开连接.角色名:{0}", Global.FormatRoleName(gameClient, gameClient.RoleName)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //LogManager.WriteLog(LogTypes.Error, string.Format("ProcessInitGameCmd 新的socket建立后初始化GameClient对象成功, CMD={0}, Client={1}, RoleID={2}",
                //                    (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));


                // 角色名称到ID的映射
                string roleName;
                if (socket.IsKuaFuLogin)
                {
                    roleName = Global.FormatRoleNameWithZoneId(gameClient);
                }
                else
                {
                    roleName = Global.FormatRoleName(gameClient, gameClient.RoleName);
                }

                RoleName2IDs.AddRoleName(roleName, gameClient.RoleID);

                /// 初始化角色的各种每日任务
                Global.InitRoleDailyTaskData(gameClient, isFirstLogin);

                //写入角色登录的行为日志
                Global.AddRoleLoginEvent(gameClient);

                /// 重新初始化节日称号
                Global.InitJieriChengHao(gameClient);

                // 日常活动最高积分读取 [12/24/2013 LiaoWei]
                Global.InitRoleDayActivityPoint(gameClient);

                // 更新推送表中的登陆时间 [5/3/2014 LiaoWei]
                Global.UpdatePushMessageInfo(gameClient, gameClient.PushMessageID);

                //如果是新角色(第一次登录)
                if (gameClient.LoginNum <= 0)
                {
                   
                 
                    double currSec = Global.GetOffsetSecond(TimeUtil.NowDateTime());
                    GameDb.UpdateRoleParamByName(gameClient, RoleParamName.CallPetFreeTime, currSec.ToString(), true);
                }


                // 魂石系统
                SoulStoneManager.Instance().CheckOpen(gameClient);

                // 荧光宝石
                GameManager.FluorescentGemMgr.OnLogin(gameClient);

                Global.FixRoleSomeData(gameClient);

                //FILL DỮ LIỆU CHO ROLEDATA
                RoleData roleData = KTLogic.ClientToRoleData1(gameClient);



                //设置成就符文属性加成
                ChengJiuManager.initSetAchievementRuneProps(gameClient);

             

                UnionPalaceManager.initSetUnionPalaceProps(gameClient, true);

                
            

                //[bing]设置圣物属性加成
                HolyItemManager.getInstance().UpdateAllHolyItemAttr(gameClient);

              

            

              

                // 取得魔晶兑换的信息 [5/22/2014 LiaoWei]
                Global.QueryToDBRoleMoJingExchangeInfo(gameClient);

                // 获取万魔塔信息
                WanMotaCopySceneManager.GetWanMoTaDetail(gameClient, true);

                //初始化资源找回信息 gwz 2014-7-12
                CGetOldResourceManager.InitRoleOldResourceInfo(gameClient, isFirstLogin);


                //整理一下背包（初始化物品的格子位置）
                if (GameManager.Flag_OptimizationBagReset)
                {
                    Global.ResetBagAllGoods(gameClient, false);
                }

                //触发玩家登录事件
                GlobalEventSource.getInstance().fireEvent(new PlayerInitGameEventObject(gameClient));

                KuaFuManager.getInstance().NotifyClientCannotJoinKuaFuCopyEndTicks(gameClient);

                TenRetutnManager.getInstance().GiveAwards(gameClient);

                

                //AllyManager.getInstance().UnionAllyInit(gameClient.GuildID, gameClient.ServerId, gameClient.ClientSocket.IsKuaFuLogin);
                AllyManager.getInstance().UnionAllyInit(gameClient);

                //判断是否禁止了登录
                leftSecs = 0;
                if (BanManager.IsBanRoleName(Global.FormatRoleName(gameClient, gameClient.RoleName), out leftSecs) > 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, gameClient, StringUtil.substitute(Global.GetLang("因为使用加速软件, 将在一段时间内无法登录!")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.HintAndBox);
                    LogManager.WriteLog(LogTypes.Error, string.Format("登陆时判断用户角色: {0} 在禁止登录列表中，强制断开连接...", Global.FormatRoleName(gameClient, gameClient.RoleName)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                socket.session.SetSocketTime(3);

                // 修改到startplaygame的石宏再剔除
                // 如果登陆上来了，就从允许列表中剔除，防止占了一个坑
                // GameManager.loginWaitLogic.RemoveAllow(userID);

                // 写入分析日志
                try
                {
                    string ip = RobotTaskValidator.getInstance().GetIp(gameClient);

                    string analysisLog = string.Format("login server={0} account={1} player={2} level={3} map={4} exp={5} dev_id={6} platform={7} viplevel={8} port={9} regtick={10} yueyu={11}",
                        GameManager.ServerId, gameClient.strUserID, gameClient.RoleID, Global.GetUnionLevel2(gameClient.ChangeLifeCount, gameClient.m_Level),
                        gameClient.MapCode, ip,
                        string.IsNullOrEmpty(gameClient.deviceID) ? "" : gameClient.deviceID, GameCoreInterface.getinstance().GetPlatformType().ToString(), gameClient.VipLevel,
                        ((IPEndPoint)socket.RemoteEndPoint).Port.ToString(), gameClient.RegTime * 10000, isYueYu);
                    LogManager.WriteLog(LogTypes.Analysis, analysisLog);
                }
                catch { }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(roleData, pool, cmd);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 游戏校时
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTimeSyncGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                long clientTicks = Convert.ToInt64(fields[1]);
                long serverTicks = TimeUtil.NOW() * 10000;

                string strcmd = "";
                strcmd = string.Format("{0}:{1}:{2}", roleID, clientTicks, serverTicks);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// [bing] 游戏校时2 由客户端每隔n分钟主动请求 
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTimeSyncGameByClientCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            //return ProcessTimeSyncGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
            tcpOutPacket = null;
            return TCPProcessCmdResults.RESULT_OK;
        }

        /// <summary>
        /// 游戏版本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessClientPushVersionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int codeRevision = Convert.ToInt32(fields[1]);
                int mainExeVer = Global.SafeConvertToInt32(fields[2]);
                int resVer = Global.SafeConvertToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null != client)
                {
                    client.CodeRevision = codeRevision;
                    client.MainExeVer = mainExeVer;
                    client.ResVer = resVer;
                }

                int needMainExeVer = 0;
                int needResVer = 0;
                int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
                if (forceUpdate > 0)
                {
                    int forceHintAppVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-appver", 0);
                    if (mainExeVer < forceHintAppVer)
                    {
                        needMainExeVer = forceHintAppVer;
                    }
                    else
                    {
                        int forceHintResVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-resver", 0);
                        if (resVer < forceHintResVer) //判断资源是否需要更新
                        {
                            needResVer = forceHintResVer;
                        }
                    }
                }

                if (needMainExeVer > 0 || needResVer > 0)
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), string.Format("{0}:{1}:{2}", codeRevision, needMainExeVer.ToString(), needResVer.ToString()), nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 游戏版本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessNotifyShowGonggaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client/* || client.RoleID != roleID*/)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                GongGaoDataManager.CheckGongGaoInfo(client, nID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 开始通知其他人自己上线开始游戏
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessStartPlayGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Thiết lập hướng mặc định
                client.CurrentDir = KiemThe.Entities.Direction.DOWN;

                //将精灵放入格子
                if (!GameManager.MapGridMgr.DictGrids[client.MapCode].MoveObject(-1, -1, client.PosX, client.PosY, client))
                {
                    //LogManager.WriteLog(LogTypes.Error, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.RoleID));
                    //return TCPProcessCmdResults.RESULT_FAILED;
                }

                //设置执行数据库执行的开始时间
                {
                    long nowTicks = TimeUtil.NOW();
                    Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEMONEY1_CMD, nowTicks);
                    Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_INTERPOWER, nowTicks);
                    Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_EXPLEVEL, nowTicks);

                    //标记进入地图的时间
                    client.EnterMapTicks = nowTicks;
                }

           

                /// 清空角色的可见列表
                client.ClearVisibleObjects(false);

                //计算NPC的任务状态
                Global.ComputeNPCTaskState(client);

                //通知自己的坐骑骑乘状态(新登录，新地图, 复活需要)
                GameManager.ClientMgr.NotifySelfOnHorse(client);

               

                //因为死亡会掉落装备
                //所以回城复活需要这个
                {
                  

                  
                }

                //重新获取大乱斗的信息
                //Global.GetLastBattleInfo(client);

                ///刚登陆游戏强迫触发lua脚本
                client.ChangeGrid();

                //是否是第一次登录后地图
                if (client.FirstPlayStart)
                {
                    client.FirstPlayStart = false;

                    //初始化压测帐号
                    PerformanceTest.InitForTestMode(client);

                    //将所有的公告消息发布给指定的客户端
                    GameManager.BulletinMsgMgr.SendAllBulletinMsg(client);



                    //通知客户端属性变化
                    //GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);


                    // 驱动针对用户的弹窗列表
                    PopupWinMgr.ProcessClientPopupWins(client);


                    //如果是新角色(第一次登录)
                    if (client.LoginNum <= 0)
                    {
                        //自动给予新手物品
                        Global.AutoGiveNewRoleGoods(client);

                        //自动给予新手到仓库的物品
                        //Global.AutoGiveNewRoleGoodsToPortableBag(client);

                        //自动给予新手物品
                        Global.AutoGiveNewRoleOtherValues(client);

                        //设置挂机选项
                        client.AutoFightGetThings = (int)((long)(Math.Pow(2, 32)) - 1);
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.FightGetThings, client.AutoFightGetThings, true);
                    }

                    // 成功登录
                    client.LoginNum++;

                    //更新上线状态
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ROLE_ONLINE,
                        string.Format("{0}:{1}:{2}:{3}", client.RoleID, GameManager.ServerLineID, client.LoginNum, Global.GetSocketRemoteIP(client)),
                        null, client.ServerId);

                    //如果执行成功，通知客户端，客户端会重新刷新界面数据
                    ChengJiuManager.NotifyClientChengJiuData(client);


                    //登录时广播列表
                    BroadcastInfoMgr.LoginBroadcastInfos(client);


                    //处理红状态
                    Global.ProcessRedNamePunishForDebuff(client);

                
                    //设置玩家召回信息
                    UserReturnManager.getInstance().initUserReturnData(client);

                    FundManager.initFundData(client);

                  

                    //[bing] 发送圣物数据给客户端
                    HolyItemManager.getInstance().PlayGameAfterSend(client);

                    //用户登陆时处理副本每天的次数更新 gwz 2014-7-12 移动代码位置
                    Global.ProcessUpdateFuBenData(client);

                    // 七日活动
                    SevenDayActivityMgr.Instance().OnLogin(client);

                    TradeBlackManager.Instance().UpdateObjectExtData(client);

                    // 专属活动 开启 or 关闭
                    SpecialActivity act = HuodongCachingMgr.GetSpecialActivity();
                    if (null != act)
                    {
                        act.NotifyActivityState(client);
                    }

                    ZhengBaManager.Instance().OnLogin(client);
                    SpeedUpTickCheck.Instance().OnLogin(client);
                   
                }

                ///最后通知属性
                {
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    /// Gửi thông báo sinh lực của đối tượng đến tất cả các đối tượng xung quanh
                    client.NotifyOthersMyHP();

                    /// Gửi gói tin thông báo sinh lực nội lực thể lực
                    client.NotifySelfHPMPStamina();

                    /// Gửi gói tin thông báo danh sách kỹ năng về Client
                    KT_TCPHandler.SendRenewSkillList(client);
                }

                client.WaitingForChangeMap = false; //这里才是地图切换完成

                SceneUIClasses sceneType = Global.GetMapSceneType(client.MapCode);
                switch (sceneType)
                {
                    case SceneUIClasses.AngelTemple:
                        GameManager.AngelTempleMgr.OnEnterScene(client);
                        break;
                }

                /// 玩家进行了移动
                if (GameManager.Update9GridUsingNewMode <= 0)
                {
                    ClientManager.DoSpriteMapGridMove(client);
                }
                else
                {
                    Global.GameClientMoveGrid(client);
                }

                // 刷新各图标上的感叹号
                client._IconStateMgr.LoginGameFlushIconState(client);

                //执行进入地图的lua脚本
                client.ExecuteEnterMap(client.MapCode);

                int forceHintAppVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-appver", 0);
                if (client.MainExeVer > 0 && client.MainExeVer < forceHintAppVer)
                {
                    int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
                    if (forceUpdate > 0)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                           StringUtil.substitute(Global.GetLang("尊敬的用户，您当前的客户端版本过低可能会导致各种异常, 建议退出游戏更新后再进入")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NeedUpdateApp);
                    }
                }
                else if (client.ResVer > 0) //判断资源是否需要更新
                {
                    int forceHintResVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-resver", 0);
                    if (client.ResVer < forceHintResVer)
                    {
                        int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
                        if (forceUpdate > 0)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                           StringUtil.substitute(Global.GetLang("尊敬的用户，您当前的客户端资源版本过低可能会无法正常游戏, 建议退出游戏更新后再进入")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NeedUpdateRes);
                        }
                    }
                }

                // 更新世界等级BUFF
                WorldLevelManager.getInstance().UpddateWorldLevelBuff(client);

                LuoLanChengZhanManager.getInstance().OnStartPlayGame(client);
                KingOfBattleManager.getInstance().OnStartPlayGame(client);

                // 发送外挂列表加密数据
                client.ClientEffectHideFlag1 = 0;
                //// test only
                //RobotTaskSender.getInstance().Initialize(RobotTaskValidator.getInstance().m_TaskListVerifySeed, RobotTaskValidator.getInstance().m_TaskListVerifyRandomCount, RobotTaskValidator.getInstance().m_TaskListRSAPubKey);
                //byte[] output = RobotTaskSender.getInstance().EncryptTaskList("kernel_task*launchd*UserEventAgent*mediaserverd*fseventsd*assistantd*fileproviderd*vmd*routined*mediaremoted*misd*healthd*configd*powerd*atc*wifid*keybagd*familynotificati*softwareupdated*installd*identityservices*touchsetupd*AppleIDAuthAgent*syslogd*awdd*SpringBoard*wirelessproxd*discoveryd*backboardd*askpermissiond*timed*sharingd*locationd*BTServer*imagent*assertiond*tipsd*softwarebehavior*ptpd*lockdownd*iaptransportd*aggregated*fairplayd.H2*CommCenter*sandboxd*notifyd*cfprefsd*pkd*distnoted*lsd*nanoregistryd*pfd*accountsd*coreduetd*WirelessRadioMan*MobileGestaltHel*discoveryd_helpe*securityd*apsd*networkd*networkd_privile*lockbot*mobactivationd*medialibraryd*IMDPersistenceAg*BlueTool*itunescloudd*bird*CloudKeychainPro*ind*homed*nsurlstoraged*storebookkeeperd*mapspushd*CallHistorySyncH*aosnotifyd*fmfd*findmydeviced*itunesstored*tccd*cloudd*nsurlsessiond*filecoordination*profiled*BTLEServer*AGXCompilerServi*nehelper*biometrickitd*oscard*dataaccessd*geod*AGXCompilerServi*companion_proxy*afcd*mobile_assertion*notification_pro*syslog_relay*DuetHeuristic-BM*misagent*mobile_installat*containermanager*calaccessd*com.apple.Mobile*AGXCompilerServi*assetsd*nanoregistrylaun*com.apple.uifoun*recentsd*softwareupdatese*MobileMail*mobileassetd*diagnosticd*com.apple.Mobile*lsuseractivityd*deleted*CacheDeleteITune*CacheDeleteAppCo*swcd*adid*CacheDeleteSyste*webbookmarksd*CacheDeleteGeoTi*pipelined*streaming_zip_co*com.apple.Stream*amfid*DTMobileIS*StocksWidget*CalendarWidget*limitadtrackingd*AppStore*familycircled*Preferences*gputoolsd*debugserver*mu*gamecontrollerd*coresymbolicatio*ubd*AGXCompilerServi*", false, false, "vbox86,DEVICE*arm*xxx");
                //RobotTaskValidator.getInstance().ValidateTaskList(output, client);

                socket.session.SetSocketTime(4);

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    KuaFuManager.getInstance().OnStartPlayGame(client);
                }

                // 如果登陆上来了，就从允许列表中剔除，防止占了一个坑
                GameManager.loginWaitLogic.RemoveAllow(client.strUserID);
                GlobalEventSource.getInstance().fireEvent(new OnStartPlayGameEventObject(client));


                string strcmd = "";
                strcmd = string.Format("{0}", roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Client bắt đầu di chuyển
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMoveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            SpriteMoveData cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<SpriteMoveData>(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                if (null == cmdData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// ID đối tượng
                int roleID = cmdData.RoleID;
                /// Vị trí đích X
                int toX = cmdData.ToX;
                /// Vị trí đích Y
                int toY = cmdData.ToY;
                /// Vị trí bắt đầu X
                int fromX = cmdData.FromX;
                /// Vị trí bắt đầu Y
                int fromY = cmdData.FromY;
                /// Thời điểm bắt đầu di chuyển ở phía Client
                long startMoveTick = cmdData.StartMoveTick;

                startMoveTick -= 50;

                /// Khoảng Delay trong quá trình gửi Packet từ Client lên
                long delayPacket = KTGlobal.GetCurrentTimeMilis() - startMoveTick;

                Console.WriteLine("Delay Packet = " + delayPacket);

                /// Nếu thời gian Delay trên ngưỡng cho phép
                if (delayPacket > KTGlobal.MaxClientPacketDelayAllowed)
                {
                    delayPacket = 0;
                }
                else if (delayPacket < 0)
                {
                    delayPacket = 0;
                }

                /// Người chơi tương ứng
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Nếu đang trong thời gian chờ thực hiện động tác xuất chiêu
                if (!KTGlobal.FinishedUseSkillAction(client, client.GetCurrentAttackSpeed()))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu đang đợi chuyển cảnh
                if (client.WaitingForChangeMap)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// ID bản đồ hiện tại
                int mapCode = client.CurrentMapCode;

                /// Thông tin bản đồ hiện tại
                GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
                if (null == gameMap)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu vị trí đích đến không thể đến được
                if (!Global.IsGridReachable(mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight))
                {
                    int fGridX = fromX / gameMap.MapGridWidth;
                    int fGridY = fromY / gameMap.MapGridHeight;
                    int tGridX = toX / gameMap.MapGridWidth;
                    int tGridY = toY / gameMap.MapGridHeight;

                    Console.WriteLine(string.Format("CMD_SPR_MOVE Faild : {0}, {1} ---> {2},{3}", fGridX, fGridY, tGridX, tGridY));
                    LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteMoveCmd Faild RoleID = {0}, MapCode = {1}, toX = {2}, toY = {3}", roleID, mapCode, toX, toY));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Dừng StoryBoard hiện tại
                KTPlayerStoryBoard.Instance.Remove(client, true, delayPacket);
                
                /// Nếu không thể chủ động di chuyển
                if (!client.IsCanPositiveMove())
                {
                    fromX = client.PosX;
                    fromY = client.PosY;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, fromX, fromY, (int) client.CurrentDir);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Chuỗi mã hóa đoạn đường di chuyển
                string pathString = KTCrypto.Decrypt(new ASCIIEncoding().GetBytes(cmdData.PathString));

                /// Tốc độ di chuyển hiện tại
                int moveSpeed = client.GetCurrentRunSpeed();

                /// Kiểm tra vị trí hiện tại của người chơi và vị trí truyền về từ Client xem có hợp lệ không
                if (!Global.ValidateClientPosition(client, fromX, fromY))
                {
                    fromX = (int) client.CurrentPos.X;
                    fromY = (int) client.CurrentPos.Y;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, fromX, fromY, (int) client.CurrentDir);
                }

                /// Lấy vị trí trên Client thiết lập làm vị trí hiện tại
                client.CurrentPos = new Point(fromX, fromY);

                /// Đối tượng quản lý bản đồ
                MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.MapCode];
                /// Di chuyển người chơi đến vị trí tương ứng trên bản đồ
                mapGrid.MoveObject(-1, -1, fromX, fromY, client);

                /// Gói tin gửi cho người chơi khác thông báo đối tượng di chuyển
                SpriteNotifyOtherMoveData moveData = new SpriteNotifyOtherMoveData()
                {
                    RoleID = client.RoleID,
                    FromX = fromX,
                    FromY = fromY,
                    ToX = toX,
                    ToY = toY,
                    PathString = cmdData.PathString,
                    StartMoveTick = startMoveTick,
                    Action = (int) KE_NPC_DOING.do_run, /// TODO WALK OR SOMETHING
                };
                /// Thông báo cho người chơi khác
                GameManager.ClientMgr.NotifyOthersMyMoving(tcpMgr.MySocketListener, pool, moveData, client, nID);

                /// Thực hiện StoryBoard
                KTPlayerStoryBoard.Instance.Add(client, pathString);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 只通知服务器端自己移动正常结束
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMoveEndCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SCMoveEnd cmdData = null;
            //string cmdData = null;

            //try
            //{
            //    cmdData = new UTF8Encoding().GetString(data, 0, count);
            //}
            //catch (Exception) //解析错误
            //{
            //    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
            //    return TCPProcessCmdResults.RESULT_FAILED;
            //}

            try
            {
                //解析用户名称和用户密码
                //string[] fields = cmdData.Split(':');
                //if (fields.Length != 5)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                ProtoChecker.Instance().Check<SCMoveEnd>(data, 0, count, socket.m_Socket);

                if (!CheckHelper.CheckTCPCmdHandle<SCMoveEnd>(socket, nID, data, count, out cmdData))
                    return TCPProcessCmdResults.RESULT_FAILED;

                int roleID = cmdData.RoleID;
                int mapCode = cmdData.MapCode;
                int toX = cmdData.ToMapX;
                int toY = cmdData.ToMapY;
                int direction = cmdData.ToDiection;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //如果地图已经切换
                if (mapCode != client.MapCode)
                {
                    client.CheckCheatData.MismatchingMapCode = true;
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!Global.ValidateClientPosition(client, toX, toY))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int check_cmd_position = GameManager.GameConfigMgr.GetGameConfigItemInt(GameConfigNames.check_cmd_position, 1);
                if (check_cmd_position > 0)
                {
                    GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
                    if (null == gameMap)
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (-1 != toX && -1 != toY && !Global.IsGridReachable(mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteMoveEndCmd Faild RoleID = {0}, MapCode = {1}, toX = {2}, toY = {3}", roleID, mapCode, toX, toY));
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }

                //重置野蛮冲撞状态
                //client.YeManChongZhuang = 0;

                int oldToX = toX;
                int oldToY = toY;

                Console.WriteLine("SpriteMoveEnd => Stop StoryBoard");

                /// Dừng thực thi StoryBoard
                KTPlayerStoryBoard.Instance.Remove(client);

                int newToX = toX;// gameMap.CorrectWidthPointToGridPoint((int)toX);
                int newToY = toY;// gameMap.CorrectHeightPointToGridPoint((int)toY);

                if (newToX != toX || newToY != toY)
                {
                    toX = newToX;
                    toY = newToY;
                }

                bool sendToSelf = false;
                sendToSelf = (oldToX != toX) || (oldToY != toY);

                int oldX = client.PosX;
                int oldY = client.PosY;

                client.PosX = toX;
                client.PosY = toY;
                client.RoleDirection = direction;
                client.ReportPosTicks = 0;

                if (oldX != toX || oldY != toY)
                {
                    //将精灵放入格子
                    if (!GameManager.MapGridMgr.DictGrids[client.MapCode].MoveObject(oldX, oldY, client.PosX, client.PosY, client))
                    {
                        //LogManager.WriteLog(LogTypes.Warning, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.RoleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }

                /// 当前正在做的动作
                client.CurrentAction = (int)GameServer.KiemThe.Entities.KE_NPC_DOING.do_stand;

                /// 移动的速度
                client.MoveSpeed = 1.0;

                /// 移动的目的地坐标点
                client.DestPoint = new Point(toX, toY);

                //通知其他人自己开始移动
                //GameManager.ClientMgr.NotifyOthersMyMovingEnd(tcpMgr.MySocketListener, pool, client, mapCode, (int)GActions.Stand, toX, toY, direction, 0, sendToSelf);

                /// 玩家进行了移动
                if (GameManager.Update9GridUsingNewMode <= 0)
                {
                    ClientManager.DoSpriteMapGridMove(client);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// Gói tin từ Client gửi lên Server thông báo đối tượng ngừng di chuyển
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteStopMoveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SpriteStopMove cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<SpriteStopMove>(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                int roleID = cmdData.RoleID;
                int posX = cmdData.PosX;
                int posY = cmdData.PosY;
                long stopTick = cmdData.StopTick;

                stopTick -= 50;

                /// Khoảng Delay trong quá trình gửi Packet từ Client lên
                long delayPacket = KTGlobal.GetCurrentTimeMilis() - stopTick;

                Console.WriteLine("Delay Packet = " + delayPacket);

                /// Nếu thời gian Delay trên ngưỡng cho phép
                if (delayPacket > KTGlobal.MaxClientPacketDelayAllowed)
                {
                    delayPacket = 0;
                }
                else if (delayPacket < 0)
                {
                    delayPacket = 0;
                }

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Nếu đang trong thời gian chờ thực hiện động tác xuất chiêu
                if (!KTGlobal.FinishedUseSkillAction(client, client.GetCurrentAttackSpeed()))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Dừng thực thi StoryBoard
                KTPlayerStoryBoard.Instance.Remove(client, true, delayPacket);

                /// Thông tin bản đồ hiện tại
                GameMap gameMap = GameManager.MapMgr.GetGameMap(client.CurrentMapCode);
                if (null == gameMap)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu vị trí đích dừng ở Client không thể đến được
                if (!Global.IsGridReachable(client.CurrentMapCode, posX / gameMap.MapGridWidth, posY / gameMap.MapGridHeight))
                {
                    Console.WriteLine("SPR_STOP_MOVE => pos not reachable");

                    posX = (int) client.CurrentPos.X;
                    posY = (int) client.CurrentPos.Y;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, posX, posY, (int) client.CurrentDir);
                }

                /// Kiểm tra vị trí hiện tại của người chơi và vị trí truyền về từ Client xem có hợp lệ không
                if (!Global.ValidateClientPosition(client, posX, posY))
                {
                    Console.WriteLine("SPR_STOP_MOVE => not valid pos");

                    posX = (int) client.CurrentPos.X;
                    posY = (int) client.CurrentPos.Y;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, posX, posY, (int) client.CurrentDir);
                }

                /// Cập nhật vị trí hiện tại cho Client
                client.CurrentPos = new Point(posX, posY);

                /// Gửi vị trí hiện tại cho các Client khác
                GameManager.ClientMgr.NotifyOthersStopMyMoving(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Thông báo cho người chơi khác thấy PET đang di chuyển
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMove2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 12)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int ownerRoleID = Convert.ToInt32(fields[0]);
                int toRoleID = Convert.ToInt32(fields[1]);
                int mapCode = Convert.ToInt32(fields[2]);
                int action = Convert.ToInt32(fields[3]);
                int toX = Convert.ToInt32(fields[4]);
                int toY = Convert.ToInt32(fields[5]);
                int extAction = Convert.ToInt32(fields[6]);
                int fromX = Convert.ToInt32(fields[7]);
                int fromY = Convert.ToInt32(fields[8]);
                long startMoveTicks = Convert.ToInt64(fields[9]);
                int roleType = Convert.ToInt32(fields[10]);
                String pathString = fields[11];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != ownerRoleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //必须是宠物或者卫兵才可以
                if (toRoleID < SpriteBaseIds.PetBaseId)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int biaoCheID = -1;
                BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
                if (null != biaoCheItem)
                {
                    biaoCheID = biaoCheItem.BiaoCheID;
                }

                //必须是拥有者的宠物或者镖车
                if (roleType == (int)GSpriteTypes.BiaoChe)
                {
                    if (null != biaoCheItem)
                    {
                        if (biaoCheItem.MapCode == mapCode)
                        {
                            biaoCheItem.PosX = fromX;
                            biaoCheItem.PosY = fromY;
                            biaoCheItem.ReportPosTicks = startMoveTicks;

                            //通知其他人自己开始移动(同一个地图才需要通知)
                            GameManager.ClientMgr.NotifyOthersToMoving(tcpMgr.MySocketListener, pool, null, mapCode, client.CopyMapID, toRoleID, startMoveTicks, biaoCheItem.PosX, biaoCheItem.PosY, action, toX, toY, (int)TCPGameServerCmds.CMD_SPR_MOVE, 0, pathString);
                        }
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Tick kiểm tra vị trí của Client và Server
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpritePosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SpritePositionData cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<SpritePositionData>(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                if (null == cmdData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Wrong packet params, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = cmdData.RoleID;
                int posX = cmdData.PosX;
                int posY = cmdData.PosY;

                /// Đối tượng người chơi tương ứng
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (GameManager.Update9GridUsingPosition > 0)
                {
                    ClientManager.DoSpriteMapGridMove(client, GameManager.MaxSlotOnPositionUpdate9GridsTicks);
                }

                /// Thông tin bản đồ hiện tại
                GameMap gameMap = GameManager.MapMgr.GetGameMap(client.CurrentMapCode);
                if (null == gameMap)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu đang di chuyển
                if (KTPlayerStoryBoard.Instance.HasStoryBoard(client))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu vị trí hiện tại ở Client không thể đến được
                if (!Global.IsGridReachable(client.CurrentMapCode, posX / gameMap.MapGridWidth, posY / gameMap.MapGridHeight))
                {
                    Console.WriteLine("SPR_POS => pos not reachable");

                    posX = (int) client.CurrentPos.X;
                    posY = (int) client.CurrentPos.Y;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, posX, posY, (int) client.CurrentDir);
                }

                /// Kiểm tra vị trí hiện tại của người chơi và vị trí truyền về từ Client xem có hợp lệ không
                if (!Global.ValidateClientPosition(client, posX, posY))
                {
                    Console.WriteLine("SPR_POS => not valid pos");

                    posX = (int) client.CurrentPos.X;
                    posY = (int) client.CurrentPos.Y;

                    /// Thay đổi vị trí hiện tại của Client
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, posX, posY, (int) client.CurrentDir);
                }


                /// Cập nhật vị trí hiện tại cho Client
                client.CurrentPos = new Point(posX, posY);
                client.ToPos = client.CurrentPos;
                //Console.WriteLine("Character {0} is doing {1}", client.RoleName, client.m_eDoing);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 开始通知服务器自己宠物当前的坐标位置(节省服务器端的计算量)
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpritePetPosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 7)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int ownerRoleID = Convert.ToInt32(fields[0]);
                int toRoleID = Convert.ToInt32(fields[1]);
                int mapCode = Convert.ToInt32(fields[2]);
                int toX = Convert.ToInt32(fields[3]);
                int toY = Convert.ToInt32(fields[4]);
                long currentPosTicks = Convert.ToInt64(fields[5]);
                int roleType = Convert.ToInt32(fields[6]);

                //更新当前的坐标位置
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != ownerRoleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), ownerRoleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //必须是宠物或者卫兵才可以
                if (toRoleID < SpriteBaseIds.PetBaseId)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int biaoCheID = -1;
                BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
                if (null != biaoCheItem)
                {
                    biaoCheID = biaoCheItem.BiaoCheID;
                }

            
                 if (roleType == (int)GSpriteTypes.BiaoChe)
                {
                    if (null != biaoCheItem)
                    {
                        if (biaoCheItem.MapCode == mapCode)
                        {
                            biaoCheItem.PosX = toX;
                            biaoCheItem.PosY = toY;
                            biaoCheItem.ReportPosTicks = currentPosTicks;

                            GameManager.MapGridMgr.DictGrids[biaoCheItem.MapCode].MoveObject(-1, -1, (int)biaoCheItem.PosX, (int)biaoCheItem.PosY, biaoCheItem);
                        }
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Thông báo cho đối tượng khác bản thân thay đổi động tác
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteActionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            //string cmdData = null;
            SpriteActionData cmdData = null;

            try
            {
                //cmdData = new UTF8Encoding().GetString(data, 0, count);
                cmdData = DataHelper.BytesToObject2<SpriteActionData>(data, 0, count, socket.m_Socket);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            ProtoChecker.Instance().Check<SpriteActionData>(data, 0, count, socket.m_Socket);

            try
            {
                //                 //解析用户名称和用户密码
                //                 string[] fields = cmdData.Split(':');
                //                 if (fields.Length != 11)
                //                 {
                //                     LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //                         (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //                     return TCPProcessCmdResults.RESULT_FAILED;
                //                 }

                if (null == cmdData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Wrong packet params, CMD={0}, Client={1}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //                 int roleID = Convert.ToInt32(fields[0]);
                //                 int mapCode = Convert.ToInt32(fields[1]);
                //                 int direction = Convert.ToInt32(fields[2]);
                //                 int action = Convert.ToInt32(fields[3]);
                //                 int toX = Convert.ToInt32(fields[4]);
                //                 int toY = Convert.ToInt32(fields[5]);
                //                 int targetX = Convert.ToInt32(fields[6]);
                //                 int targetY = Convert.ToInt32(fields[7]);
                //                 int yAngle = Convert.ToInt32(fields[8]);
                //                 int moveToX = Convert.ToInt32(fields[9]);
                //                 int moveToY = Convert.ToInt32(fields[10]);

                int roleID = cmdData.roleID;
                int mapCode = cmdData.mapCode;
                int direction = cmdData.direction;
                int action = cmdData.action;
                int toX = cmdData.toX;
                int toY = cmdData.toY;
                int targetX = cmdData.targetX;
                int targetY = cmdData.targetY;
                int yAngle = cmdData.yAngle;
                int moveToX = cmdData.moveToX;
                int moveToY = cmdData.moveToY;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //if (GameManager.TestGamePerformanceMode)
                //{
                //    GameMap gameMapTemp = GameManager.MapMgr.DictMaps[client.MapCode];
                //    if (gameMapTemp.InSafeRegionList(client.CurrentGrid))
                //    {
                //        return TCPProcessCmdResults.RESULT_OK;
                //    }
                //}

                // 冻结时不处理动作
                if (client.IsCanDoLogic())
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                GameMap gameMap = GameManager.MapMgr.DictMaps[client.MapCode];

                //截获toX, toY, 这里允许客户端自己处理
                bool resetPos = false;
                //Point lastPoint;
                //if (GameManager.ClientMgr.GetClientStoryboardLastPoint(client, out lastPoint))
                //{
                //    toX = gameMap.CorrectWidthPointToGridPoint((int)lastPoint.X);
                //    toY = gameMap.CorrectHeightPointToGridPoint((int)lastPoint.Y);

                //    GameManager.ClientMgr.StopClientStoryboard(client);
                //}
                //else
                {
                    //toX = gameMap.CorrectWidthPointToGridPoint(toX);
                    //toY = gameMap.CorrectHeightPointToGridPoint(toY);
                }

                //拦截MoveToX和moveToY的值
                if (moveToX > 0 && moveToY > 0)
                {
                    toX = moveToX;
                    toY = moveToY;

                    resetPos = true;
                }

                int oldX = 0, oldY = 0;

                // 先锁定
                oldX = client.PosX;
                oldY = client.PosY;

                if (mapCode != client.MapCode)
                {
                    //LogManager.WriteLog(LogTypes.RoleTrace, string.Format("Action:server={0},client={1}", client.MapCode, mapCode));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!Global.ValidateClientPosition(client, toX, toY))
                {
                    //LogManager.WriteLog(LogTypes.RoleTrace, string.Format("Attack2:toMapX={0},toMapY={1}", toX, toY));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.PosX = toX;
                client.PosY = toY;
                client.ReportPosTicks = 0;

                resetPos = (oldX != toX) || (oldY != toY);

                //重置服务器端位置
                if (resetPos)
                {
                    //将精灵放入格子
                    if (!GameManager.MapGridMgr.DictGrids[client.MapCode].MoveObject(oldX, oldY, toX, toY, client))
                    {
                        //LogManager.WriteLog(LogTypes.Warning, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.RoleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    /// 玩家进行了移动
                    //Global.GameClientMoveGrid(client);
                }

                client.RoleDirection = direction;

                //新扩展的角色的360度方向
                client.RoleYAngle = yAngle;

                int nOldAction = -1;
                nOldAction = client.CurrentAction;

                /// 当前正在做的动作
                client.CurrentAction = action;

                /*if (action >= (int)GActions.Wenhao)
                {
                    Global.EndMeditate(client);
                }*/

                //取消采集状态
                //if (action != (int)GActions.Collect)
                //    GameServer.Logic.CaiJiLogic.CancelCaiJiState(client);

                //2015-9-16消息流量优化,现在的客户端是不需要移动目标点的
                if (GameManager.FlagEnableHideFlags)
                {
                    cmdData.moveToX = 0;
                    cmdData.moveToY = 0;
                }

                //通知其他人自己开始做动作
                GameManager.ClientMgr.NotifyOthersMyAction(tcpMgr.MySocketListener, pool, client, roleID, mapCode, direction, action, toX, toY, targetX, targetY, yAngle, moveToX, moveToY, nID);

                /*string strcmd = "";
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", roleID, mapCode, direction, action, toX, toY, targetX, targetY);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;*/

                // 把Stand动作置回来 否则 ProcessSpriteLoadAlreadyCmd --- HandleGameClientLoaded  将导致客户端一直播Injured动作 [7/1/2014 LiaoWei]
                if (nOldAction == (int)GameServer.KiemThe.Entities.KE_NPC_DOING.do_stand && action == (int)GameServer.KiemThe.Entities.KE_NPC_DOING.do_hurt)
                    client.CurrentAction = (int)GameServer.KiemThe.Entities.KE_NPC_DOING.do_stand;

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 开始通知其他人(包括自己)旋转角度
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteChangeAngleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int direction = Convert.ToInt32(fields[1]);
                int yAngle = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 冻结时不处理动作
                if (client.IsCanDoLogic())
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                ////取消采集状态
                //GameServer.Logic.CaiJiLogic.CancelCaiJiState(client);

                client.RoleDirection = direction;

                //新扩展的角色的360度方向
                client.RoleYAngle = yAngle;

                //通知其他人自己开始做动作
                GameManager.ClientMgr.NotifyOthersChangeAngle(tcpMgr.MySocketListener, pool, client, roleID, direction, yAngle, nID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Thông báo Pet di chuyển cho đối tượng khác
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAction2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 10)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int ownerRoleID = Convert.ToInt32(fields[0]);
                int toRoleID = Convert.ToInt32(fields[1]);
                int mapCode = Convert.ToInt32(fields[2]);
                int direction = Convert.ToInt32(fields[3]);
                int action = Convert.ToInt32(fields[4]);
                int toX = Convert.ToInt32(fields[5]);
                int toY = Convert.ToInt32(fields[6]);
                int targetX = Convert.ToInt32(fields[7]);
                int targetY = Convert.ToInt32(fields[8]);
                int roleType = Convert.ToInt32(fields[9]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != ownerRoleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), ownerRoleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //必须是宠物或者卫兵才可以
                if (toRoleID < SpriteBaseIds.PetBaseId)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int biaoCheID = -1;
                BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
                if (null != biaoCheItem)
                {
                    biaoCheID = biaoCheItem.BiaoCheID;
                }

               if (roleType == (int)GSpriteTypes.BiaoChe)
                {
                    if (null != biaoCheItem)
                    {
                        biaoCheItem.PosX = toX;
                        biaoCheItem.PosY = toX;
                        biaoCheItem.ReportPosTicks = 0;
                        biaoCheItem.CurrentAction = action;
                        biaoCheItem.Direction = direction;

                        //通知其他人自己开始做动作
                        List<Object> listObjs = Global.GetAll9Clients(biaoCheItem);
                        GameManager.ClientMgr.NotifyOthersDoAction(tcpMgr.MySocketListener, pool, null, client.MapCode, client.CopyMapID, toRoleID, direction, action, toX, toY, targetX, targetY, (int)TCPGameServerCmds.CMD_SPR_ACTTION, listObjs);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 物理攻击敌人并计算和通知伤害
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAttackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            //string cmdData = null;
            SpriteAttackData cmdData = null;
            try
            {
                //cmdData = new UTF8Encoding().GetString(data, 0, count);

                cmdData = DataHelper.BytesToObject<SpriteAttackData>(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {


                if (null == cmdData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                int roleID = cmdData.roleID;
                int roleX = cmdData.roleX;
                int roleY = cmdData.roleY;
                int enemy = cmdData.enemy;
                int enemyX = cmdData.enemyX;
                int enemyY = cmdData.enemyY;
                int realEnemyX = cmdData.realEnemyX;
                int realEnemyY = cmdData.realEnemyY;
                int magicCode = cmdData.magicCode;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 如果血量为0 不能放技能 [7/23/2014 LiaoWei]
                if (client.m_CurrentLife <= 0)
                {
                    //LogManager.WriteLog(LogTypes.Error, string.Format("GameClient死亡还放技能, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断是否能够使用技能
                if (!Global.CanMapUseMagic(client, magicCode))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //if (GameManager.TestGamePerformanceMode)
                //{
                //    GameMap gameMapTemp = GameManager.MapMgr.DictMaps[client.MapCode];
                //    if (gameMapTemp.InSafeRegionList(client.CurrentGrid))
                //    {
                //        return TCPProcessCmdResults.RESULT_OK;
                //    }
                //}

               

                Global.EndMeditate(client);

                // 增加武器判断 [3/8/2014 LiaoWei]
                SystemXmlItem xmlMagic = null;
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(magicCode, out xmlMagic))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("未找到技能静态数据: Cmd={0}, RoleID={1}, skillID{2}", (TCPGameServerCmds)nID, client.RoleID, magicCode));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!SpriteAttack.CanUseMaigc(client, magicCode))
                {
                    //LogManager.WriteLog(LogTypes.Error, string.Format("玩家释放的技能和职业不匹配(外挂),RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode));
                    return TCPProcessCmdResults.RESULT_OK;
                }

              

                client.MoveAndActionNum++;

                GameMap gameMap = GameManager.MapMgr.DictMaps[client.MapCode];

                //截获toX, toY, 这里允许客户端自己处理
                //Point lastPoint;
                //if (GameManager.ClientMgr.GetClientStoryboardLastPoint(client, out lastPoint))
                {
                    //roleX = gameMap.CorrectWidthPointToGridPoint((int)lastPoint.X);
                    //roleY = gameMap.CorrectHeightPointToGridPoint((int)lastPoint.Y);

                    // 停止客户端故事版的移动
                    GameManager.ClientMgr.StopClientStoryboard(client);
                }
                //else
                {
                    // 找格子的中心点
                    roleX = gameMap.CorrectWidthPointToGridPoint(roleX);
                    roleY = gameMap.CorrectHeightPointToGridPoint(roleY);
                }

                int oldX = 0, oldY = 0;

                // 先锁定
                oldX = client.PosX;
                oldY = client.PosY;
                if (Math.Abs(roleX - oldX) > 500 || Math.Abs(roleY - oldY) > 500)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.PosX = roleX;
                client.PosY = roleY;
                client.ReportPosTicks = 0;

                //只有新旧位置不一样的时候，才需要格子变换
                if (oldX != roleX || oldY != roleY)
                {
                    //将精灵放入格子
                    if (!GameManager.MapGridMgr.DictGrids[client.MapCode].MoveObject(oldX, oldY, roleX, roleY, client))
                    {
                        //LogManager.WriteLog(LogTypes.Warning, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.RoleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    /// 玩家进行了移动
                    //Global.GameClientMoveGrid(client);
                }
                //如果是隐身或者GM隐身模式下，则拒绝执行                                  // 对魔剑士技能释放的检查 [XSea 2015/4/30]
                if (client.HideSelf > 0 || client.HideGM > 0 || !GameManager.MagicSwordMgr.CanUseMagicOfMagicSword(client, magicCode))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //取消采集状态
                GameServer.Logic.CaiJiLogic.CancelCaiJiState(client);

                if (!client.MyMagicCoolDownMgr.SkillCoolDown(magicCode))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //处理精灵攻击动作
                if (GameManager.FlagManyAttack) // 如果是多段攻击 目前看上去默认为多段
                {
                    SpriteAttack.ProcessAttack(client, enemy, enemyX, enemyY, realEnemyX, realEnemyY, magicCode, -1, 1.0);
                }
                else
                {
                    SpriteAttack.ProcessAttack(client, enemy, enemyX, enemyY, realEnemyX, realEnemyY, magicCode, 0, 1.0);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 攻击敌人前的数据通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMagicCodeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            //string cmdData = null;

            SpriteMagicCodeData cmdData = null;

            try
            {
                //cmdData = new UTF8Encoding().GetString(data, 0, count);
                cmdData = DataHelper.BytesToObject2<SpriteMagicCodeData>(data, 0, count, socket.m_Socket);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //                 //解析用户名称和用户密码
                //                 string[] fields = cmdData.Split(':');
                //                 if (fields.Length != 3)
                //                 {
                //                     LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //                         (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //                     return TCPProcessCmdResults.RESULT_FAILED;
                //                 }

                ProtoChecker.Instance().Check<SpriteMagicCodeData>(data, 0, count, socket.m_Socket);

                if (null == cmdData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = cmdData.roleID;
                int mapCode = cmdData.mapCode;
                int magicCode = cmdData.magicCode;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

             

                

                //如果是隐身或者GM隐身模式下，则拒绝执行                                   // 对魔剑士技能释放的检查 [XSea 2015/4/30]
                if (client.HideSelf > 0 || client.HideGM > 0 || !GameManager.MagicSwordMgr.CanUseMagicOfMagicSword(client, magicCode))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!client.MyMagicCoolDownMgr.SkillCoolDown(magicCode))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //判断是否能够使用技能

                if (!Global.CanMapUseMagic(client, magicCode))
                {
                    magicCode = -1;
                }

                if (!SpriteAttack.CanUseMaigc(client, magicCode))
                {
                    //LogManager.WriteLog(LogTypes.Error, string.Format("玩家释放的技能和职业不匹配(外挂),RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //通知其他人，自己开始准备攻击要准备的技能
                GameManager.ClientMgr.NotifyOthersMagicCode(tcpMgr.MySocketListener, pool, client, roleID, mapCode, magicCode, (int)TCPGameServerCmds.CMD_SPR_MAGICCODE);

                //                 string strcmd = "";
                //                 strcmd = string.Format("{0}:{1}:{2}", roleID, mapCode, magicCode);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data, 0, count, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 主角复活通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteRealiveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int posX = Convert.ToInt32(fields[1]);
                int posY = Convert.ToInt32(fields[2]);
                int direction = Convert.ToInt32(fields[3]);

                //LogManager.WriteLog(LogTypes.Error, string.Format("收到复活通知, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //如果当前是活着的(连续点击,已经复活过)
                if (client.m_CurrentLife > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //如果是超时机制复活，需要判断死亡时间是否超过特定时间
                if ((int)RoleReliveTypes.TimeWaiting == Global.GetRoleReliveType(client) ||
                    (int)RoleReliveTypes.TimeWaitingRandomAlive == Global.GetRoleReliveType(client))
                {
                    long elapseTicks = TimeUtil.NOW() - client.LastRoleDeadTicks;
                    if (elapseTicks / 1000 < Global.GetRoleReliveWaitingSecs(client))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("外挂复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, elapseTicks / 1000, Global.GetRoleReliveWaitingSecs(client)));
                        //return TCPProcessCmdResults.RESULT_FAILED;
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if ((int)RoleReliveTypes.TimeWaitingOrRelifeNow == Global.GetRoleReliveType(client))
                {
                    long elapseTicks = TimeUtil.NOW() - client.LastRoleDeadTicks;
                    if (elapseTicks / 1000 < Global.GetRoleReliveWaitingSecs(client))
                    {
                        //宽裕1秒用来容错,未到自动复活时间,则扣除需要的钻石
                        int needZuanShi = (int)GameManager.systemParamsList.GetParamValueIntByName("AngelTempleZuanshiRevive");
                        if (needZuanShi > 0 && !GameManager.ClientMgr.SubUserMoney(client, needZuanShi, "元宝复活等待时间"))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                StringUtil.substitute(Global.GetLang("您的钻石不够，无法立即复活")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                    posX = -1;
                    posY = -1;
                }
                else if ((int)RoleReliveTypes.CrystalCollectRelive == Global.GetRoleReliveType(client))
                {
                    long elapseTicks = TimeUtil.NOW() - client.LastRoleDeadTicks;
                    if (elapseTicks / 1000 < /*CaiJiLogic.DeadReliveTime*/Global.GetRoleReliveWaitingSecs(client))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("外挂水晶幻境复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, elapseTicks / 1000, CaiJiLogic.DeadReliveTime));
                        //return TCPProcessCmdResults.RESULT_FAILED;
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else if (posX < 0 || posY < 0)
                    {
                        if (elapseTicks / 1000 < /*CaiJiLogic.DeadReliveTime + */Global.GetRoleReliveWaitingSecs(client))
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("外挂水晶幻境回城复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, elapseTicks / 1000, CaiJiLogic.DeadReliveTime));
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }

                //如果是在皇城地图上
                if (Global.IsHuangChengMapCode(client.MapCode) || Global.IsHuangGongMapCode(client.MapCode))
                {
                    posX = -1;
                    posY = -1;

                    /*if (!Global.CanHuangChengAlive(client)) //如果不能在皇城内复活
                    {
                        int toMapCode = GameManager.MainMapCode;
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            int defaultBirthPosX = gameMap.DefaultBirthPosX;
                            int defaultBirthPosY = gameMap.DefaultBirthPosY;
                            int defaultBirthRadius = gameMap.BirthRadius;

                            Global.GetHuangChengMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);

                            //从配置根据地图取默认位置
                            Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                            posX = (int)newPos.X;
                            posY = (int)newPos.Y;

                            //角色复活
                            Global.ClientRealive(client, posX, posY, client.RoleDirection);

                            //马上通知切换地图
                            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, toMapCode);

                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                    else //直接原地复活
                    {
                        int toMapCode = Global.GetHuangChengMapCode();
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            int defaultBirthPosX = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosX;
                            int defaultBirthPosY = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosY;
                            int defaultBirthRadius = GameManager.MapMgr.DictMaps[toMapCode].BirthRadius;

                            Global.GetHuangChengMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);

                            //从配置根据地图取默认位置
                            Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                            posX = (int)newPos.X;
                            posY = (int)newPos.Y;

                            //角色复活
                            Global.ClientRealive(client, posX, posY, client.RoleDirection);

                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }*/
                }

                //如果玩家在炎黄战场内，则强行传送回本阵营复活点复活
                if (Global.IsBattleMap(client))
                {
                    int toMapCode = GameManager.BattleMgr.BattleMapCode;
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        client.m_CurrentLife = client.m_CurrentLifeMax;
                        client.m_CurrentMana = client.m_CurrentManaMax;

                        int defaultBirthPosX = gameMap.DefaultBirthPosX;
                        int defaultBirthPosY = gameMap.DefaultBirthPosY;
                        int defaultBirthRadius = gameMap.BirthRadius;

                        Global.GetBattleMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);

                        //从配置根据地图取默认位置
                        Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                        posX = (int)newPos.X;
                        posY = (int)newPos.Y;

                        //角色复活
                        Global.ClientRealive(client, posX, posY, client.RoleDirection);
                    }

                    //只要进入这个分支，强行返回 ok
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (LuoLanChengZhanManager.getInstance().ClientRelive(client))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                SceneUIClasses sceneType = Global.GetMapSceneType(client.MapCode);
                if (sceneType == SceneUIClasses.HuanYingSiYuan)
                {
                    if (HuanYingSiYuanManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.YongZheZhanChang)
                {
                    if (YongZheZhanChangManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.KingOfBattle)
                {
                    if (KingOfBattleManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.MoRiJudge)
                {
                    if (MoRiJudgeManager.Instance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.ElementWar)
                {
                    if (ElementWarManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.CopyWolf)
                {
                    if (CopyWolfManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.KuaFuBoss)
                {
                    if (KuaFuBossManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.LangHunLingYu)
                {
                    if (LangHunLingYuManager.getInstance().ClientRelive(client))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (sceneType == SceneUIClasses.CoupleArena)
                {
                    // Liên quan tới cưới
                }

                /// 是否是领地战地图
                if (Global.IsLingDiZhanMapCode(client))
                {
                    int toMapCode = client.MapCode;
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        client.m_CurrentLife = client.m_CurrentLifeMax;
                        client.m_CurrentMana = client.m_CurrentManaMax;

                        //随机点
                        Point newPos = Global.GetRandomPoint(ObjectTypes.OT_CLIENT, toMapCode);

                        posX = (int)newPos.X;
                        posY = (int)newPos.Y;

                        //角色复活
                        Global.ClientRealive(client, posX, posY, client.RoleDirection);
                    }

                    //只要进入这个分支，强行返回 ok
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //竞技场决斗赛死亡后，强制回城复活
                if (GameManager.ArenaBattleMgr.IsInArenaBattle(client))
                {
                    posX = -1;
                    posY = -1;
                }

                //如果是回城复活
                if (posX == -1 || posY == -1)
                {
                    // 复活改造 [3/19/2014 LiaoWei]
                    /*int toMapCode = GameManager.MainMapCode;
                    //if (client.MapCode == GameManager.DefaultMapCode) //新手村死亡后，回城复活，是回新手村得出生点，而不是扬州城
                    //某些地图回城复活不回主城，回本地图复活点
                    if (GameManager.systemParamsList.GetParamValueIntArrayByName("MainReliveCity").ToList<int>().IndexOf(client.MapCode) >= 0)
                    {
                        toMapCode = client.MapCode;
                    }*/
                    int toMapCode = -1;
                    toMapCode = Global.GetMapRealiveInfoByCode(client.MapCode);

                    // 保证能回到主城
                    if (toMapCode <= -1)
                    {
                        toMapCode = GameManager.MainMapCode;
                    }
                    else
                    {
                        if (toMapCode == 0 || GameManager.ArenaBattleMgr.IsInArenaBattle(client))
                            toMapCode = GameManager.MainMapCode;
                        else if (toMapCode == 1)
                            toMapCode = client.MapCode;
                    }

                    //现在没有坐牢机制
                    /*if (client.MapCode == Global.GetLaoFangMapCode()) //牢房中(死亡同时被传入牢房)死亡后，回城复活，是回牢房的得出生点，而不是扬州城
                    {
                        toMapCode = Global.GetLaoFangMapCode();
                    }*/

                    if (toMapCode >= 0)
                    {
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            int defaultBirthPosX = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosX;
                            int defaultBirthPosY = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosY;
                            int defaultBirthRadius = GameManager.MapMgr.DictMaps[toMapCode].BirthRadius;

                            //从配置根据地图取默认位置
                            Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                            posX = (int)newPos.X;
                            posY = (int)newPos.Y;

                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            client.MoveAndActionNum = 0;

                            //通知队友自己要复活
                            GameManager.ClientMgr.NotifyTeamRealive(tcpMgr.MySocketListener, pool, roleID, posX, posY, direction);

                            //马上通知切换地图---->这个函数每次调用前，如果地图未发生发变化，则直接通知其他人自己位置变动
                            //比如在扬州城死 回 扬州城复活，就是位置变化
                            if (toMapCode != client.MapCode)
                            {
                                //通知自己要复活
                                GameManager.ClientMgr.NotifyMySelfRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.RoleID, client.PosX, client.PosY, direction);

                                GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, posX, posY, -1, 1);
                            }
                            else
                            {
                                Global.ClientRealive(client, posX, posY, direction);
                                //NotifyMySelfRealive
                            }

                            //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知1, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知2, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

            
                if (posX >= 0 && posY >= 0)
                {
                    // 如果是VIP 先扣除VIP每日免费原地复活的次数 [3/28/2014 LiaoWei]
                    bool bContinue = false;
                    if (client.VipLevel > 0 && client.VipLevel <= (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                    {
                        int nAddNum = 0;
                        int[] nAddArry = null;
                        nAddArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPResurrectionAdd");

                        if (nAddArry != null && nAddArry.Length <= 13)
                        {
                            nAddNum = nAddArry[client.VipLevel];
                        }

                      
                    }

                    if (!bContinue)
                    {
                        GoodsData goodsData = Global.GetGoodsByID(client, Data.AliveGoodsID);
                        if (null == goodsData)
                        {
                            //自动扣除元宝购买===>如果用SubUserMoneyForGoods，必须保证Mall.xml配置正确的价格类型
                            //int retAuto = Global.SubUserYuanBaoForGoods(client, Data.AliveGoodsID, 1, "角色复活");

                            // 扣100钻石 [4/20/2014 LiaoWei]
                            if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, 10, "元宝复活"))
                            {
                                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                    StringUtil.substitute(Global.GetLang("您的钻石不够，无法原地复活")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);

                                //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知3, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        else //扣除用户的一个物品
                        {
                            //从用户物品中扣除消耗的数量
                            if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                            {
                                //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知4, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                    }

                    //角色原地复活
                    Global.ClientRealive(client, client.PosX, client.PosY, direction);
                    //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知5, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                }

                //LogManager.WriteLog(LogTypes.Error, string.Format("成功处理复活通知6, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// NPC左键点击通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteClickOnCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;
            /*
            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }*/

            try
            {/*
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mapCode = Convert.ToInt32(fields[1]);
                int npcID = Convert.ToInt32(fields[2]);
                int extensionID = Convert.ToInt32(fields[3]);*/

                ProtoChecker.Instance().Check<CS_ClickOn>(data, 0, count, socket.m_Socket);

                CS_ClickOn _clickOn = null;
                if (!CheckHelper.CheckTCPCmdHandle(socket, nID, data, count, out _clickOn))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = _clickOn.RoleId;
                int mapCode = _clickOn.MapCode;
                int npcID = _clickOn.NpcId;
                int extensionID = _clickOn.ExtId;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                NPCData npcData = new NPCData()
                {
                    MapCode = mapCode,
                    RoleID = roleID,
                    NPCID = npcID,
                    ExtensionID = extensionID,
                };

                SystemXmlItem systemNPC = null;
                if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
                    return TCPProcessCmdResults.RESULT_FAILED;   //错误的NPC

                //todo 应当验证NPC是否存在于指定地图，但目前这个FindNPC方法效率略低
                NPC npc = null;//NPCGeneralManager.FindNPC(mapCode, npcID);

                SceneUIClasses sceneType = Global.GetMapSceneType(mapCode);
                ProcessClickOnNpcEventObject eventObject = new ProcessClickOnNpcEventObject(client, npc, npcID, extensionID);
                if (!GlobalEventSource4Scene.getInstance().fireEvent(eventObject, (int)sceneType) && eventObject.Handled)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (sceneType == SceneUIClasses.LuoLanChengZhan)
                {
                    if (LuoLanChengZhanManager.getInstance().OnSpriteClickOnNpc(client, npcID, extensionID))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                //获取npc上挂载的任务数据
                GlobalNew.GetNpcTaskData(client, extensionID, npcData);

                //获取npc上挂载的功能数据
                GlobalNew.GetNpcFunctionData(client, extensionID, npcData, systemNPC);

                if (null != npcData.OperationIDs)
                {
                    if (npcData.OperationIDs.Contains((int)FilterNPCOperationIDs.OpenPortableBag))
                    {
                        npc = NPCGeneralManager.FindNPC(mapCode, extensionID);
                        if (null != npc)
                        {
                            if (npc.MapCode == client.MapCode)
                            {
                                if (Global.GetTwoPointDistanceSquare(npc.CurrentPos, client.CurrentPos) < 900 * 900)
                                {
                                    client.OpenPortableBagPoint = client.CurrentPos;
                                }
                            }
                        }
                    }
                }

                //处理任务
                ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.Talk);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 接受新任务通讯事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNewTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int npcID = Convert.ToInt32(fields[1]);
                int taskID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// 角色接受新的任务
                TCPProcessCmdResults result = Global.TakeNewTask(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, client, roleID, taskID, npcID, out tcpOutPacket);

                //特殊处理新手剧情副本中的水晶棺材的刷新
                if (TCPProcessCmdResults.RESULT_OK == result)
                {
                    if (105 == taskID)
                    {
                        FreshPlayerCopySceneManager.AddShuiJingGuanCaiMonsters(client);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Xử lý gói tin gửi từ Client về Server thông báo đối tượng đã chuyển map thành công
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMapChangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SCMapChange cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<SCMapChange>(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds) nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                int roleID = cmdData.RoleID;
                int teleportID = cmdData.TeleportID;
                int newMapCode = cmdData.MapCode;
                int toNewMapX = cmdData.PosX;
                int toNewMapY = cmdData.PosY;

                /// Đối tượng gnười chơi tương ứng
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Dữ liệu trả lại Client
                SCMapChange scData = null;

                /// Đánh dấu không đợi chuyển Map nữa
                client.WaitingForChangeMap = false;

                /// Di chuyển trực tiếp không qua điểm truyền tống
                if (teleportID < 0)
                {
                    GameMap toGameMap = null;
                    /// Nếu ID bản đồ đích không tồn tại
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(newMapCode, out toGameMap))
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 1,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    int toLevel = toGameMap.MinLevel;
                    /// Nếu cấp độ không đủ vào bản đồ
                    if (client.m_Level < toLevel)
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 2,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                /// Di chuyển thông qua điểm truyền tống
                else
                {
                    GameMap gameMap = null;
                    /// Nếu ID bản đồ đang đứng không tồn tại
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(client.MapCode, out gameMap))
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 0,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    MapTeleport mapTeleport = null;
                    /// Nếu cổng Teleport không tồn tại
                    if (!gameMap.MapTeleportDict.TryGetValue(teleportID, out mapTeleport))
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 3,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameMap toGameMap = null;
                    /// Nếu bản đồ đích không tồn tại
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(mapTeleport.ToMapID, out toGameMap))
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 1,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    int toLevel = toGameMap.MinLevel;
                    /// Nếu cấp độ không đủ vào bản đồ
                    if (client.m_Level < toLevel)
                    {
                        scData = new SCMapChange()
                        {
                            RoleID = client.RoleID,
                            ErrorCode = 2,
                        };
                        client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                /// Nếu dùng điểm truyền tống dịch chuyển đến vị trí trong cùng bản đồ
                if (teleportID >= 0 && client.MapCode == newMapCode)
                {
                    GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toNewMapX, toNewMapY, -1);

                    return TCPProcessCmdResults.RESULT_OK;
                }

                /// Nếu không thể dịch chuyển đến bản đồ tương ứng
                if (!Global.CanChangeMapCode(client, newMapCode))
                {
                    scData = new SCMapChange()
                    {
                        RoleID = client.RoleID,
                        ErrorCode = 4,
                    };
                    client.sendCmd((int) TCPGameServerCmds.CMD_SPR_MAPCHANGE, scData);

                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /// Nếu không thể chuyển bản đồ
                if (!GameManager.ClientMgr.ChangeMap(tcpMgr.MySocketListener, pool, client, teleportID, newMapCode, toNewMapX, toNewMapY, (int) client.CurrentDir, nID))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Change map faild, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Thiết lập vị trí đích đến
                client.ToPos = new Point(toNewMapX, toNewMapY);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// 精灵获取属性信息事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetAttrib2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取二级属性信息事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetAttribAllCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                // 获取用户二级属性
                double[] arrRoleAttAll = Global.GetRoleAttribute(client);
                byte[] byteArrRoleAttAll = DataHelper.ObjectToBytes<double[]>(arrRoleAttAll);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, byteArrRoleAttAll, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Mua 1 vật phẩm từ cửa hàng
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNPCBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //Độ dài gói tin gửi lên phải là 4
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // Id role
                int roleID = Convert.ToInt32(fields[0]);
                // ID vật phẩm
                int goodsID = Convert.ToInt32(fields[1]);
                // Số lượng
                int goodsNum = Convert.ToInt32(fields[2]);
                // ID cửa hàng
                int saleType = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (goodsNum <= 0 || goodsNum >= 10000)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("NPC购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsNum));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";


                SubRep _REP =  ShopManager.BuyItem(client, saleType, goodsID, goodsNum);


                if (_REP.IsOK)
                {
                    strcmd = "0:" + _REP.CountLess;
                }
                else
                {
                    strcmd = "-1:" + _REP.CountLess;
                }
                  
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
      

        /// <summary>
        /// Hàm bán vật phẩm vào NPC
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNPCSaleOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int goodsDbId1 = Convert.ToInt32(fields[1]);
                int goodsDbId2 = Convert.ToInt32(fields[2]);
                int goodsDbId3 = Convert.ToInt32(fields[3]);
                int goodsDbId4 = Convert.ToInt32(fields[4]);
                int goodsDbId5 = Convert.ToInt32(fields[5]);

                int price = 0;
                string strcmd = "";

                List<GoodsData> goodsDataList = new List<GoodsData>();

                if (goodsDbId1 > 0)
                {
                    GoodsData gd1 = Global.GetGoodsByDbID(client, goodsDbId1);
                    if (null == gd1)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    goodsDataList.Add(gd1);
                }

                if (goodsDbId2 > 0)
                {
                    GoodsData gd2 = Global.GetGoodsByDbID(client, goodsDbId2);
                    if (null == gd2)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    goodsDataList.Add(gd2);
                }

                if (goodsDbId3 > 0)
                {
                    GoodsData gd3 = Global.GetGoodsByDbID(client, goodsDbId3);
                    if (null == gd3)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    goodsDataList.Add(gd3);
                }

                if (goodsDbId4 > 0)
                {
                    GoodsData gd4 = Global.GetGoodsByDbID(client, goodsDbId4);
                    if (null == gd4)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    goodsDataList.Add(gd4);
                }

                if (goodsDbId5 > 0)
                {
                    GoodsData gd5 = Global.GetGoodsByDbID(client, goodsDbId5);
                    if (null == gd5)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    goodsDataList.Add(gd5);
                }

                //先扣除物品
                for (int i = 0; i < goodsDataList.Count; i++)
                {
               
                    if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsDataList[i], goodsDataList[i].GCount, false))
                    {
                        continue;
                    }

                 

                }

                //给用户加钱
                //更新用户的铜钱
                GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, price, "出售物品给NPC", false);

                GameManager.SystemServerEvents.AddEvent(string.Format("角色卖出物品获取金钱, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.Money1, price), EventLevels.Record);

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", 0, roleID, goodsDbId1, goodsDbId2, goodsDbId3, goodsDbId4, goodsDbId5, price);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵添加物品表事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAddGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                return TCPProcessCmdResults.RESULT_FAILED; //禁止客户端添加物品
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Packet thao tác với đồ đạc
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteModGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //Danh sách các thành phần
                string[] fields = cmdData.Split(':');
                if (fields.Length != 9)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
              
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.ModifyGoodsByCmdParams(client, cmdData);
            }
            catch (Exception ex)
            {
              
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
               
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵合并两个物品项事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMergeGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);
                int site = Convert.ToInt32(fields[2]);
                int goodsID = Convert.ToInt32(fields[3]);
                int otherId = Convert.ToInt32(fields[4]);
                int otherGoodsID = Convert.ToInt32(fields[5]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //判断物品是否存在?
                GoodsData goodsData1 = null;
                if (site == 0)
                {
                    goodsData1 = Global.GetGoodsByDbID(client, id);
                }
                else if (site == (int)SaleGoodsConsts.PortableGoodsID)
                {
                    goodsData1 = Global.GetPortableGoodsDataByDbID(client, id);
                }

                if (null == goodsData1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象1失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, id));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (goodsData1.GoodsID != goodsID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, id));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //判断物品是否存在?
                GoodsData goodsData2 = null;
                if (site == 0)
                {
                    goodsData2 = Global.GetGoodsByDbID(client, otherId);
                }
                else if (site == (int)SaleGoodsConsts.PortableGoodsID)
                {
                    goodsData2 = Global.GetPortableGoodsDataByDbID(client, otherId);
                }

                if (null == goodsData2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象2失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, otherId));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (goodsData2.GoodsID != otherGoodsID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, otherId));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //判断两个物品项是否同一个物品，是否可以叠加?
                if (goodsData1.GoodsID != goodsData2.GoodsID)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //判断两个物品项是否绑定状态相同
                if (goodsData1.Binding != goodsData2.Binding)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //判断两个物品项是否限时时间相同
                if (!Global.DateTimeEqual(goodsData1.Endtime, goodsData2.Endtime))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int gridNum = Global.GetGoodsGridNumByID(goodsID);

                //不做任何处理
                if (gridNum <= 1)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //不做任何处理
                if (goodsData1.GCount >= gridNum)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int usingNum = Global.GetGoodsUsingNum(goodsID);

                //不做任何处理
                if (usingNum > 1)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int moveNum = Global.GMin(gridNum - goodsData1.GCount, goodsData2.GCount);

                string strcmd = "";

                //向DBServer请求修改物品2
                string[] dbFields = null;
                strcmd = Global.FormatUpdateDBGoodsStr(roleID, otherId, "*", "*", "*", "*", "*", "*", "*", goodsData2.GCount - moveNum, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越属性 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", -1, roleID, id, site, goodsID, goodsData1.GCount, otherId, otherGoodsID, goodsData2.GCount);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", -2, roleID, id, site, goodsID, goodsData1.GCount, otherId, otherGoodsID, goodsData2.GCount);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                goodsData2.GCount -= moveNum;

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData2, -moveNum, "合并减少");
                EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData2.GoodsID, goodsData2.Id, -moveNum, goodsData2.GCount, "合并减少");

                //修改内存中物品记录
                if (goodsData2.GCount <= 0)
                {
                    if (site == 0)
                    {
                        Global.RemoveGoodsData(client, goodsData2);
                    }
                    else if (site == (int)SaleGoodsConsts.PortableGoodsID)
                    {
                        Global.RemovePortableGoodsData(client, goodsData2);
                    }
                }

                //向DBServer请求修改物品
                dbFields = null;
                strcmd = Global.FormatUpdateDBGoodsStr(roleID, id, "*", "*", "*", "*", "*", "*", "*", goodsData1.GCount + moveNum, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", -3, roleID, id, site, goodsID, goodsData1.GCount, otherId, otherGoodsID, goodsData2.GCount);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", -4, roleID, id, site, goodsID, goodsData1.GCount, otherId, otherGoodsID, goodsData2.GCount);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                goodsData1.GCount += moveNum;

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData1, moveNum, "合并增加");
                EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData1.GoodsID, goodsData1.Id, moveNum, goodsData1.GCount, "合并增加");

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", 0, roleID, id, site, goodsID, goodsData1.GCount, otherId, otherGoodsID, goodsData2.GCount);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵拆分物品项事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSplitGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);
                int site = Convert.ToInt32(fields[2]);
                int goodsID = Convert.ToInt32(fields[3]);
                int newNum = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //根据参数命令拆分物品
                return Global.SplitGoodsByCmdParams(client, socket, nID, roleID, id, site, goodsID, newNum, true);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 完成任务通讯事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteCompTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int npcID = Convert.ToInt32(fields[1]);
                int taskID = Convert.ToInt32(fields[2]);
                int dbID = Convert.ToInt32(fields[3]);
                int useYuanBao = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //string strcmd = "";

                SystemXmlItem systemTaskItem = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTaskItem))
                //{
                //    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -200), pool, nID);
                //    // strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -200);
                //    // tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                TaskData taskData = Global.GetTaskDataByDbID(client, dbID);
                if (null == taskData || taskData.DoingTaskID != taskID) //如果任务不存在,或者taskID和dbID不匹配
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -210), pool, nID);
                    //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -210);
                    //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断任务是否已经完成，如果尚未完成，则提示错误
                if (!Global.JugeTaskComplete(taskID, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -220), pool, nID);
                    //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -220);
                    //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //预先判断是否是要奖励物品的任务
                //如果任务有物品奖励，判断是背包已经满了，如果是，则返回失败，提示用户先清空背包
                if (!Global.CanCompleteTaskByGridNum(tcpMgr.MySocketListener, pool, client, taskID))
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -2), pool, nID);
                    //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -2);
                    //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 由于引导而增加给随身仓库放奖励物品 本来是要在SystemTasks.xml加字段的 但考虑只有1个任务需要这样做 就在SystemParams.xml里写死任务和物品了 [4/9/2014 LiaoWei]
                if (taskID == Data.InsertAwardtPortableBagTaskID)
                {
                    if (client.PortableGoodsDataList != null && client.PortableGoodsDataList.Count >= client.MyPortableBagData.ExtGridNum)
                    {
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -2), pool, nID);
                        //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -2);
                        //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //判断任务是否有祝福点奖励，有的话判断是否在坐骑骑乘状态
                if (!Global.CanCompleteTaskByBlessPoint(client, systemTaskItem))
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -300), pool, nID);
                    //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -300);
                    //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int taskClass = systemTaskItem.GetIntValue("TaskClass");
                /*if (3 != taskClass) //只有猎杀日常允许元宝完成，这里做处理，防止外挂
                {
                    useYuanBao = 0;
                }*/

                useYuanBao = Math.Max(1, useYuanBao);
                useYuanBao = Math.Min(3, useYuanBao);

                if (useYuanBao > 1) //如果用户选择了使用元宝获取双倍的奖励，则判断元宝是否存在 => 含义变为0 正常奖励, 2 消耗绑定铜钱获取2倍经验奖励, 3 消耗绑定铜钱获取3倍经验奖励
                {
                    //判断是否需要元宝完成
                    /*int needYuanBao = GameManager.TaskAwardsMgr.FindNeedYuanBao(client, taskID);
                    if (needYuanBao <= 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1001);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //判断元宝是否足够
                    if (client.UserMoney < needYuanBao)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1002);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //扣除元宝
                    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, needYuanBao))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1003);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }*/
                    int needBindTongQian = 0;
                    int needZuanShi = 0;
                    if (2 == useYuanBao)
                    {
                        //needBindTongQian = (int)GameManager.systemParamsList.GetParamValueIntByName("BindTongQianTask2Awards");
                        needZuanShi = (int)GameManager.systemParamsList.GetParamValueIntByName("DoubleExp");
                    }
                    else if (3 == useYuanBao)
                    {
                        needBindTongQian = (int)GameManager.systemParamsList.GetParamValueIntByName("BindTongQianTask3Awards");
                    }

                    if (needZuanShi > 0)
                    {
                        if (!GameManager.ClientMgr.SubUserMoney(client, needZuanShi, "任务完成双倍经验"))
                        {
                            tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -1004), pool, nID);
                            //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1004);
                            //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    else if (needBindTongQian > 0)
                    {
                        //判断绑定铜钱是否足够
                        if (Global.GetTotalBindTongQianAndTongQianVal(client) < needBindTongQian)
                        {
                            tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -1002), pool, nID);
                            //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1002);
                            //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        //扣除绑定铜钱
                        //if (!GameManager.ClientMgr.SubMoney1(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, needBindTongQian))
                        if (!Global.SubBindTongQianAndTongQian(client, needBindTongQian, "任务完成多倍奖励"))
                        {
                            tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -1003), pool, nID);
                            //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1003);
                            //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    else
                    {
                        useYuanBao = 1;
                    }
                }

                int isMainTask = ((int)TaskClasses.MainTask == systemTaskItem.GetIntValue("TaskClass")) ? 1 : 0;
                byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", roleID, npcID, taskID, dbID, isMainTask));
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -3), pool, nID);
                    // strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -3);
                    //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                //解析客户端的指令
                string[] fieldsData = strData.Split(':');

                // strcmd = "";
                if (fieldsData.Length < 3 || fieldsData[2] == "-1") //添加出错
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -1), pool, nID);
                    //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1);
                }
                else
                {
                    //如果任务已经顺利完成，则根据任务的奖励给予用户
                    if (ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, npcID, -1, taskID, dbID, false, (double)useYuanBao))
                    {
                        //更新主线任务ID
                        if (isMainTask > 0 && taskID > client.MainTaskID)
                        {
                            client.MainTaskID = taskID;
                            //刷新那些需要根据任务开启的功能  add by tanglong 14/11/27
                            GlobalNew.RefreshGongNeng(client);
                        }


                      
                        // 完成主线任务成就 [8/5/2014 LiaoWei]
                        if (isMainTask > 0)
                        {
                            ChengJiuManager.ProcessCompleteMainTaskForChengJiu(client, taskID);
                        }

                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, 0), pool, nID);
                        //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, 0);
                    }
                    else
                    {
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -1), pool, nID);
                        //strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, npcID, taskID, -1);
                    }

                }

                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取朋友列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetFriendsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                string cmdData = new UTF8Encoding().GetString(data, 0, count);
                string[] fields = cmdData.Split(':');
                if (fields.Length < 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Global.SafeConvertToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 添加朋友
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAddFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int dbID = Convert.ToInt32(fields[0]);
                int roleID = Convert.ToInt32(fields[1]);
                string otherName = fields[2];
                int friendType = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (friendType < 0 || friendType > 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("指令参数数值错误, CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // Giới hạn Gửi yêu cầu kết bạn liên tục
                if (CreateRoleLimitManager.Instance().AddFriendSlotTicks > 0 &&
                    TimeUtil.NOW() - client._AddFriendTicks[friendType] < CreateRoleLimitManager.Instance().AddFriendSlotTicks)
                {
                    // 返回错误信息
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("您操作过快，请稍后再试")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                client._AddFriendTicks[friendType] = TimeUtil.NOW();

                //添加好友/黑名单/仇人
                GameManager.ClientMgr.AddFriend(tcpMgr, tcpClientPool, pool, client, dbID, -1, otherName, friendType);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 删除朋友
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteRemoveFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int dbID = Convert.ToInt32(fields[0]);
                int roleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //删除好友、黑名单、仇人列表
                GameManager.ClientMgr.RemoveFriend(tcpMgr, tcpClientPool, pool, client, dbID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 掉落的物品包裹点击通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteClickOnGoodsPackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int autoID = Convert.ToInt32(fields[1]);
                int openState = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// 处理掉落物品的点击打开
                //GameManager.GoodsPackMgr.ProcessClickOnGoodsPack(tcpMgr.MySocketListener, pool, client, autoID, out tcpOutPacket, nID, openState);
                return TCPProcessCmdResults.RESULT_OK;
                //return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取掉落的物品包中的物品通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetThingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int autoID = Convert.ToInt32(fields[1]);
                int goodsDbID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// 处理掉落物品的获取
                //GameManager.GoodsPackMgr.ProcessGetThing(tcpMgr.MySocketListener, pool, client, autoID, goodsDbID);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 修改角色的PK模式
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteChangePKModeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int pkMode = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                client.PKMode = pkMode;

                //通知数据库修改
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEPKMODE_CMD,
                    cmdData,
                    null, client.ServerId);

                // PK模式变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersPKModeChanged(tcpMgr.MySocketListener, pool, client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取总的新的任务数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetNewTaskDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int oldPaoHuanTaskID3 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 3);
                if (oldPaoHuanTaskID3 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID3))
                    {
                        oldPaoHuanTaskID3 = -1;
                    }
                }

                int oldPaoHuanTaskID4 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 4);
                if (oldPaoHuanTaskID4 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID4))
                    {
                        oldPaoHuanTaskID4 = -1;
                    }
                }

                int oldPaoHuanTaskID5 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 5);
                if (oldPaoHuanTaskID5 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID5))
                    {
                        oldPaoHuanTaskID5 = -1;
                    }
                }

                int oldPaoHuanTaskID6 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 6);
                if (oldPaoHuanTaskID6 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID6))
                    {
                        oldPaoHuanTaskID6 = -1;
                    }
                }

                int oldPaoHuanTaskID7 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 7);
                if (oldPaoHuanTaskID7 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID7))
                    {
                        oldPaoHuanTaskID7 = -1;
                    }
                }

                //  任务改造 - 新增8号TaskClass 日常跑环任务  [12/5/2013 LiaoWei]
                int oldPaoHuanTaskID8 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 8);
                if (oldPaoHuanTaskID8 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID8))
                        oldPaoHuanTaskID8 = -1;
                }

                //讨伐任务
                int oldPaoHuanTaskID9 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 9);
                if (oldPaoHuanTaskID9 >= 0)
                {
                    //验证还是否能继续接
                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID9))
                        oldPaoHuanTaskID9 = -1;
                }

                List<int> paoHuanTaskIDList3 = new List<int>();
                List<int> paoHuanTaskIDList4 = new List<int>();
                List<int> paoHuanTaskIDList5 = new List<int>();
                List<int> paoHuanTaskIDList6 = new List<int>();
                List<int> paoHuanTaskIDList7 = new List<int>();
                List<int> paoHuanTaskIDList8 = new List<int>();  // 日常跑环任务 MU新增任务类型  [12/4/2013 LiaoWei]
                List<int> paoHuanTaskIDList9 = new List<int>();

                List<int> taskIdList = new List<int>();
                //foreach (var key in GameManager.SystemTasksMgr.SystemXmlItemDict.Keys)
                //{
                //    SystemXmlItem systemTask = GameManager.SystemTasksMgr.SystemXmlItemDict[key];
                //    int taskID = systemTask.GetIntValue("ID");
                //    if (-1 == taskID) continue;

                //    int taskClass = systemTask.GetIntValue("TaskClass");

                //    //如果是跑环任务，则跳过，后边单独处理
                //    if (taskClass >= (int)TaskClasses.CircleTaskStart && taskClass <= (int)TaskClasses.CircleTaskEnd) //如果是跑环任务，为什么不包含日常任务？
                //    {
                //        // 是否还能接受跑环任务
                //        bool canTaskPaoHuanTask = Global.CanTaskPaoHuanTask(client, taskClass);

                //        //判断当前是否还能接日跑环任务
                //        if (!canTaskPaoHuanTask)
                //        {
                //            continue;
                //        }
                //    }

                //    //判断是否是能接的新任务
                //    if (!Global.CanTakeNewTask(client, taskID, systemTask))
                //    {
                //        continue;
                //    }

                //    //如果是跑环任务，则跳过，后边单独处理
                //    if ((int)TaskClasses.LieshaTask == taskClass) //如果是跑环任务
                //    {
                //        //如果历史跑环任务ID不存在
                //        paoHuanTaskIDList3.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.WuxueTask == taskClass)
                //    {
                //        paoHuanTaskIDList4.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.JungongTask == taskClass)
                //    {
                //        paoHuanTaskIDList5.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.MozuTask == taskClass)
                //    {
                //        paoHuanTaskIDList6.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.BanghuiTask == taskClass)
                //    {
                //        paoHuanTaskIDList7.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.DailyTask == taskClass)
                //    {
                //        paoHuanTaskIDList8.Add(taskID);
                //        continue;
                //    }
                //    else if ((int)TaskClasses.TaofaTask == taskClass)
                //    {
                //        paoHuanTaskIDList9.Add(taskID);
                //        continue;
                //    }

                //    taskIdList.Add(taskID);
                //}

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID3)
                {
                    taskIdList.Add(oldPaoHuanTaskID3);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList3.Count > 0)
                    {
                        int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList3.Count);
                        oldPaoHuanTaskID3 = paoHuanTaskIDList3[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID3);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 3, oldPaoHuanTaskID3);
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID4)
                {
                    taskIdList.Add(oldPaoHuanTaskID4);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList4.Count > 0)
                    {
                        int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList4.Count);
                        oldPaoHuanTaskID4 = paoHuanTaskIDList4[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID4);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 4, oldPaoHuanTaskID4);
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID5)
                {
                    taskIdList.Add(oldPaoHuanTaskID5);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList5.Count > 0)
                    {
                        int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList5.Count);
                        oldPaoHuanTaskID5 = paoHuanTaskIDList5[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID5);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 5, oldPaoHuanTaskID5);
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID6)
                {
                    taskIdList.Add(oldPaoHuanTaskID6);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList6.Count > 0)
                    {
                        int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList6.Count);
                        oldPaoHuanTaskID6 = paoHuanTaskIDList6[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID6);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 6, oldPaoHuanTaskID6);
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID7)
                {
                    taskIdList.Add(oldPaoHuanTaskID7);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList7.Count > 0)
                    {
                        int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList7.Count);
                        oldPaoHuanTaskID7 = paoHuanTaskIDList7[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID7);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 7, oldPaoHuanTaskID7);
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID8)
                {
                    taskIdList.Add(oldPaoHuanTaskID8);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList8.Count > 0)
                    {
                        /*int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList8.Count);
                        oldPaoHuanTaskID7 = paoHuanTaskIDList8[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID8);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 8, oldPaoHuanTaskID8);*/
                        int nTaskID = Global.GetDailyCircleTaskIDBaseChangeLifeLev(client);
                        if (nTaskID != -1)
                        {
                            oldPaoHuanTaskID8 = nTaskID;
                            taskIdList.Add(oldPaoHuanTaskID8);

                            PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 8, oldPaoHuanTaskID8);
                        }
                    }
                }

                //如果跑环的历史ID不为空
                if (-1 != oldPaoHuanTaskID9)
                {
                    taskIdList.Add(oldPaoHuanTaskID9);
                }
                else
                {
                    //如果有跑环任务
                    if (paoHuanTaskIDList9.Count > 0)
                    {
                        /*int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList8.Count);
                        oldPaoHuanTaskID7 = paoHuanTaskIDList8[randIndex];
                        taskIdList.Add(oldPaoHuanTaskID8);

                        PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, 8, oldPaoHuanTaskID8);*/
                        int nTaskID = Global.GetTaofaTaskIDBaseChangeLifeLev(client);
                        if (nTaskID != -1)
                        {
                            oldPaoHuanTaskID9 = nTaskID;
                            taskIdList.Add(oldPaoHuanTaskID9);

                            PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.RoleID, (int)TaskClasses.TaofaTask, oldPaoHuanTaskID9);
                        }
                    }
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(taskIdList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 放弃正在做的任务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAbandonTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int dbID = Convert.ToInt32(fields[1]);
                int taskID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                bool b = Global.CancelTask(client, dbID, taskID);
                if (b) strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, dbID, taskID, 0);
                else strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, dbID, taskID, -1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端发送的修改任务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteModTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int dbID = Convert.ToInt32(fields[1]);
                int taskID = Convert.ToInt32(fields[2]);
                int focus = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //添加到角色的列表中
                if (null != client.TaskDataList)
                {
                    TaskData taskData = Global.GetTaskData(client, taskID);
                    if (null != taskData)
                    {
                        if (focus > 0)
                        {
                            if (Global.GetFocusTaskCount(client) < Data.TaskMaxFocusCount)
                            {
                                taskData.DoingTaskFocus = focus;

                                //异步写数据库，更新任务
                                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATETASK_CMD,
                                    string.Format("{0}:{1}:{2}:{3}:{4}:{5}",
                                    client.RoleID,
                                    taskData.DoingTaskID,
                                    taskData.DbID,
                                    focus,
                                    "*",
                                    "*"),
                                    null, client.ServerId);

                                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", dbID, taskID,
                                    taskData.DoingTaskVal1,
                                    taskData.DoingTaskVal2,
                                    focus);
                            }
                            else
                            {
                                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", dbID, taskID,
                                    taskData.DoingTaskVal1,
                                    taskData.DoingTaskVal2,
                                    0);
                            }
                        }
                        else
                        {
                            taskData.DoingTaskFocus = focus;

                            //异步写数据库，更新任务
                            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATETASK_CMD,
                                string.Format("{0}:{1}:{2}:{3}:{4}:{5}",
                                client.RoleID,
                                taskData.DoingTaskID,
                                taskData.DbID,
                                focus,
                                "*",
                                "*"),
                                null, client.ServerId);

                            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", dbID, taskID,
                                taskData.DoingTaskVal1,
                                taskData.DoingTaskVal2,
                                focus);
                        }
                    }
                }

                if ("" != strcmd)
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Nhận gói tin thông báo người chơi thực hiện Chat
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteChatCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SpriteChat cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<SpriteChat>(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.RoleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Kênh chat
                ChatChannel channel = (ChatChannel) cmdData.Channel;
                /// Nội dung chat
                string content = cmdData.Content;

                /// Nếu bị cấm Chat
                if (client.BanChat > 0)
                {
                    string strinfo = "Xin lỗi, bạn đang bị hạn chế Chat, hãy gửi yêu cầu giải trình lên hỗ trợ để được tư vấn giải thích.";
                    GameManager.ClientMgr.SendDefaultTypeChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                /// Nếu không thể thực hiện Chat lúc này
                else if (!client.CanChat(channel, out long tickLeft))
                {
                    string strinfo = "Bạn hiện không thể gửi tin nhắn, hãy liên lạc với hỗ trợ viên để được xử lý.";
                    if (tickLeft != 99999999)
                    {
                        strinfo = string.Format("Hiện không thể gửi tin nhắn ở kênh này, cần chờ sau <color=yellow>{0}</color> nữa mới có thể tiếp tục gửi.", KTGlobal.DisplayTime(tickLeft / 1000f));
                    }
                    GameManager.ClientMgr.SendDefaultTypeChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                /// Nếu không có nội dung Chat
                else if (string.IsNullOrEmpty(content))
                {
                    string strinfo = "Không thể gửi tin nhắn khi không có nội dung.";
                    GameManager.ClientMgr.SendDefaultTypeChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                Console.WriteLine("TODO: Check EQUIP INFO sticked.");
                Console.WriteLine("Chat: Channel = {0}, Content = {1}", channel, content);

                switch (cmdData.Channel)
                {
                    case (int) ChatChannel.Near:
                    {
                        content = KTChatFilter.Filter(content);
                        List<KPlayer> playersAround = KTLogic.GetNearByObjectsAtPos<KPlayer>(client.CurrentMapCode, new UnityEngine.Vector2((int) client.CurrentPos.X, (int) client.CurrentPos.Y), 1000);
                        foreach (KPlayer player in playersAround)
                        {
                            GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);
                        }
                        client.RecordChatTick(channel);
                        break;
                    }
                    case (int) ChatChannel.Team:
                    {
                        content = KTChatFilter.Filter(content);
                        List<KPlayer> teammates = client.Teammates;
                        foreach (KPlayer player in teammates)
                        {
                            GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);
                        }
                        client.RecordChatTick(channel);
                        break;
                    }
                    case (int) ChatChannel.Faction:
                    {
                        content = KTChatFilter.Filter(content);
                        List<KPlayer> factionMates = client.FactionMates;
                        foreach (KPlayer player in factionMates)
                        {
                            GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);
                        }
                        client.RecordChatTick(channel);
                        break;
                    }
                    case (int) ChatChannel.Guild:
                    {
                        content = KTChatFilter.Filter(content);
                        List<KPlayer> guildMates = client.Guildmates;
                        foreach (KPlayer player in guildMates)
                        {
                            GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);
                        }
                        client.RecordChatTick(channel);
                        break;
                    }
                    case (int) ChatChannel.Global:
                    {
                        content = KTChatFilter.Filter(content);
                        int idx = 0;
                        KPlayer player = null;

                        while ((player = GameManager.ClientMgr.GetNextClient(ref idx)) != null)
                        {
                            GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);
                        }
                        client.RecordChatTick(channel);
                        break;
                    }
                    case (int) ChatChannel.Private:
                    {
                        content = KTChatFilter.Filter(content);
                        string playerName = cmdData.ToRoleName;
                        int roleID = RoleName2IDs.FindRoleIDByName(playerName);
                        if (roleID == -1)
                        {
                            string strinfo = "Người chơi không tồn tại hoặc đã rời mạng, không thể gửi tin nhắn.";
                            GameManager.ClientMgr.SendDefaultTypeChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                            break;
                        }

                        KPlayer player = GameManager.ClientMgr.FindClient(roleID);
                        if (player == null)
                        {
                            string strinfo = "Người chơi không tồn tại hoặc đã rời mạng, không thể gửi tin nhắn.";
                            GameManager.ClientMgr.SendDefaultTypeChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                            break;
                        }

                        GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client, player, content, channel);
                        GameManager.ClientMgr.SendChatMessage(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, player, client, player, content, channel);

                        client.RecordChatTick(channel);
                        break;
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Xử lý gói tin đối tượng sử dụng vật phẩm
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUseGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                ProtoChecker.Instance().Check<CS_SprUseGoods>(data, 0, count, socket.m_Socket);

                CS_SprUseGoods _useGoods = null;
                if (!CheckHelper.CheckTCPCmdHandle(socket, nID, data, count, out _useGoods))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int roleID = _useGoods.RoleId;
                int id = _useGoods.DbId;
                int goodsID = _useGoods.GoodsId;
                int nUseNum = _useGoods.UseNum;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Nếu số lượng sử dụng < 0
                if (nUseNum <= 0)
                {
                    nUseNum = 1;
                }

                /*
                /// COOLDOWN vật phẩm ĐỂ LẠI CHECK SAU
                if (!client.MyGoodsCoolDownMgr.GoodsCoolDown(goodsID))
                {
                    //GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("物品的CD时间未结束")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                //加入CD控制
                client.MyGoodsCoolDownMgr.AddGoodsCoolDown(client, goodsID);
                */

                /// Thông tin vật phẩm tương ứng
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (goodsData == null)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Use item error, item not FOUND, CMD={0}, Client={1}, RoleID={2}, DbID={3}, ItemID={4}", (TCPGameServerCmds) nID, Global.GetSocketRemoteEndPoint(socket), roleID, id, goodsID));
                    PlayerManager.ShowNotification(client, "Vật phẩm không tồn tại!");
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// Nếu số lượng vật phẩm > 0
                if (goodsData.GoodsID == goodsID && goodsData.GCount > 0)
                {
                    ItemManager.UseItem(client, goodsData);
                }
                else
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Use item error, item not exist in bag, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    PlayerManager.ShowNotification(client, "Vật phẩm không tồn tại!");
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵锻造装备事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            /*
             * modify by chenjingui. 2015.05.06 重构代码，引入替换材料功能，比较繁杂，如有问题找我
             */

            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 强化改造  [12/16/2013 LiaoWei]
                // 消息字段 1.roleid 2.需要强化的物品id 3.保护符 4.幸运宝石(策划文档里面没有 但是仍然保留它 防止以后要增加)

                int roleID = Convert.ToInt32(fields[0]);   // 角色ID
                int id = Convert.ToInt32(fields[1]);   // 需要强化的物品id
                int nProtectStone = Convert.ToInt32(fields[2]);   // 保护石id, 神佑晶石，是否使用神佑晶石由客户端发过来，chenjingui
                int nLuckyStone = Convert.ToInt32(fields[3]);   // 幸运宝石id
                int firstUseBinding = Convert.ToInt32(fields[4]);   // 是否先扣除绑定物品

                //int rockGoodsID = Convert.ToInt32(fields[2]);//强化石ID，最好传递强化石dbid，根据要求，服务器自行判断并扣除相应物品，兼容旧协议，保留这个字段
                //int luckyGoodsID = Convert.ToInt32(fields[3]);//神佑符修改成幸运符
                //int luckyNum = Convert.ToInt32(fields[4]);//幸运符

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /* 强化规则:                                            -- 这个规则说明是旧的 MU的可能不同 请别太当真 add by liaowei 2013.12.16
                 * a)	不同强化等级的装备进行强化消耗不同级别的强化石
                   b)	装备强化失败后不降低当前装备的强化等级
                   c)	装备强化可使用幸运符提升强化成功率，幸运符采用拖拽放入的方式实现，每次强化只能使用一个幸运符，但有多种不同概率的幸运符道具可供使用
                 * d)   强化过程中客户端不能自行选择强化石，由服务器统一先扣除绑定的再扣除非绑定的强化石
                 */

                string strcmd = "";


                // 从物品包中获取要锻造的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData || goodsData.GCount <= 0) //没有找到物品
                {
                    
                }

                int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);

             

                // 类型检测
                if (nCategories < (int)ItemCategories.TouKui || (nCategories > (int)ItemCategories.JieZhi && nCategories
                    < (int)ItemCategories.WuQi_Jian) || nCategories > (int)ItemCategories.WuQi_NuJianTong)  //只有0-6、11-21的道具可以被强化、追加、洗炼、传承
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -8, roleID, id, 0, 0);                        // 该物品不能强化
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检测强化等级
                bool forgeLevelLimit = false;
                if (goodsData.Forge_level >= Global.MaxForgeLevel)
                {
                    forgeLevelLimit = true;
                }
                else if (Global.ForgeMaxOpen == 2)
                {
                    DateTime now = TimeUtil.NowDateTime();
                    if (goodsData.Forge_level >= Global.ForgeLevelOpen && (now < Global.ForgeMaxOpenStartTime || now > Global.ForgeMaxOpenEndTime))
                    {
                        forgeLevelLimit = true;
                    }
                }
                else if (Global.ForgeMaxOpen != 1)
                {
                    if (goodsData.Forge_level >= Global.ForgeLevelOpen)
                    {
                        forgeLevelLimit = true;
                    }
                }

                if (forgeLevelLimit)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -4, roleID, id, 0, 0);        // 强化等级已到最高级
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果使用幸运符，判断物品是否幸运符
                if (nLuckyStone > 0 && Global.GetLuckyGoodsIndex(nLuckyStone) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                client._ReplaceExtArg.Reset();
                client._ReplaceExtArg.CurrEquipQiangHuaLevel = goodsData.Forge_level;
                if (GoodsReplaceManager.Instance().NeedCheckSuit(nCategories))
                {
                    client._ReplaceExtArg.CurrEquipSuit = Global.GetEquipGoodsSuitID(goodsData.GoodsID);
                }

                // 祝福晶石、灵魂晶石、玛雅晶石、神佑晶石 都能够被替换
                List<Tuple<GoodsReplaceResult, int>> eachGoodsReplaceInfo = new List<Tuple<GoodsReplaceResult, int>>();

                // 检测保护石，神佑晶石
                if (nProtectStone > 0)
                {
                    // 是否始终使用神佑晶石，由客户端发过来，如果使用神佑晶石，那么也对神佑晶石进行替换
                    if (Data.ForgeProtectStoneGoodsID == null
                        || Data.ForgeProtectStoneGoodsID.Length <= goodsData.Forge_level + 1
                        || Data.ForgeProtectStoneGoodsID[goodsData.Forge_level + 1] != nProtectStone)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, id, 0, 0);        // 保护石错误
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (Data.ForgeProtectStoneGoodsNum == null
                        || Data.ForgeProtectStoneGoodsNum.Length <= goodsData.Forge_level + 1)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6, roleID, id, 0, 0);        // 配置错误
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    int iNeedProtectStoneCnt = Data.ForgeProtectStoneGoodsNum[goodsData.Forge_level + 1];
                    GoodsReplaceResult protectStoneReplaceresult = GoodsReplaceManager.Instance().GetReplaceResult(client, nProtectStone);
                    if (protectStoneReplaceresult == null || protectStoneReplaceresult.TotalGoodsCnt() < iNeedProtectStoneCnt)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -22, roleID, id, 0, 0);        // 保护石数量不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(protectStoneReplaceresult, iNeedProtectStoneCnt));
                }

                // 对消耗的材料进行替换
                string strNeedGoodsID = Data.ForgeNeedGoodsID[goodsData.Forge_level + 1];
                string strNeedGoodsNum = Data.ForgeNeedGoodsNum[goodsData.Forge_level + 1];
                string[] strID = strNeedGoodsID.Split(',');
                string[] strNum = strNeedGoodsNum.Split(',');

                if (strID.Length != strNum.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6, roleID, id, 0, 0);        // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                for (int i = 0; i < strID.Length; ++i)
                {
                    int needGoodsID = 0;
                    int needGoodsCnt = 0;
                    if (!int.TryParse(strID[i], out needGoodsID) || !int.TryParse(strNum[i], out needGoodsCnt))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6, roleID, id, 0, 0);        // 配置错误
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GoodsReplaceResult materialReplaceRet = GoodsReplaceManager.Instance().GetReplaceResult(client, needGoodsID);
                    if (materialReplaceRet == null || materialReplaceRet.TotalGoodsCnt() < needGoodsCnt)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -15, roleID, id, 0, 0);   // 所需物品数量不足
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(materialReplaceRet, needGoodsCnt));
                }

                // 每个物品按顺序需要消耗多少个
                List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>> realCostList = new List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>>();
                foreach (var tuple in eachGoodsReplaceInfo)
                {
                    GoodsReplaceResult replace = tuple.Item1;
                    int costCnt = tuple.Item2;
                    List<GoodsReplaceResult.ReplaceItem> costOrder = new List<GoodsReplaceResult.ReplaceItem>();
                    if (firstUseBinding == 1)
                    {
                        // 优先使用绑定材料
                        // 1：替换后的绑定材料
                        // 2：原始的绑定材料
                        // 3：替换后的非绑定材料
                        // 4：原始的非绑定材料
                        costOrder.AddRange(replace.BindList);
                        costOrder.Add(replace.OriginBindGoods);
                        costOrder.AddRange(replace.UnBindList);
                        costOrder.Add(replace.OriginUnBindGoods);
                    }
                    else
                    {
                        // 优先使用非绑定材料
                        // 1：替换后的非绑定材料
                        // 2：原始的非绑定材料
                        // 3：替换后的绑定材料
                        // 4：原始的绑定材料
                        costOrder.AddRange(replace.UnBindList);
                        costOrder.Add(replace.OriginUnBindGoods);
                        costOrder.AddRange(replace.BindList);
                        costOrder.Add(replace.OriginBindGoods);
                    }

                    realCostList.Add(new Tuple<List<GoodsReplaceResult.ReplaceItem>, int>(costOrder, costCnt));
                }

                //读取所需银两
                int needYinLiang = Global.GetForgeNextLevelYinLiang(goodsData);
                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); //判断银两是否折半
                if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "强化装备"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, id, 0, 0);        // 钱不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;

                }

                // 我操，到这里，终于算是把替换列表给弄出来了，接下来就开始真正消耗了
                bool bRealUsedBinding = false;
                foreach (var each in realCostList)
                {
                    List<GoodsReplaceResult.ReplaceItem> itemList = each.Item1;
                    int stillNeedCnt = each.Item2;

                    foreach (var item in itemList)
                    {
                        if (item.GoodsCnt <= 0) continue;

                        int realCostCnt = Math.Min(item.GoodsCnt, stillNeedCnt);
                        if (realCostCnt <= 0) break;

                        bool usedBinding_just_placeholder = false, usedTimeLimited_just_placeholder = false;
                        if (item.IsBind)
                        {
                            bRealUsedBinding = true;
                            if (!GameManager.ClientMgr.NotifyUseBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt,
                                 false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder))
                            {
                                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -200, roleID, id, 0, 0);        // 物品扣除失败
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }
                        else
                        {
                            if (!GameManager.ClientMgr.NotifyUseNotBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt,
                                 false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder))
                            {
                                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -200, roleID, id, 0, 0);        // 物品扣除失败
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }

                        stillNeedCnt -= realCostCnt;
                    }
                }

                int oldUsing = goodsData.Using;
                //如果是佩戴在身上，则先脱下来
                if (goodsData.Using > 0)
                {
                    //先强迫修改为不使用装备，记住后边改回去
                    goodsData.Using = 0;

                }

                int luckValue = 0;
                if (Global.StartForge(client, goodsData, luckValue)) //锻造成功
                {
                    //物品的绑定不受消耗物品是否绑定的影响
                    goodsData.Forge_level += 1; //锻造级别加1
                    if (goodsData.Binding != 1)
                    { //非绑定物品的强化如果使用了绑定物品，那么该物品也变成绑定的
                        goodsData.Binding = bRealUsedBinding ? 1 : 0;
                    }
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 1, roleID, id, goodsData.Forge_level, goodsData.Binding);

                    //锻造成功(6级以上提示)
                    Global.BroadcastForgeOk(client, goodsData);

                    //成就处理 装备强化
                    ChengJiuManager.OnRoleEquipmentQiangHua(client, goodsData.Forge_level);

                    //成就处理 第一次强化
                    ChengJiuManager.OnFirstQiangHua(client);

                    // 七日活动 佩戴[1]个强化+[0]装备
                    SevenDayGoalEventObject forgePeidaiEv = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiForgeEquip);
                    GlobalEventSource.getInstance().fireEvent(forgePeidaiEv);

                    // 七日活动 强化等级最高的装备达到+[0]
                    SevenDayGoalEventObject forgeLevelEv = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ForgeEquipLevel);
                    forgeLevelEv.Arg1 = goodsData.Forge_level;
                    GlobalEventSource.getInstance().fireEvent(forgeLevelEv);
                }
                else //锻造失败
                {
                    bool nRet = true;
                    if (goodsData.Forge_level >= 6 && nProtectStone <= 0)
                    {
                        if (Global.ForgeProtectOpen <= 0 || goodsData.Forge_level != Global.ForgeProtectOpenLevel)
                        {
                            nRet = false;   // 如果删除了物品 下面就不要修改Forge_level了
                            goodsData.Forge_level -= 1;
                        }
                    }

                    if (nRet == false)
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -500, roleID, id, goodsData.Forge_level, goodsData.Binding);
                    else
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, id, goodsData.Forge_level, goodsData.Binding);
                }

                // 七日活动 进行[0]次强化  成功 失败 都算
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ForgeEquipTimes));

                //[bing] 刷新客户端活动叹号
                if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriStrengthen) == true)
                {
                    client._IconStateMgr.AddFlushIconState((ushort)ActivityTipTypes.JieRiActivity, client._IconStateMgr.IsAnyJieRiTipActived());
                    client._IconStateMgr.SendIconStateToClient(client);
                }

                //if(nRet)
                {
                    //修改装备的数据库
                    //向DBServer请求修改物品
                    string[] dbFields = null;
                    string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", goodsData.Forge_level, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", goodsData.Binding, "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                    TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                    if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                if (oldUsing != goodsData.Using)
                {
                    goodsData.Using = oldUsing;

                  
                }

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "强化");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "强化");

                // 每日活跃 [2/26/2014 LiaoWei]
                DailyActiveManager.ProcessDailyActiveEquipForge(client);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵天生洗练装备事件[装备天生洗练]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEquipBornIndexUpdateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);
                //天生激活石或者天缘石goodsID，其实如果不是dbid，goodsid不需要传，传递过来，还得进行合法性验证，为了和装备精锻等保持一致，保留这种协议方式
                int rockGoodsID = Convert.ToInt32(fields[2]);
                //是否自动购买消耗品,1自动购买，其他不自动购买
                bool canAutoBuy = (1 == Convert.ToInt32(fields[3])) ? true : false;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //从物品包中获取要洗炼的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -1, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品不在背包中，拒绝操作
                if (goodsData.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -4, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品被佩戴在身上, 拒绝操作===>佩戴唯一不能炼化
                /*if (goodsData.Using > 0) 
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -5, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                */

                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是否装备，装备才能洗炼
                if (category < (int)ItemCategories.TouKui || (category > (int)ItemCategories.JieZhi && category
                    < (int)ItemCategories.WuQi_Jian) || category > (int)ItemCategories.WuQi_NuJianTong)  //只有0-6、11-21的道具可以被强化、追加、洗炼、传承
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -100, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int[] bornNeedGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("TianshengJihuoGoodsID");
                //天生属性配置文件出错
                if (bornNeedGoodsArr.Length != 2)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -101, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //天生洗练需要的物品ID，默认使用
                int bornUpdateNeedGoodsID = bornNeedGoodsArr[0];//天生激活石

               

                //其实客户端不用传递rockGoodsID,传递过来了，就必须验证合法性
                if (bornUpdateNeedGoodsID != rockGoodsID)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -3, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //这儿代码仅仅保留，根据策划，是不需要银两的
                int needYinLiang = (int)GameManager.systemParamsList.GetParamValueIntByName("TianshengXilianMoney");

                //判断银两是否够【银两消耗减半期间只会消耗一半银两】
                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);

                if (needYinLiang < 0)
                {
                    needYinLiang = 0;
                }

                if (needYinLiang > 0 && needYinLiang > Global.GetTotalBindTongQianAndTongQianVal(client))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -31, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem destXmlItem = null;

                //返回洗练所需的参数
                if (!GameManager.systemEquipBornMgr.SystemXmlItemDict.TryGetValue(Global.GetTianShengParamsIndex(goodsData.GoodsID), out destXmlItem))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -2, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //天生激活值范围
                int minBornValue = destXmlItem.GetIntValue("MinBorn");
                int maxBornValue = destXmlItem.GetIntValue("MaxBorn");

                //判断天缘石是否足够
                int needGoodsNum = 1;//默认需要一个
                int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
                if (totalNum < needGoodsNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -6, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除银两===>不需要银两，配置文件既然配置了，兼容一下
                //if (needYinLiang > 0 && !GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang))
                if (needYinLiang > 0 && !Global.SubBindTongQianAndTongQian(client, needYinLiang, "洗练装备"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -61, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //扣除天缘石 或者 激活石
                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needGoodsNum, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -10, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //记录旧的洗炼值
                int goodsOldBornIndex =1;

                int goodsThisTimeUpdateBornIndex = Global.UpdateNewEquipBornValue(goodsData, minBornValue, maxBornValue);
                //随机处理天生属性
                if (goodsThisTimeUpdateBornIndex < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -12, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //修改装备的数据库
                //向DBServer请求修改物品
                string[] dbFields = null;
                string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", goodsData.Binding, "*",1, "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -13, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -14, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //成就相关处理 第一次洗练
                //ChengJiuManager.OnFirstXiLian(client);

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "装备天生洗练");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "装备天生洗练");

                //洗练成功提示【提示条件在这个函数内部判断】===>不再提示
                //Global.BroadcastEquipBornUpdateComleted(client, goodsData, goodsOldBornIndex);

                //最后三个参数依次是旧的天生属性，本次生成的天生属性，装备的最新天生属性
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", 1, roleID, id, goodsOldBornIndex, goodsThisTimeUpdateBornIndex,1, goodsData.Binding);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵装备分解事件[装备分解得到 强化石和 原始装备]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprEquipFenJieCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                    a)	分解的装备强化等级必须大于0
                    b)	分解后装备可获取的强化石和装备的强化等级相关联，如强化+2的装备，分解后可获得一、二品强石各一颗
                    c)	分解后装备的强化等级将置为0，但不删除该装备
                 */

                string strcmd = "";

                //从物品包中获取要分解的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品不在背包中，拒绝操作
                if (goodsData.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品被佩戴在身上, 拒绝操作===>佩戴唯一不能炼化
                /*if (goodsData.Using > 0) 
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -5, roleID, id, 0, 0, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                */

                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是否装备，装备才能分解
                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -3, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //装备强化等级小于0不能分离
                if (goodsData.Forge_level <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -4, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needBagSpaceNum = goodsData.Forge_level;
                //判断背包空间是否足够
                if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -5, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //强化石列表，这个配置主要用于装备强化，第0个索引总是0，一品对应索引1，二品对应索引2
                int[] qiangHuaRocksIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsIDs");

                //强化石列表，等级必须对
                if (goodsData.Forge_level > qiangHuaRocksIDs.Length - 1)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -51, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int[] needYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("QianghuashiFenliMoney");
                //银两消耗配置文件出错
                if (goodsData.Forge_level > needYinLiangArr.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -6, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断银两是否够【银两消耗减半期间只会消耗一半银两】
                int needYinLiang = needYinLiangArr[goodsData.Forge_level - 1];
                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);

                //分解必须消耗铜钱
                if (needYinLiang <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -7, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //铜钱不够
                if (needYinLiang > 0 && needYinLiang > Global.GetTotalBindTongQianAndTongQianVal(client))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -8, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除银两
                //if (needYinLiang > 0 && !GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang))
                if (needYinLiang > 0 && !Global.SubBindTongQianAndTongQian(client, needYinLiang, "装备分解"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -9, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int goodsForgeLevle = goodsData.Forge_level;

                //修改装备的数据库
                //向DBServer请求修改物品
                string[] dbFields = null;

                //重置强化等级为 0 
                goodsData.Forge_level = 0;
                string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", goodsData.Forge_level, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -11, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -12, roleID, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                int dbRet = -1;

                //给予分解得到的强化石
                for (int n = 1; n <= goodsForgeLevle; n++)
                {
                    GoodsData newGoodsData = Global.GetNewGoodsData(qiangHuaRocksIDs[n], goodsData.Binding);

                    //给予新的装备--->不用管成功失败 既然材料扣除了，那这儿的操作就不管成功失败都执行
                    //dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, newGoodsData.GoodsID, 1, newGoodsData.Quality, "", newGoodsData.Forge_level,
                    //    newGoodsData.Binding, 0, newGoodsData.Jewellist, false, 1, /**/"装备强化分解", Global.ConstGoodsEndTime, newGoodsData.AddPropIndex, newGoodsData.BornIndex, newGoodsData.Lucky, newGoodsData.Strong);
                }

                //成就相关处理 第一次分解
                //ChengJiuManager.OnFirstFenJie(client);

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "装备强化分解");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "装备强化分解");

                //分解成功
                strcmd = string.Format("{0}:{1}:{2}", 1, roleID, goodsData.Id);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        /// <summary>
        /// 精灵装备传承事件[装备传承]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEquipInheritCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                //左边物品ID，提供传承属性的物品，传承提供者
                int leftGoodsDbID = Convert.ToInt32(fields[1]);

                //右边物品ID，获得传承属性的物品，传承接受者
                int rightGoodsDbID = Convert.ToInt32(fields[2]);

                //神佑符goodsID
                //int shenYouGoodsID = Convert.ToInt32(fields[3]);

                // 消耗钱类型 -- 1银两 2元宝 [12/18/2013 LiaoWei]
                int nSubMoneyType = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                /*
                 *  a)	原装备和目标装备必须为同类型部件
                    b)	原装备强化等级必须高与目标装备强化等级，且原装备强化等级必须>0
                    c)	传承有几率失败，可使用神佑符道具来保证传承失败不降低新装备强化等级
                    d)	不同强化等级段的装备传承所需的神佑符是不同的
                    e)	不使用神佑符情况下，失败新装备强化等级最高下降3级
                    f)	传承的成功概率固定为20%
                    g)	传承消耗的铜钱数和原装备强化等级挂钩
                 */


                //从物品包中获取传承提供者装备
                GoodsData leftGoodsData = Global.GetGoodsByDbID(client, leftGoodsDbID);
                if (null == leftGoodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -1, roleID, leftGoodsDbID, rightGoodsDbID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //从物品包中获取传承接受者装备
                GoodsData rightGoodsData = Global.GetGoodsByDbID(client, rightGoodsDbID);
                if (null == rightGoodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -2, roleID, leftGoodsDbID, rightGoodsDbID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                int categoryLeft = Global.GetGoodsCatetoriy(leftGoodsData.GoodsID);
                /*if ((int)ItemCategories.ShenBing == categoryLeft)
                {
                    categoryLeft = (int)ItemCategories.Weapon;
                }

                if ((int)ItemCategories.ShenJia == categoryLeft)
                {
                    categoryLeft = (int)ItemCategories.Clothes;
                }*/

                int categoryRight = Global.GetGoodsCatetoriy(rightGoodsData.GoodsID);
                /*if ((int)ItemCategories.ShenBing == categoryRight)
                {
                    categoryRight = (int)ItemCategories.Weapon;
                }

                if ((int)ItemCategories.ShenJia == categoryRight)
                {
                    categoryRight = (int)ItemCategories.Clothes;
                }*/

                //判断是否装备，装备才能传承
                if (categoryLeft < (int)ItemCategories.TouKui || (categoryLeft > (int)ItemCategories.JieZhi && categoryLeft
                    < (int)ItemCategories.WuQi_Jian) || categoryLeft > (int)ItemCategories.WuQi_NuJianTong)  //只有0-6、11-21的道具可以被强化、追加、洗炼、传承
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -200, roleID, leftGoodsDbID, rightGoodsDbID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 如果是武器 则类型不是一定要相同 但是职业必须相同
                if (categoryLeft >= (int)ItemCategories.WuQi_Jian && categoryLeft <= (int)ItemCategories.WuQi_NuJianTong &&
                        categoryRight >= (int)ItemCategories.WuQi_Jian && categoryRight <= (int)ItemCategories.WuQi_NuJianTong)
                {
                    //do nothing;
                }
                else
                {
                    if (categoryLeft != categoryRight)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -201, roleID, leftGoodsDbID, rightGoodsDbID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //如果物品不在背包中，拒绝操作
                if (leftGoodsData.Site != 0 || rightGoodsData.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -5, roleID, leftGoodsData.Id, rightGoodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检测 银两或元宝
                if (nSubMoneyType < 1 || nSubMoneyType > 2)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -20, roleID, leftGoodsDbID, rightGoodsDbID);  // 没有选择消耗金币类型
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nNeedMoney = 0;
                if (nSubMoneyType == 1)
                {
                    nNeedMoney = Global.GetEquipInheritNeedYinLiang(leftGoodsData);
                    if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "装备传承"))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -21, roleID, leftGoodsDbID, rightGoodsDbID);  // 没有足够的金币
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (nSubMoneyType == 2)
                {
                    nNeedMoney = Global.GetEquipInheritNeedYuanBao(leftGoodsData);
                    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedMoney, "装备传承"))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -22, roleID, leftGoodsDbID, rightGoodsDbID);  // 没有足够的钻石
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                }

                /*
                //如果物品被佩戴在身上, 拒绝操作 佩戴在身上也让更改
                if (leftGoodsData.Using > 0 || rightGoodsData.Using > 0) 
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -6, roleID, leftGoodsData.Id, rightGoodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                */

                //判断是否神佑符且是否可以使用，如果使用了神佑符
                /*if (shenYouGoodsID > 0 && !Global.IsShengYouFuCanBeenUsedForChuanCheng(shenYouGoodsID, leftGoodsData))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -4, roleID, leftGoodsDbID, rightGoodsDbID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                //如果使用了神佑符，则最多用一个
                //int needGoodsNum = 1;

                /*if (shenYouGoodsID > 0)
                {
                    //判断神佑符是否足够
                    int totalNum = Global.GetTotalGoodsCountByID(client, shenYouGoodsID);
                    if (totalNum < needGoodsNum)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -7, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }*/

                //传承所需银两
                //int needYinLiang = Global.GetChuanChenNeedYinLiang(leftGoodsData);

                //判断银两是否够【银两消耗减半期间只会消耗一半银两】
                /*needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
                if (needYinLiang < 0 || needYinLiang > Global.GetTotalBindTongQianAndTongQianVal(client))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -8, roleID, leftGoodsData.Id, rightGoodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                //判断是否有需要传承的属性，没有就不传承了 当前只传承 强化
                if (leftGoodsData.Forge_level <= 0 || leftGoodsData.Forge_level <= rightGoodsData.Forge_level)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -9, roleID, leftGoodsData.Id, rightGoodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //bool usedBinding = false;
                //bool usedTimeLimited = false;

                /*if (shenYouGoodsID > 0)
                {
                    //如果使用了神佑符 从用户物品中扣除消耗的神佑符数量
                    if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, shenYouGoodsID, needGoodsNum, false, out usedBinding, out usedTimeLimited))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -10, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }*/

                //扣除银两
                //if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang))
                /*if (!Global.SubBindTongQianAndTongQian(client, needYinLiang))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -11, roleID, leftGoodsData.Id, rightGoodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                int nBinding = 0;
                if (rightGoodsData.Binding == 1 || leftGoodsData.Binding == 1)
                {
                    nBinding = 1;
                }

                int rightGoodsOldForge_level = rightGoodsData.Forge_level;
                int leftGoodsOldForge_level = leftGoodsData.Forge_level;

                int result = 1;//传承结果 1，表示成功， 2表示失败不降级【使用了神佑符】，3表示失败降级了
                //int chuanChengFailedLevelNum = 0;//传承失败掉级数量

                //不管怎么样都传承过去
                //rightGoodsData.Forge_level = leftGoodsData.Forge_level;
                //leftGoodsData.Forge_level = 0;

                //如果传承成功判断是否降级，则传承强化
                if (Global.IsChuanChenSuccess(leftGoodsData))
                {
                    //result = 1;

                    rightGoodsData.Forge_level = leftGoodsData.Forge_level;
                    leftGoodsData.Forge_level = 0;

                    //修改装备的数据库
                    //向DBServer请求修改左边装备
                    string[] dbFields = null;
                    string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, leftGoodsData.Id, "*", leftGoodsData.Forge_level, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越信息 [12/13/2013 LiaoWei] 装备转生
                    TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                    if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -12, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -13, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //向DBServer请求修改右边装备
                    dbFields = null;
                    strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, rightGoodsData.Id, "*", rightGoodsData.Forge_level, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", nBinding, "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                    dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                    if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -14, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -15, roleID, leftGoodsData.Id, rightGoodsData.Id);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //写入角色物品的得失行为日志(扩展)
                    Global.ModRoleGoodsEvent(client, leftGoodsData, 0, "装备传承_提供方");
                    Global.ModRoleGoodsEvent(client, rightGoodsData, 0, "装备传承_接受方");
                    EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, leftGoodsData.GoodsID, leftGoodsData.Id, 0, leftGoodsData.GCount, "装备传承_提供方");
                    EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, rightGoodsData.GoodsID, rightGoodsData.Id, 0, rightGoodsData.GCount, "装备传承_接受方");

                    Global.BroadcastChuanChengOk(client, leftGoodsData, rightGoodsData);

                    //如果有物品是穿戴的，更新角色属性
                    if (leftGoodsData.Using > 0 || rightGoodsData.Using > 0)
                    {
                        Global.RefreshEquipPropAndNotify(client);
                    }

                    ////装备传承成功
                    //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}", result, roleID, leftGoodsData.Id, rightGoodsData.Id,
                    //    leftGoodsData.BornIndex, leftGoodsData.AddPropIndex, leftGoodsData.Quality, leftGoodsData.Forge_level, leftGoodsData.Binding, leftGoodsData.Lucky, leftGoodsData.Strong,
                    //    rightGoodsData.BornIndex, rightGoodsData.AddPropIndex, rightGoodsData.Quality, rightGoodsData.Forge_level, nBinding, rightGoodsData.Lucky, rightGoodsData.Strong);

                    Global.ModifyGoodsBindPorp(client, rightGoodsDbID, nBinding);

                    // 继承成就
                    ChengJiuManager.OnFirstJiCheng(client);

                    // 七日活动
                    GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.EquipChuanChengTimes));
                }
                else
                {
                    //result = 2;

                    //如果未使用神佑符，就降级，最多下降3级
                    /*if (shenYouGoodsID <= 0)
                    {
                        chuanChengFailedLevelNum = Global.GetRandomNumber(1, 4);
                        rightGoodsData.Forge_level = Math.Max(0, rightGoodsData.Forge_level - chuanChengFailedLevelNum);

                        chuanChengFailedLevelNum = leftGoodsOldForge_level - rightGoodsData.Forge_level;//真正的降级数量

                        result = 3;
                    }*/

                    result = 0;
                    strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", -23, roleID, leftGoodsData.Id, rightGoodsData.Id);    // 概率没到
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵锻造装备事件[装备增幅]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSubForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);
                int rockGoodsID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //从物品包中获取要锻造的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int subForgeGoodsID = 0;
                int needNum = 0;
                int needYinLiang = 0;
                //返回强化所需的参数
                //if (!Global.GetSubForgeNextLevelParams(goodsData, out subForgeGoodsID, out needNum, out needYinLiang))
                //{
                //    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9910, roleID, id, 0, 0);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                if (subForgeGoodsID != rockGoodsID)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9010, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Site != 0) //如果物品不在背包中，拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9998, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Using > 0) //如果物品被佩戴在身上, 拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9999, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
                if (totalNum < needNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); //判断银两是否够
                if (needYinLiang > client.YinLiang)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

               

                //扣除银两
                if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "锻造装备"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int newGoodsBinding = goodsData.Binding;
                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needNum, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -100, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (newGoodsBinding <= 0)
                {
                    newGoodsBinding = usedBinding ? 1 : 0;
                }

                //开始锻造---将AddProIndex直接加1
              
                goodsData.Binding = newGoodsBinding;
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 1, roleID, id, 1, goodsData.Binding);

                //锻造成功(6级以上提示)
                Global.BroadcastSubForgeOk(client, goodsData);

                //修改装备的数据库
                //向DBServer请求修改物品
                string[] dbFields = null;
                string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", goodsData.Binding, 1, "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "装备精锻");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "装备精锻");

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Cường hóa
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);
                int rockGoodsID = Convert.ToInt32(fields[2]);
                int luckyNum = Convert.ToInt32(fields[3]);
                luckyNum = Global.GMin(luckyNum, 20);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //从物品包中获取要锻造的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -1, roleID, id, goodsData.Props, goodsData.Binding);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Site != 0) //如果物品不在背包中，拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -9998, roleID, id, goodsData.Props, goodsData.Binding);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Using > 0) //如果物品被佩戴在身上, 拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -9999, roleID, id, goodsData.Props, goodsData.Binding);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needNum = Global.GetEnchanceNextLevelRock(goodsData);
                int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
                if (totalNum < needNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -2, roleID, id, goodsData.Props, goodsData.Binding);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needYinLiang = Global.GetEnchanceNextLevelYinLiang(goodsData);
                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); //判断银两是否折半
                if (needYinLiang > client.YinLiang)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -3, roleID, id, goodsData.Props, goodsData.Binding);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

              


                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "提品");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "提品");

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取其他角色属性信息事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetOtherAttribCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int ohterRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                GoodsData tmpGoods = null;
            
                KPlayer otherClient = GameManager.ClientMgr.FindClient(ohterRoleID);
                if (null == otherClient)
                {
                    strcmd = string.Format("{0}", -1);
                }
                else
                {
                   
                    {
                        strcmd = string.Format("{0}", 0);

                        RoleData roleData = KTLogic.ClientToRoleData2(otherClient);
                       

                        client.sendCmd((int)TCPGameServerCmds.CMD_OTHER_ROLE_DATA, roleData);

                        //装备属性更新通知
                        GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client, otherClient);
                    }
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
             
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取从商城用元宝购买物品事件【普通购买，非抢购】
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMallBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int malID = Convert.ToInt32(fields[1]);
                int goodsNum = Convert.ToInt32(fields[2]);
                bool autoUseGold = (1 == Convert.ToInt32(fields[3]));

                if (goodsNum <= 0 || goodsNum >= 10000)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsNum));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                SystemXmlItem systemMallItem = null;

                //判断请求购买的交易是否合法
                if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
                {
                    strcmd = string.Format("{0}::", -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int price = systemMallItem.GetIntValue("Price");
                if (price <= 0)
                {
                    strcmd = string.Format("{0}::", -100);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int goodsID = systemMallItem.GetIntValue("GoodsID");
                if (goodsID <= 0)
                {
                    strcmd = string.Format("{0}::", -101);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
                if (null == mallGoodsCacheItem)
                {
                    strcmd = string.Format("{0}::", -1101);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果当前处于死亡状态，则不让购买商城物品
                if (client.m_CurrentLife <= 0)
                {
                    strcmd = string.Format("{0}::", -102);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //是否有时间段限制????
                string pubStartTime = systemMallItem.GetStringValue("PubStartTime");
                string pubEndTime = systemMallItem.GetStringValue("PubEndTime");
                if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
                {
                    long startTime = Global.SafeConvertToTicks(pubStartTime);
                    long endTime = Global.SafeConvertToTicks(pubEndTime);
                    long nowTicks = TimeUtil.NOW();
                    if (nowTicks < startTime || nowTicks > endTime)
                    {
                        strcmd = string.Format("{0}::", -105);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //判断用户点卷额是否不足
                if (client.UserMoney < (price * goodsNum))
                //if (GameManager.ClientMgr.GetCanUseUserMoneyAndGold(client) < (price * goodsNum)) 
                {
                    strcmd = string.Format("{0}::", -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int toBinding = GameManager.GameConfigMgr.GetGameConfigItemInt("force-mallbuy-binding", 0); //是否商城购买的强制绑定

                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);

                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }

                    //判断背包是否够用
                    if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0))
                    {
                        strcmd = string.Format("{0}::", -3);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //优先扣除金币
                    //扣除的金币
                    //int hasSubGold = 0;

                    //扣除的元宝
                    //int hasSubYuanBao = 0;

                    //先DBServer请求扣费
                    //扣除用户点卷
                    if (autoUseGold)
                    {
                        //if (!GameManager.ClientMgr.SubUserMoney2(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), out hasSubYuanBao, out hasSubGold))
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "商城购买自动扣除"))
                        {
                            strcmd = string.Format("{0}::", -4);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }

                        //金子参与购买的强制绑定
                        //if (hasSubGold > 0)
                        //{
                        //    toBinding = 1;
                        //}
                    }
                    else
                    {
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "商城购买"))
                        {
                            strcmd = string.Format("{0}::", -4);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }
                    }

                    client.TotalUsedMoney += (price * thisTimeNum);

                    //想DBServer请求加入某个新的物品到背包中
                    int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", mallGoodsCacheItem.Forge_level, toBinding, 0, "", true, 1, "商城购买", Global.ConstGoodsEndTime, 0, 0, mallGoodsCacheItem.Lucky, 0, mallGoodsCacheItem.ExcellenceInfo, mallGoodsCacheItem.AppendPropLev);
                    if (dbRet < 0)
                    {
                        strcmd = string.Format("{0}::", -5);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //写入角色元宝购买的行为日志
                    Global.AddRoleBuyWithYuanBaoEvent(client, goodsID, thisTimeNum, (price * thisTimeNum));

                    // 处理每日活跃中商城购买项 [2/26/2014 LiaoWei]
                    DailyActiveManager.ProcessBuyItemInMallForDailyActive(client, price * goodsNum);

                    strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取从商城用银两购买物品事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteYinLiangBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //商城暂时禁止用银两购买
                return TCPProcessCmdResults.RESULT_OK;

                ////解析用户名称和用户密码
                //string[] fields = cmdData.Split(':');
                //if (fields.Length != 3)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                //int roleID = Convert.ToInt32(fields[0]);
                //KPlayer client = GameManager.ClientMgr.FindClient(socket);
                //if (null == client || client.RoleID != roleID)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                //int malID = Convert.ToInt32(fields[1]);
                //int goodsNum = Convert.ToInt32(fields[2]);
                //string strcmd = "";

                //SystemXmlItem systemMallItem = null;

                ////判断请求购买的交易是否合法
                //if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
                //{
                //    strcmd = string.Format("{0}::", -1);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                //int price = systemMallItem.GetIntValue("Price");
                //if (price <= 0)
                //{
                //    strcmd = string.Format("{0}::", -100);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                //int goodsID = systemMallItem.GetIntValue("GoodsID");
                //if (goodsID <= 0)
                //{
                //    strcmd = string.Format("{0}::", -101);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                ////判断用户点银两是否不足
                //if (client.YinLiang < (price * goodsNum))
                //{
                //    strcmd = string.Format("{0}::", -2);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                ////判断背包是否够用
                //if (!Global.CanAddGoods(client, goodsID, goodsNum, 0))
                //{
                //    strcmd = string.Format("{0}::", -3);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                ////先DBServer请求扣费
                ////扣除用户银两
                //if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * goodsNum)))
                //{
                //    strcmd = string.Format("{0}::", -4);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                ////想DBServer请求加入某个新的物品到背包中
                //int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, goodsNum, 0, "", 0, 1, 0, "", true, 1);
                //if (dbRet < 0)
                //{
                //    strcmd = string.Format("{0}::", -5);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                //strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, goodsNum);
                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵请求和其他精灵进行物品交换事件 交易！！！
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGoodsExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //是否禁用用户间交易功能
                int disableExchange = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-exchange", 0);
                if (disableExchange > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int otherRoleID = Convert.ToInt32(fields[1]);
                int exchangeType = Convert.ToInt32(fields[2]);
                int exchangeID = Convert.ToInt32(fields[3]);

                string strcmd = "";
                if (exchangeType == (int)GoodsExchangeCmds.Request)
                {
                    long ticks = TimeUtil.NOW();

                    if (TradeBlackManager.Instance().IsBanTrade(client.RoleID))
                    {
                        string tip = Global.GetLang("您目前已被禁止交易");
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, tip, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //确保自己没有处于request之中, 或者是已经请求了交易但是50秒还没有应答
                    if (client.ExchangeID <= 0 || (client.ExchangeID > 0 && (ticks - client.ExchangeTicks) >= (50 * 1000))) //否则不处理, 忽略指令
                    {
                        //首先检查对方有没有正在进行中的交易，如果有则拒绝
                        KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                        if (null == otherClient) //对方不在线，直接返回失败
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (otherClient.ExchangeID > 0) //对方目前有交易
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (otherClient.MapCode != client.MapCode) //是否在同一个地图上?
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (!Global.InCircle(new Point(otherClient.PosX, otherClient.PosY), new Point(client.PosX, client.PosY), 500)) //对方是否在距离自己500像素范围内
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (TradeBlackManager.Instance().IsBanTrade(otherClient.RoleID))
                        {
                            string tip = Global.GetLang("对方目前已被禁止交易");
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, tip, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        //生成交易ID和交易记录包
                        int autoID = GameManager.GoodsExchangeMgr.GetNextAutoID();

                        client.ExchangeID = autoID;
                        client.ExchangeTicks = ticks;

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, autoID, exchangeType);
                    }
                    else
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, otherRoleID, exchangeType);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.Agree)
                {
                    //确保自己没有处于交易之中
                    if (client.ExchangeID <= 0) //否则不处理, 忽略指令
                    {
                        //首先检查对方有没有正在进行中的交易，如果有则拒绝
                        KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                        if (null == otherClient) //对方不在线，直接返回失败
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (otherClient.ExchangeID <= 0 || exchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (otherClient.MapCode != client.MapCode) //是否在同一个地图上?
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (!Global.InCircle(new Point(otherClient.PosX, otherClient.PosY), new Point(client.PosX, client.PosY), 500)) //对方是否在距离自己500像素范围内
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, otherRoleID, exchangeType);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        //生成交易ID和交易记录包
                        ExchangeData ed = new ExchangeData()
                        {
                            RequestRoleID = otherRoleID,
                            AgreeRoleID = roleID,
                            GoodsDict = new Dictionary<int, List<GoodsData>>(),
                            MoneyDict = new Dictionary<int, int>(),
                            LockDict = new Dictionary<int, int>(),
                            DoneDict = new Dictionary<int, int>(),
                            AddDateTime = TimeUtil.NOW(),
                            Done = 0,
                            YuanBaoDict = new Dictionary<int, int>(),
                        };

                        GameManager.GoodsExchangeMgr.AddData(exchangeID, ed);

                        client.ExchangeID = exchangeID;
                        client.ExchangeTicks = 0;

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, exchangeID, exchangeType);
                    }
                    else
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, otherRoleID, exchangeType);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.Refuse) //拒绝交易
                {
                    //首先检查对方有没有正在进行中的交易，如果有则拒绝
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回, 不再处理
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.ExchangeID <= 0 || otherClient.ExchangeID != exchangeID) //对方目前没有有交易，或者交易ID和自己的不符合
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    otherClient.ExchangeID = 0; //修改对方的交易ID
                    otherClient.ExchangeTicks = 0;

                    //通知请求物品交易的指令信息
                    GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, null, otherClient, exchangeID, exchangeType);
                }
                else if (exchangeType == (int)GoodsExchangeCmds.Cancel) //取消交易
                {
                    //确保自己处于交易之中
                    if (client.ExchangeID > 0 && client.ExchangeID == exchangeID) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
                        if (null != ed)
                        {
                            int done = 0;
                            lock (ed)
                            {
                                done = ed.Done;
                            }

                            if (done <= 0) //没有完成前才可以取消
                            {
                                //删除交易数据
                                GameManager.GoodsExchangeMgr.RemoveData(exchangeID);

                                // 从交易数据中恢复自己的数据
                                Global.RestoreExchangeData(client, ed);

                                client.ExchangeID = 0; //重置交易ID
                                client.ExchangeTicks = 0;

                                //首先检查对方有没有正在进行中的交易，如果有则拒绝
                                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                                if (null == otherClient) //对方不在线，直接返回不处理
                                {
                                    return TCPProcessCmdResults.RESULT_OK;
                                }

                                if (otherClient.ExchangeID <= 0 || exchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                                {
                                    return TCPProcessCmdResults.RESULT_OK;
                                }

                                // 从交易数据中恢复自己的数据
                                Global.RestoreExchangeData(otherClient, ed);

                                otherClient.ExchangeID = 0; //重置交易ID
                                otherClient.ExchangeTicks = 0;

                                //通知请求物品交易的指令信息
                                GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, null, otherClient, exchangeID, exchangeType);
                            }
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.AddGoods) //添加物品交易
                {
                    int addGoodsDbID = exchangeID;

                    //确保自己处于交易之中
                    if (client.ExchangeID > 0) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ExchangeID);
                        if (null != ed)
                        {
                            //将制定的物品放入交易数据中
                            Global.AddGoodsDataIntoExchangeData(client, addGoodsDbID, ed);

                            //首先检查对方有没有正在进行中的交易，如果有则拒绝
                            KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                            if (null == otherClient) //对方不在线，直接返回不处理
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            if (otherClient.ExchangeID <= 0 || client.ExchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            //通知请求物品交易的指令信息
                            GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.RemoveGoods) //删除物品交易
                {
                    int addGoodsDbID = exchangeID;

                    //确保自己处于交易之中
                    if (client.ExchangeID > 0) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ExchangeID);
                        if (null != ed)
                        {
                            //将制定的物品从交易数据中删除
                            Global.RemoveGoodsDataFromExchangeData(client, addGoodsDbID, ed);

                            //首先检查对方有没有正在进行中的交易，如果有则拒绝
                            KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                            if (null == otherClient) //对方不在线，直接返回不处理
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            if (otherClient.ExchangeID <= 0 || client.ExchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            //通知请求物品交易的指令信息
                            GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.UpdateMoney) //修改金币
                {
                    int updateMoney = exchangeID;
                    updateMoney = Global.GMax(updateMoney, 0);
                    updateMoney = Global.GMin(updateMoney, client.YinLiang);

                    //确保自己处于交易之中
                    if (client.ExchangeID > 0) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ExchangeID);
                        if (null != ed)
                        {
                            //将制定的金币放入交易数据中
                            Global.UpdateExchangeDataMoney(client, updateMoney, ed);

                            //首先检查对方有没有正在进行中的交易，如果有则拒绝
                            KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                            if (null == otherClient) //对方不在线，直接返回不处理
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            if (otherClient.ExchangeID <= 0 || client.ExchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            //通知请求物品交易的指令信息
                            GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.UpdateYuanBao) //修改元宝
                {
                    int updateYuanBao = exchangeID;
                    updateYuanBao = Global.GMax(updateYuanBao, 0);
                    updateYuanBao = Global.GMin(updateYuanBao, client.UserMoney);

                    //确保自己处于交易之中
                    if (client.ExchangeID > 0) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ExchangeID);
                        if (null != ed)
                        {
                            //将制定的元宝放入交易数据中
                            Global.UpdateExchangeDataYuanBao(client, updateYuanBao, ed);

                            //首先检查对方有没有正在进行中的交易，如果有则拒绝
                            KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                            if (null == otherClient) //对方不在线，直接返回不处理
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            if (otherClient.ExchangeID <= 0 || client.ExchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            //通知请求物品交易的指令信息
                            GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.Lock) //锁定交易
                {
                    //确保自己处于交易之中
                    if (client.ExchangeID > 0 && exchangeID == client.ExchangeID) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
                        if (null != ed)
                        {
                            //设置交易数据的锁定状态
                            Global.LockExchangeData(roleID, ed, 1);

                            //首先检查对方有没有正在进行中的交易，如果有则拒绝
                            KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                            if (null == otherClient) //对方不在线，直接返回不处理
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            if (otherClient.ExchangeID <= 0 || exchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                            {
                                return TCPProcessCmdResults.RESULT_OK;
                            }

                            //通知请求物品交易的指令信息
                            GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
                        }
                    }
                }
                else if (exchangeType == (int)GoodsExchangeCmds.Done) //完成交易
                {
                    //确保自己处于交易之中
                    if (client.ExchangeID > 0 && exchangeID == client.ExchangeID) //否则不处理, 忽略指令
                    {
                        ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
                        if (null != ed)
                        {
                            //查询交易数据的锁定状态
                            if (Global.IsLockExchangeData(roleID, ed) && Global.IsLockExchangeData(otherRoleID, ed))
                            {
                                //设置交易数据的同意状态
                                if (Global.DoneExchangeData(roleID, ed)) //防止重复设置同意
                                {
                                    //查询交易数据的同意状态
                                    if (Global.IsDoneExchangeData(otherRoleID, ed)) //如果对方也已经同意完成交易, 立即完成数据的锁定
                                    {
                                        //首先检查对方有没有正在进行中的交易，如果有则拒绝
                                        KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                                        if (null == otherClient) //对方不在线，直接返回不处理
                                        {
                                            return TCPProcessCmdResults.RESULT_OK;
                                        }

                                        if (otherClient.ExchangeID <= 0 || exchangeID != otherClient.ExchangeID) //对方目前有交易ID和自己的不匹配
                                        {
                                            return TCPProcessCmdResults.RESULT_OK;
                                        }

                                        lock (ed)
                                        {
                                            ed.Done = 1; //设置为完成状态
                                        }

                                        // 从交易数据中完成双方的物品交换
                                        int ret = Global.CompleteExchangeData(client, otherClient, ed);

                                        //删除交易数据
                                        GameManager.GoodsExchangeMgr.RemoveData(exchangeID);

                                        if (ret < 0) //交易失败
                                        {
                                            // 从交易数据中恢复自己的数据
                                            Global.RestoreExchangeData(client, ed);

                                            // 从交易数据中恢复对方的数据
                                            Global.RestoreExchangeData(otherClient, ed);
                                        }

                                        otherClient.ExchangeID = 0; //重置交易ID
                                        otherClient.ExchangeTicks = 0;

                                        client.ExchangeID = 0; //重置交易ID
                                        client.ExchangeTicks = 0;

                                        //通知请求物品交易的指令信息
                                        GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, ret, exchangeType);
                                    }
                                }
                            }
                        }
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵请求摆摊事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGoodsStallCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int stallType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);
                string extTag2 = fields[3];

                if (stallType == (int)GoodsStallCmds.Request)
                {
                    //是否够了摆摊级别
                    if (client.m_Level < 10)
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -9, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //此地是否允许摆摊
                    if (!Global.AllowStartStall(client))
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -8, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //确保自己没有处于摆摊中
                    if (client.StallDataItem == null) //否则不处理, 忽略指令
                    {
                        //生成摆摊数据
                        StallData sd = new StallData()
                        {
                            StallID = 0,
                            RoleID = client.RoleID,
                            StallName = extTag2,
                            StallMessage = "",
                            GoodsList = new List<GoodsData>(),
                            GoodsPriceDict = new Dictionary<int, int>(),
                            AddDateTime = TimeUtil.NOW(),
                        };

                        client.StallDataItem = sd;

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);
                    }
                    else
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (stallType == (int)GoodsStallCmds.Start)
                {
                    //确保自己没有处于交易之中
                    if (client.StallDataItem != null) //否则不处理, 忽略指令
                    {
                        lock (client.StallDataItem)
                        {
                            client.StallDataItem.Start = 1;
                        }

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);

                        //通知所有在线用户某个精灵的开始摆摊(同一个地图才需要通知)
                        GameManager.ClientMgr.NotifySpriteStartStall(tcpMgr.MySocketListener, pool, client);

                        // 第一次摆摊成就
                        ChengJiuManager.OnFirstBaiTan(client);
                    }
                    else
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (stallType == (int)GoodsStallCmds.Cancel)
                {
                    //确保自己没有处于交易之中
                    if (client.StallDataItem != null) //否则不处理, 忽略指令
                    {
                        bool notify = false;
                        lock (client.StallDataItem)
                        {
                            notify = (client.StallDataItem.Start == 1);
                            client.StallDataItem.StallName = "";
                        }

                        if (notify)
                        {
                            //通知所有在线用户某个精灵的开始摆摊(同一个地图才需要通知)
                            GameManager.ClientMgr.NotifySpriteStartStall(tcpMgr.MySocketListener, pool, client);
                        }

                        //从摆摊数据中恢复自己的数据
                        Global.RestoreStallData(client, client.StallDataItem);

                        client.StallDataItem = null;

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);
                    }
                    else
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (stallType == (int)GoodsStallCmds.AddGoods) //添加物品交易
                {
                    int addGoodsDbID = extTag1;
                    int price = Convert.ToInt32(extTag2);

                    //确保自己处于交易之中
                    if (client.StallDataItem != null) //否则不处理, 忽略指令
                    {
                        StallData sd = client.StallDataItem;

                        //将制定的物品放入摆摊数据中
                        Global.AddGoodsDataIntoStallData(client, addGoodsDbID, sd, price);

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
                    }
                }
                else if (stallType == (int)GoodsStallCmds.RemoveGoods) //删除物品交易
                {
                    int addGoodsDbID = extTag1;

                    //确保自己处于交易之中
                    if (client.StallDataItem != null) //否则不处理, 忽略指令
                    {
                        StallData sd = client.StallDataItem;

                        //将制定的物品放入摆摊数据中
                        Global.RemoveGoodsDataFromStallData(client, addGoodsDbID, sd);

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
                    }
                }
                else if (stallType == (int)GoodsStallCmds.UpdateMessage) //修改留言
                {
                    string stallMessage = extTag2;

                    //确保自己处于交易之中
                    if (client.StallDataItem != null) //否则不处理, 忽略指令
                    {
                        StallData sd = client.StallDataItem;

                        lock (sd)
                        {
                            sd.StallMessage = stallMessage;
                        }

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
                    }
                }
                else if (stallType == (int)GoodsStallCmds.ShowStall) //显示摊位
                {
                    int otherRoleID = extTag1;

                    //首先检查对方有没有正在进行中的摆摊，如果有则拒绝
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -1, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.StallDataItem == null) //对方目前有摆摊数据
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -2, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //通知请求物品摆摊数据的指令信息
                    GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, otherClient.StallDataItem);
                }
                else if (stallType == (int)GoodsStallCmds.BuyGoods) //购买物品
                {
                    int otherRoleID = extTag1;
                    int goodsDbId = Convert.ToInt32(extTag2);

                    //首先检查对方有没有正在进行中的摆摊，如果有则拒绝
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -1, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.StallDataItem == null) //对方目前有摆摊数据
                    {
                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -2, stallType);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    StallData sd = otherClient.StallDataItem;
                    if (null != sd && sd.Start > 0)
                    {
                        // 从摆摊数据中完成物品购买
                        int ret = Global.BuyFromStallData(client, otherClient, sd, goodsDbId);

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, otherClient.StallDataItem);

                        //通知请求物品摆摊数据的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, otherClient, otherClient.StallDataItem);

                        //通知请求物品交易的指令信息
                        GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, ret, stallType);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵组队事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteTeamCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int teamType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);
                int extTag2 = Convert.ToInt32(fields[3]);

                if (teamType == (int)TeamCmds.Create) //创建队伍
                {
                    if (client.TeamID > 0) //如果已经在组队的队伍中
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    int teamID = GameManager.TeamMgr.GetNextAutoID();
                    client.TeamID = teamID;
                    GameManager.TeamMgr.AddRoleID2TeamID(client.RoleID, client.TeamID);

                    TeamData td = new TeamData()
                    {
                        TeamID = teamID,
                        LeaderRoleID = client.RoleID,
                        AddDateTime = TimeUtil.NOW(),
                        GetThingOpt = extTag1,
                    };

                    if (null == td.TeamRoles)
                    {
                        td.TeamRoles = new List<TeamMemberData>();
                    }

                    td.TeamRoles.Add(Global.ClientDataToTeamMemberData(client));

                    //存入组队管理队列
                    GameManager.TeamMgr.AddData(teamID, td);

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);

                    //成就相关处理--->自己第一次进入队伍 和 创建队伍的地方 要处理
                    ChengJiuManager.OnFirstInTeam(client);
                }
                else if (teamType == (int)TeamCmds.Destroy) //解散队伍
                {
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        td.LeaderRoleID = -1; //强迫解散
                    }

                    //删除组队数据
                    GameManager.TeamMgr.RemoveData(client.TeamID);

                    //组队解散通知
                    GameManager.ClientMgr.NotifyOthersTeamDestroy(tcpMgr.MySocketListener, pool, client, td);

                    //清空组队ID
                    client.TeamID = 0;
                    GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
                }
                else if (teamType == (int)TeamCmds.Invite) //邀请组队
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        //判断是否超过了最大人数限制
                        if (td.TeamRoles.Count >= 5)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID > 0) //对方目前有在队伍中
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //是否能邀请加入队伍
                    if (!GameManager.TeamMgr.CanAddToTeam(otherClient.RoleID, otherClient.TeamID, 1))
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -100, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //将请求项缓存
                    GameManager.TeamMgr.AddTeamRequestItem(otherClient.RoleID, otherClient.TeamID, 1);

                    //通知角色组队的指令信息
                    GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.RoleID, Global.FormatRoleName(client, client.RoleName),
                                                            client.m_cPlayerFaction.GetFactionId(), client.m_Level, client.ChangeLifeCount);
                }
                else if (teamType == (int)TeamCmds.Apply) //申请组队
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID > 0) //如果有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID <= 0) //对方目前有在队伍中
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(otherClient.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    int leaderRoleID = -1;
                    lock (td)
                    {
                        //判断是否超过了最大人数限制
                        if (td.TeamRoles.Count >= 5)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        leaderRoleID = td.LeaderRoleID;
                    }

                    //判断对方是否在线，如果不在线则无法邀请?
                    otherClient = GameManager.ClientMgr.FindClient(leaderRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID <= 0) //对方目前有在队伍中
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -7, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //是否能请求加入队伍
                    if (!GameManager.TeamMgr.CanAddToTeam(roleID, otherClient.TeamID, 0))
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -100, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //将请求项缓存
                    GameManager.TeamMgr.AddTeamRequestItem(roleID, otherClient.TeamID, 0);

                    //通知角色组队的指令信息
                    GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.RoleID, Global.FormatRoleName(client, client.RoleName),
                                                            client.m_cPlayerFaction.GetFactionId(), client.m_Level, client.ChangeLifeCount);
                }
                else if (teamType == (int)TeamCmds.Refuse) //拒绝申请/邀请
                {
                    int otherRoleID = extTag1;

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //通知角色组队的指令信息
                    GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.RoleID, Global.FormatRoleName(client, client.RoleName));
                }
                else if (teamType == (int)TeamCmds.AgreeInvite) //同意邀请
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID > 0) //如果有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID <= 0) //对方没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(otherClient.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != otherRoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        //判断是否超过了最大人数限制
                        if (td.TeamRoles.Count >= 5)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        td.TeamRoles.Add(Global.ClientDataToTeamMemberData(client));

                        //删除请求项缓存
                        GameManager.TeamMgr.RemoveTeamRequestItem(client.RoleID, td.TeamID, 1);

                        //记录组队ID
                        client.TeamID = td.TeamID;
                        GameManager.TeamMgr.AddRoleID2TeamID(client.RoleID, client.TeamID);

                        //成就相关处理--->自己第一次组队，创建队伍的地方也要处理
                        ChengJiuManager.OnFirstInTeam(client);

                        //通知队伍成员有人入队***
                        GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, client, td, TeamCmds.AgreeApply);

                    }

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
                }
                else if (teamType == (int)TeamCmds.AgreeApply) //同意申请
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID > 0) //对方有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        //判断是否超过了最大人数限制
                        if (td.TeamRoles.Count >= 5)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        td.TeamRoles.Add(Global.ClientDataToTeamMemberData(otherClient));

                        //删除请求项缓存
                        GameManager.TeamMgr.RemoveTeamRequestItem(otherClient.RoleID, td.TeamID, 0);

                        //记录组队ID
                        otherClient.TeamID = td.TeamID;
                        GameManager.TeamMgr.AddRoleID2TeamID(otherClient.RoleID, otherClient.TeamID);

                        //通知队伍成员有人入队***
                        GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, otherClient, td, TeamCmds.AgreeApply);
                    }

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
                }
                else if (teamType == (int)TeamCmds.Remove) //踢出队伍
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    bool destroy = false;
                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (td.TeamRoles.Count > 1) //转交队长
                        {
                            for (int i = 0; i < td.TeamRoles.Count; i++)
                            {
                                if (td.TeamRoles[i].RoleID == otherRoleID)
                                {
                                    td.TeamRoles.RemoveAt(i);
                                    break;
                                }
                            }

                            //判断是否是队长
                            if (td.LeaderRoleID == client.RoleID)
                            {
                                td.LeaderRoleID = td.TeamRoles[0].RoleID; //转交队长
                            }
                        }
                        else
                        {
                            destroy = true;
                            td.LeaderRoleID = -1; //强迫解散
                        }
                    }

                    if (destroy)
                    {
                        //删除组队数据
                        GameManager.TeamMgr.RemoveData(client.TeamID);
                    }

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td); //发送null数据，强迫组队解散

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null == otherClient) //对方不在线，直接返回不处理
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (otherClient.TeamID <= 0) //对方没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //清空组队ID
                    otherClient.TeamID = 0;
                    GameManager.TeamMgr.RemoveRoleID2TeamID(otherClient.RoleID);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
                }
                else if (teamType == (int)TeamCmds.Quit) //离开组队
                {
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    int newTeamLeaderRoleID = -1;
                    bool destroy = false;
                    lock (td)
                    {
                        if (td.TeamRoles.Count > 1) //转交队长
                        {
                            for (int i = 0; i < td.TeamRoles.Count; i++)
                            {
                                if (td.TeamRoles[i].RoleID == client.RoleID)
                                {
                                    td.TeamRoles.RemoveAt(i);
                                    break;
                                }
                            }

                            //判断是否是队长
                            if (td.LeaderRoleID == client.RoleID)
                            {
                                td.LeaderRoleID = td.TeamRoles[0].RoleID; //转交队长
                                newTeamLeaderRoleID = td.LeaderRoleID;
                            }
                        }
                        else
                        {
                            destroy = true;
                            td.LeaderRoleID = -1; //强迫解散
                        }
                    }

                    if (destroy)
                    {
                        //删除组队数据
                        GameManager.TeamMgr.RemoveData(client.TeamID);

                        //组队解散通知
                        GameManager.ClientMgr.NotifyOthersTeamDestroy(tcpMgr.MySocketListener, pool, client, td);
                    }

                    //清空组队ID
                    client.TeamID = 0;
                    GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td); //发送null数据，强迫组队解散

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);

                    //通知队伍的成员有人离队
                    GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, client, td, TeamCmds.Quit);

                    if (newTeamLeaderRoleID > 0)
                    {
                        //判断对方是否在线，如果不在线则无法邀请?
                        KPlayer otherClient = GameManager.ClientMgr.FindClient(newTeamLeaderRoleID);
                        if (null != otherClient)
                        {
                            //组队状态变化通知(同一个地图才需要通知)
                            GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
                        }
                    }

                    //GameManager.ClientMgr.NotifyTeamMemeryMsg(sl, pool, td);

                }
                else if (teamType == (int)TeamCmds.AppointLeader) //任命队长
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        for (int i = 0; i < td.TeamRoles.Count; i++)
                        {
                            if (td.TeamRoles[i].RoleID == otherRoleID)
                            {
                                td.LeaderRoleID = otherRoleID; //转交队长
                                break;
                            }
                        }
                    }

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        //组队状态变化通知(同一个地图才需要通知)
                        GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
                    }
                }
                else if (teamType == (int)TeamCmds.GetThingOpt) //修改自由拾取选项
                {
                    int otherRoleID = extTag1;
                    if (client.TeamID <= 0) //如果没有队伍
                    {
                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找组队的数据
                    TeamData td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        //清空组队ID
                        client.TeamID = 0;
                        GameManager.TeamMgr.RemoveRoleID2TeamID(client.RoleID);

                        //通知角色组队的指令信息
                        GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "");
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            //通知角色组队的指令信息
                            GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "");
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        td.GetThingOpt = extTag2;
                    }

                    //通知组队数据的指令信息
                    GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);

                    //组队状态变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);

                    //判断对方是否在线，如果不在线则无法邀请?
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        //组队状态变化通知(同一个地图才需要通知)
                        GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵大乱斗事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteBattleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int battleType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);

                if (battleType == (int)BattleCmds.Enter) //加入大乱斗
                {
                    //角色进入大乱斗地图
                    Global.ClientEnterBattle(client);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵竞技场角斗赛事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteArenaBattleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int battleType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);

                if (battleType == (int)BattleCmds.Enter) //加入大乱斗
                {
                    //角色进入大乱斗地图
                    GameManager.ArenaBattleMgr.ClientEnterArenaBattle(client);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        private static TCPProcessCmdResults ProcessSpriteGetPKKingLooksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int lookWho = Convert.ToInt32(fields[1]);
                RoleDataEx rd = GameManager.ArenaBattleMgr.KingRoleData;
                if (rd == null || rd.RoleID != lookWho)
                    return TCPProcessCmdResults.RESULT_OK;

                RoleData4Selector sel = Global.RoleDataEx2RoleData4Selector(rd);
                client.sendCmd(nID, sel);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵使用处罚NPC功能脚本事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNPCScriptCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int npcID = Convert.ToInt32(fields[1]);
                int scriptID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int errorCode = 0;

                //检测触发的npc脚本ID是否合法?
                //过滤功能
                if (Global.FilterNPCScriptByID(client, scriptID, out errorCode))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂触发的执行NPC脚本的操作, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //处理物品的使用功能
                RunNPCScripts.ProcessNPCScript(client, scriptID, npcID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵使用通知死亡事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteDeadCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                // LogManager.WriteLog(LogTypes.Error, string.Format("收到死亡消息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //如果当前是活着的(连续点击,已经复活过)
                if (client.m_CurrentLife > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.MyMagicsManyTimeDmageQueue.Clear();

                //int decoID = Global.GetRandomNumber(520, 525);

                //添加死亡特效
                //DecorationManager.AddDecoToMap(client.MapCode, client.CurrentCopyMapID,
                //    client.CurrentPos, decoID, 3 * 1000, 1 * 1000, true);

                //处理拥有皇帝特效的角色死亡，而失去皇帝特效的事件
                HuangChengManager.HandleDeadHuangDiRoleChanging(client);

              

                //系统杀死召唤的某ID怪物
                Global.SystemKillSummonMonster(client, -1);

                //取消采集状态
                GameServer.Logic.CaiJiLogic.CancelCaiJiState(client);

                string strcmd = "";

                /*
                //判断是否是地图是否允许原地或者回城复活
                if (client.MapCode == GameManager.BattleMgr.BattleMapCode)
                {
                    //炎黄战场战斗中被杀死的玩家，需要15 秒后 在所属阵营复活点复活
                    strcmd = string.Format("{0}:{1}", roleID, 1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else if (client.MapCode == GameManager.ArenaBattleMgr.BattleMapCode
                    || Global.IsHuangChengMapCode(client.MapCode))//皇城地图也是回城复活
                {
                    //竞技场角斗赛战斗中被杀死的玩家，需要60秒倒计时后 自动回城复活 复活点复活
                    strcmd = string.Format("{0}:{1}", roleID, 2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else if (Global.IsHuangChengMapCode(client.MapCode)) //如果是在皇城地图上
                {
                    if (!Global.CanHuangChengAlive(client)) //如果不能在皇城内复活
                    {
                        int toMapCode = GameManager.MainMapCode;
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            int defaultBirthPosX = gameMap.DefaultBirthPosX;
                            int defaultBirthPosY = gameMap.DefaultBirthPosY;
                            int defaultBirthRadius = gameMap.BirthRadius;

                            Global.GetHuangChengMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);

                            //从配置根据地图取默认位置
                            Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                            int posX = (int)newPos.X;
                            int posY = (int)newPos.Y;

                            //角色复活
                            Global.ClientRealive(client, posX, posY, client.RoleDirection);

                            //马上通知切换地图
                            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, toMapCode);

                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                    else //直接原地复活
                    {
                        int toMapCode = Global.GetHuangChengMapCode();
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            int defaultBirthPosX = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosX;
                            int defaultBirthPosY = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosY;
                            int defaultBirthRadius = GameManager.MapMgr.DictMaps[toMapCode].BirthRadius;

                            Global.GetHuangChengMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);

                            //从配置根据地图取默认位置
                            Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
                            int posX = (int)newPos.X;
                            int posY = (int)newPos.Y;

                            //角色复活
                            Global.ClientRealive(client, posX, posY, client.RoleDirection);

                            //马上通知切换地图
                            //GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            //    client, toMapCode, defaultBirthPosX, defaultBirthPosY, - 1, 1);

                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }
                else //判断是否允许原地复活
                {
                    //判断在指定的地图上是否可以使用指定的物品
                    if (!Global.CanMapUseGoods(client.MapCode, Data.AliveGoodsID))
                    {
                        int toMapCode = GameManager.MainMapCode;
                        GameMap gameMap = null;
                        if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            client.m_CurrentLife = client.m_CurrentLifeMax;
                            client.m_CurrentMana = client.m_CurrentManaMax;

                            //通知客户端怪已经加血加魔                                    
                            //GameManager.ClientMgr.NotifyOthersRelife(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            //client.MapCode, client.RoleID, (int)client.PosX, (int)client.PosY, (int)client.RoleDirection, (int)client.m_CurrentLife, (int)client.m_CurrentMana, (int)TCPGameServerCmds.CMD_SPR_RELIFE, 1);

                            //马上通知切换地图
                            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, toMapCode, -1, -1, -1, 1);

                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }
                */

                KTLogic.RemoveBufferData(client, (int)BufferItemTypes.DSTimeShiDuNoShow);

                client.ZhongDuStart = 0;
                client.ZhongDuSeconds = 0;
                /*client.DongJieStart = 0;
                client.DongJieSeconds = 0;*/

                //判断如果现在的地图是点将台，则清空一些数据
                if (client.DJRoomID > 0)
                {
                    if (MapTypes.DianJiangCopy == Global.GetMapType(client.MapCode))
                    {
                        // 设置角色的状态
                        GameManager.DJRoomMgr.SetRoomRolesDataRoleState(client.DJRoomID, client.RoleID, 3);
                    }
                }

                // 自动原地重生成功 [XSea 2015/7/6]
                if (Global.AutoRevive(client))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }


            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵自动战斗通知事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAutoFightCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int fightType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (fightType == (int)AutoFightCmds.Start)
                {
                    if (client.AutoFighting)
                    {
                        //通知角色自动战斗的指令信息
                        GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -1, fightType, 0);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断在指定的地图上是否可以自动挂机
                    if (!Global.CanMapAutoFight(client.MapCode))
                    {
                        //通知角色自动战斗的指令信息
                        GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -2, fightType, 0);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //自动挂机时拾取的设置
                    client.AutoFightGetThings = extTag1;
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.FightGetThings, extTag1, false);

                    client.AutoFighting = true;
                    client.AutoFightingProctect = 0;
                    client.LastAutoFightTicks = TimeUtil.NOW();

                    //通知角色自动战斗的指令信息
                    GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, 0, fightType, 0);
                }
                else if (fightType == (int)AutoFightCmds.Update)
                {
                    //永远不处理
                }
                else if (fightType == (int)AutoFightCmds.End)
                {
                    if (!client.AutoFighting)
                    {
                        //通知角色自动战斗的指令信息
                        GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -1, fightType, 0);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    client.LeftFightSeconds = 0;
                    client.AutoFighting = false;
                    client.AutoFightingProctect = 0;
                    client.LastAutoFightTicks = 0;

                    //通知角色自动战斗的指令信息
                    GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, 0, fightType, 0);

                    //根据参数判断是否自动回城?
                    if (1 == extTag1)
                    {
                        int toMapCode = GameManager.MainMapCode;
                        if (client.MapCode == GameManager.DefaultMapCode) //新手村死亡后，回城复活，是回新手村得出生点，而不是扬州城
                        {
                            toMapCode = GameManager.DefaultMapCode;
                        }

                        if (toMapCode >= 0)
                        {
                            GameMap gameMap = null;
                            if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                            {
                                bool canTransport = false;

                                //先确认是否有传送卷
                                GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
                                if (null != goodsData)
                                {
                                    //从用户物品中扣除消耗的数量
                                    if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                                    {
                                        canTransport = true; //能够被传送
                                    }
                                }
                                else
                                {
                                    goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
                                    if (null != goodsData)
                                    {
                                        //从用户物品中扣除消耗的数量
                                        if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                                        {
                                            canTransport = true; //能够被传送
                                        }
                                    }
                                }

                                if (canTransport)
                                {
                                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                        client, toMapCode, -1, -1, -1);
                                }
                                else //只能跑步前往
                                {
                                    int defaultBirthPosX = gameMap.DefaultBirthPosX;
                                    int defaultBirthPosY = gameMap.DefaultBirthPosY;
                                    int defaultBirthRadius = gameMap.BirthRadius;

                                    //从配置根据地图取默认位置
                                    Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);

                                    //从配置根据地图取默认位置
                                    int toMapX = (int)newPos.X;
                                    int toMapY = (int)newPos.Y;

                                    string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, toMapCode, toMapX, toMapY);
                                    TCPOutPacket tcpOutPacket2 = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_SPR_RUNTOMAP);
                                    tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket2);
                                }
                            }
                        }
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵骑乘通知事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int horseType = Convert.ToInt32(fields[1]);
                int horseDbID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (horseType == (int)HorseCmds.On)
                {
                    //bool oldHorse = false;

                    ////处理先前的坐骑
                    //if (client.HorseDbID > 0)
                    //{
                    //    //减去buffer属性值
                    //    //加载骑乘的属性
                    //    /// 将坐骑的扩展属性加入Buffer中
                    //    oldHorse = Global.UpdateHorseDataProps(client, false);

                    //    //记忆坐骑数据
                    //    client.HorseDbID = 0;
                    //}

                    //HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
                    //if (null == horseData)
                    //{
                    //    horseData = Global.GetHorseDataByIndex(client, 0);
                    //    if (null != horseData)
                    //    {
                    //        horseDbID = horseData.DbID;
                    //    }
                    //}

                    //if (null == horseData)
                    //{
                    //    //通知骑乘的的指令信息
                    //    GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -1, horseType, horseDbID, 0, 0, null);

                    //    if (oldHorse)
                    //    {
                    //        //通知客户端属性变化
                    //        GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    //        // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    //        GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client);
                    //    }

                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////和DBServer通讯，获取指定的DbID的内存数据, 如果失败，则不处理, 成功则保留数据，并计算buffer属性值
                    //if (Global.HorseOnDBCommand(pool, client, horseDbID) < 0)
                    //{
                    //    //通知骑乘的的指令信息
                    //    GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -2, horseType, horseDbID, 0, 0, null);

                    //    if (oldHorse)
                    //    {
                    //        //通知客户端属性变化
                    //        GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    //        // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    //        GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client);
                    //    }

                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////取消采集状态
                    //GameServer.Logic.CaiJiLogic.CancelCaiJiState(client);

                    ////记录当前的坐骑ID为最后骑乘ID
                    //client.LastHorseID = horseDbID;

                    ////记忆坐骑数据
                    //client.HorseDbID = horseDbID;

                    ////计算坐骑的积分值
                    //client.RoleHorseJiFen = Global.CalcHorsePropsJiFen(horseData);

                    ////加入buffer属性值
                    ////加载骑乘的属性
                    ///// 将坐骑的扩展属性加入Buffer中
                    //if (Global.UpdateHorseDataProps(client, true))
                    //{
                    //    //通知客户端属性变化
                    //    GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    //    // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    //    GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client);
                    //}

                    //List<Object> objsList = Global.GetAll9Clients(client);

                    ////通知骑乘的的指令信息
                    //GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, 0, horseType, horseDbID, horseData.HorseID, horseData.BodyID, objsList);
                }
                else if (horseType == (int)HorseCmds.Off)
                {
                    ////和DBServer通讯，清空当前的骑乘状态, 如果失败，则不处理, 成功则, 清空buffer属性值
                    //if (client.HorseDbID <= 0)
                    //{
                    //    //通知骑乘的的指令信息
                    //    GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -1, horseType, horseDbID, 0, 0, null);
                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    //HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
                    //if (null == horseData)
                    //{
                    //    //通知骑乘的的指令信息
                    //    GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -2, horseType, horseDbID, 0, 0, null);
                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////数据库命令坐骑乘下事件
                    //Global.HorseOffDBCommand(pool, client, horseDbID);

                    ////减去buffer属性值
                    ////加载骑乘的属性
                    ///// 将坐骑的扩展属性加入Buffer中
                    //if (Global.UpdateHorseDataProps(client, false))
                    //{
                    //    //通知客户端属性变化
                    //    GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    //    // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    //    GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client);
                    //}

                    ////记忆坐骑数据
                    //client.HorseDbID = 0;

                    //List<Object> objsList = Global.GetAll9Clients(client);

                    ////通知骑乘的的指令信息
                    //GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, 0, horseType, horseDbID, horseData.HorseID, horseData.BodyID, objsList);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// 精灵宠物通知事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpritePetCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int petType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 开始通知其他人(包括自己)宠物或者卫兵开始位移
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteChangePosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mapCode = Convert.ToInt32(fields[1]);
                int toX = Convert.ToInt32(fields[2]);
                int toY = Convert.ToInt32(fields[3]);
                int toDirection = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //必须是宠物或者卫兵才可以
                if (roleID < SpriteBaseIds.PetBaseId)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //切换在地图上的位置2(同一个地图才需要通知)
                GameManager.ClientMgr.ChangePosition2(tcpMgr.MySocketListener, pool, null, roleID, mapCode, client.CopyMapID, toX, toY, toDirection, null);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 角色获取点将台房间列表指令
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteDianJiangListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int viewType = Convert.ToInt32(fields[1]);
                KPlayer client = GameManager.ClientMgr.FindClient(roleID);
                if (null == client)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (1 == viewType) //关闭点将台窗口
                {
                    client.ViewDJRoomDlg = false;
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.ViewDJRoomDlg = true;

                //获取点将台房间数据列表
                List<DJRoomData> djRoomDataList = GameManager.DJRoomMgr.CloneRoomDataList();

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<DJRoomData>>(djRoomDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 处理角色点将台指令
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteDianJiangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int djCmdType = Convert.ToInt32(fields[1]);
                int extTag1 = Convert.ToInt32(fields[2]);
                string extTag2 = fields[3];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (djCmdType == (int)DianJiangCmds.CreateRoom)
                {
                    if (client.DJRoomID > 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    client.DJRoomID = GameManager.DJRoomMgr.GetNewRoomID();
                    client.DJRoomTeamID = 1;

                    DJRoomData roomData = new DJRoomData()
                    {
                        RoomID = client.DJRoomID,
                        CreateRoleID = client.RoleID,
                        CreateRoleName = Global.FormatRoleName(client, client.RoleName),
                        RoomName = extTag2,
                        VSMode = extTag1,
                        PKState = 0,
                        PKRoleNum = 1,
                        ViewRoleNum = 0,
                        StartFightTicks = 0,
                    };

                    GameManager.DJRoomMgr.AddRoomData(roomData);

                    DJRoomRolesData djRoomRolesData = new DJRoomRolesData()
                    {
                        RoomID = roomData.RoomID,
                        Team1 = new List<DJRoomRoleData>(),
                        Team2 = new List<DJRoomRoleData>(),
                        ViewRoles = new List<DJRoomRoleData>(),
                        TeamStates = new Dictionary<int, int>(),
                        RoleStates = new Dictionary<int, int>(),
                    };

                    //创建时不需要锁定
                    djRoomRolesData.Team1.Add(new DJRoomRoleData()
                    {
                        RoleID = client.RoleID,
                        RoleName = Global.FormatRoleName(client, client.RoleName),
                        Level = client.m_Level,
                       
                    });

                    djRoomRolesData.RoleStates[client.RoleID] = 0;

                    GameManager.DJRoomMgr.AddRoomRolesData(djRoomRolesData);

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, roomData);

                    //通知点将台房间成员数据的指令信息
                    GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);

                    //发送信息
                    //GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, client.DJRoomID, "", false);
                }
                else if (djCmdType == (int)DianJiangCmds.RemoveRoom)
                {
                    /// 销毁点将台房间        
                    int ret = GameManager.ClientMgr.DestroyDianJiangRoom(tcpMgr.MySocketListener, pool, client);
                    if (ret < 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, ret, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (djCmdType == (int)DianJiangCmds.EnterRoom)
                {
                    if (client.DJRoomID > 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag1);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag1);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    int teamID = 1;
                    int vsMode = djRoomData.VSMode;
                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Removed > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomRolesData.Locked > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bool noPosition = false;
                        if (djRoomRolesData.Team1.Count >= vsMode && djRoomRolesData.Team2.Count >= vsMode)
                        {
                            noPosition = true;
                        }

                        if (noPosition)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomRolesData.Team1.Count < vsMode && djRoomRolesData.Team2.Count < vsMode)
                        {
                            if (0 == Global.GetRandomNumber(0, 2))
                            {
                                teamID = 1;
                                djRoomRolesData.Team1.Add(new DJRoomRoleData()
                                {
                                    RoleID = client.RoleID,
                                    RoleName = Global.FormatRoleName(client, client.RoleName),
                                    Level = client.m_Level,
                                  
                                });
                            }
                            else
                            {
                                teamID = 2;
                                djRoomRolesData.Team2.Add(new DJRoomRoleData()
                                {
                                    RoleID = client.RoleID,
                                    RoleName = Global.FormatRoleName(client, client.RoleName),
                                    Level = client.m_Level,
                                 
                                });
                            }
                        }
                        else if (djRoomRolesData.Team1.Count < vsMode)
                        {
                            teamID = 1;
                            djRoomRolesData.Team1.Add(new DJRoomRoleData()
                            {
                                RoleID = client.RoleID,
                                RoleName = Global.FormatRoleName(client, client.RoleName),
                                Level = client.m_Level,
                               
                            });
                        }
                        else if (djRoomRolesData.Team2.Count < vsMode)
                        {
                            teamID = 2;
                            djRoomRolesData.Team2.Add(new DJRoomRoleData()
                            {
                                RoleID = client.RoleID,
                                RoleName = Global.FormatRoleName(client, client.RoleName),
                                Level = client.m_Level,
                               
                            });
                        }

                        djRoomRolesData.RoleStates[client.RoleID] = 0;
                    }

                    client.DJRoomID = djRoomData.RoomID;
                    client.DJRoomTeamID = teamID;

                    lock (djRoomData)
                    {
                        djRoomData.PKRoleNum++;
                    }

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    //通知点将台房间成员数据的指令信息
                    GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);

                    //发送信息
                    GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, client.DJRoomID, Global.FormatRoleName(client, client.RoleName), true);
                }
                else if (djCmdType == (int)DianJiangCmds.LeaveRoom)
                {
                    /// 离开点将台房间        
                    int ret = GameManager.ClientMgr.LeaveDianJiangRoom(tcpMgr.MySocketListener, pool, client);
                    if (ret < 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, ret, djCmdType, client.DJRoomID, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else if (djCmdType == (int)DianJiangCmds.KickRole)
                {
                    if (client.DJRoomID <= 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.DJRoomID);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, client.DJRoomID, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断自己是否是房间的创建者
                    if (djRoomData.CreateRoleID != client.RoleID)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, client.DJRoomID, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断房间的是否已经开始了战斗，开始了则无法直接删除了
                    lock (djRoomData)
                    {
                        if (djRoomData.PKState > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, client.DJRoomID, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.DJRoomID);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, client.DJRoomID, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Locked > 0) //没有锁定时才可以操作
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, client.DJRoomID, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //发送信息
                    GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, (int)djCmdType, extTag1, extTag2, true);

                    bool found = false;
                    lock (djRoomRolesData)
                    {
                        for (int i = 0; i < djRoomRolesData.Team1.Count; i++)
                        {
                            if (extTag1 == djRoomRolesData.Team1[i].RoleID)
                            {
                                found = true;
                                djRoomRolesData.Team1.RemoveAt(i);
                                break;
                            }
                        }

                        if (!found)
                        {
                            for (int i = 0; i < djRoomRolesData.Team2.Count; i++)
                            {
                                if (extTag1 == djRoomRolesData.Team2[i].RoleID)
                                {
                                    found = true;
                                    djRoomRolesData.Team2.RemoveAt(i);
                                    break;
                                }
                            }
                        }

                        djRoomRolesData.TeamStates.Remove(extTag1);
                        djRoomRolesData.RoleStates.Remove(extTag1);
                    }

                    if (found)
                    {
                        KPlayer gc = GameManager.ClientMgr.FindClient(extTag1);
                        if (null != gc)
                        {
                            gc.DJRoomID = -1;
                            gc.DJRoomTeamID = -1;
                            gc.HideSelf = 0;
                        }

                        lock (djRoomData)
                        {
                            djRoomData.PKRoleNum--;
                        }
                    }

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    //通知点将台房间成员数据的指令信息
                    GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
                }
                else if (djCmdType == (int)DianJiangCmds.ChangeTeam)
                {
                    if (client.DJRoomID <= 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.DJRoomID);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断自己是否是房间的创建者
                    if (djRoomData.CreateRoleID == client.RoleID)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断房间的是否已经开始了战斗，开始了则无法直接删除了
                    lock (djRoomData)
                    {
                        if (djRoomData.PKState > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.DJRoomID);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Removed > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomRolesData.Locked > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -7, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    int toTeam = extTag1;
                    int roomID = client.DJRoomID;

                    lock (djRoomRolesData)
                    {
                        DJRoomRoleData djRoomRoleData = null;
                        if (1 == toTeam)
                        {
                            if (djRoomRolesData.Team1.Count < djRoomData.VSMode)
                            {
                                for (int i = 0; i < djRoomRolesData.Team2.Count; i++)
                                {
                                    if (client.RoleID == djRoomRolesData.Team2[i].RoleID)
                                    {
                                        djRoomRoleData = djRoomRolesData.Team2[i];
                                        djRoomRolesData.Team2.RemoveAt(i);
                                        break;
                                    }
                                }

                                if (null != djRoomRoleData)
                                {
                                    djRoomRolesData.Team1.Add(djRoomRoleData);
                                }
                                else
                                {
                                    return TCPProcessCmdResults.RESULT_OK;
                                }
                            }
                            else
                            {
                                //发送错误信息
                                GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -100, djCmdType, client.DJRoomID, Global.GetLang("队伍1"), false);
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        else if (2 == toTeam)
                        {
                            if (djRoomRolesData.Team2.Count < djRoomData.VSMode)
                            {
                                for (int i = 0; i < djRoomRolesData.Team1.Count; i++)
                                {
                                    if (client.RoleID == djRoomRolesData.Team1[i].RoleID)
                                    {
                                        djRoomRoleData = djRoomRolesData.Team1[i];
                                        djRoomRolesData.Team1.RemoveAt(i);
                                        break;
                                    }
                                }

                                if (null != djRoomRoleData)
                                {
                                    djRoomRolesData.Team2.Add(djRoomRoleData);
                                }
                                else
                                {
                                    return TCPProcessCmdResults.RESULT_OK;
                                }
                            }
                            else
                            {
                                //发送错误信息
                                GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -100, djCmdType, client.DJRoomID, Global.GetLang("队伍2"), false);
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                    }

                    client.DJRoomTeamID = toTeam;

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    //通知点将台房间成员数据的指令信息
                    GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);

                    extTag2 = string.Format(Global.GetLang("房间{0}中的{1}"), djRoomData.RoomName, Global.FormatRoleName(client, client.RoleName));

                    //发送信息
                    GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, extTag1, extTag2, true);
                }
                else if (djCmdType == (int)DianJiangCmds.ChangeState)
                {
                    if (client.DJRoomID <= 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.DJRoomID);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //判断房间的是否已经开始了战斗，开始了则无法直接删除了
                    lock (djRoomData)
                    {
                        if (djRoomData.PKState > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.DJRoomID);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, 0, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    int toState = extTag1;
                    int roomID = client.DJRoomID;

                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Removed > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomRolesData.Locked > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, 0, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        djRoomRolesData.TeamStates[client.RoleID] = toState;

                        int stateCount = 0;
                        foreach (var state in djRoomRolesData.TeamStates.Values)
                        {
                            if (state > 0)
                            {
                                stateCount++;
                            }
                        }

                        if (stateCount >= (djRoomData.VSMode * 2))
                        {
                            djRoomRolesData.Locked = 1;
                        }
                    }

                    bool startFight = false;

                    //判断自己是否是房间的创建者
                    if (djRoomData.CreateRoleID == client.RoleID)
                    {
                        if (djRoomRolesData.Locked > 0)
                        {
                            lock (djRoomData)
                            {
                                if (djRoomData.PKState <= 0)
                                {
                                    djRoomData.PKState = 1; //开始战斗
                                    djRoomData.StartFightTicks = TimeUtil.NOW();
                                    startFight = true;
                                }
                            }
                        }
                    }

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    //通知点将台房间成员数据的指令信息
                    GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);

                    /// 通知点将台房间内的玩家传动到点将台地图
                    if (startFight)
                    {
                        GameManager.ClientMgr.TransportDianJiangRoom(tcpMgr.MySocketListener, pool, client);
                    }
                }
                else if (djCmdType == (int)DianJiangCmds.ViewFight)
                {
                    if (client.DJRoomID > 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag1);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (djRoomData)
                    {
                        if (djRoomData.PKState >= 3)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomData.ViewRoleNum >= 30)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag1);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Removed > 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        if (djRoomRolesData.Locked <= 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -7, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        djRoomRolesData.ViewRoles.Add(new DJRoomRoleData()
                        {
                            RoleID = client.RoleID,
                            RoleName = Global.FormatRoleName(client, client.RoleName),
                            Level = client.m_Level,
                          
                        });
                    }

                    client.DJRoomID = djRoomData.RoomID;
                    client.DJRoomTeamID = -1;
                    client.HideSelf = 1;

                    int startFightStae = 0;
                    long startFightTicks = 0;
                    lock (djRoomData)
                    {
                        startFightStae = djRoomData.DJFightState;
                        startFightTicks = djRoomData.StartFightTicks;
                        djRoomData.ViewRoleNum++;
                    }

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    //立刻传送到点将台地图
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, Global.DianJiangTaiMapCode, -1, -1, -1);

                    /// 通知角色点将台房间内战斗的指令信息(参战者，观众)
                    GameManager.ClientMgr.NotifyDianJiangFightCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        djRoomData, startFightStae, startFightTicks.ToString(), client);
                }
                else if (djCmdType == (int)DianJiangCmds.ToViewer)
                {
                    if (client.DJRoomID <= 0)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    extTag1 = client.DJRoomID;

                    //查找房间数据
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag1);
                    if (null == djRoomData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //查找房间角色数据
                    DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag1);
                    if (null == djRoomRolesData)
                    {
                        //发送错误信息
                        GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag1, "", false);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    lock (djRoomRolesData)
                    {
                        if (djRoomRolesData.Locked <= 0)
                        {
                            //发送错误信息
                            GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag1, "", false);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        djRoomRolesData.ViewRoles.Add(new DJRoomRoleData()
                        {
                            RoleID = client.RoleID,
                            RoleName = Global.FormatRoleName(client, client.RoleName),
                            Level = client.m_Level,
                         
                        });
                    }

                    lock (djRoomData)
                    {
                        djRoomData.ViewRoleNum++;
                    }

                    //发送房间数据
                    GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);

                    client.DJRoomTeamID = -1;
                    client.HideSelf = 1;

                    client.m_CurrentLife = client.m_CurrentLifeMax;
                    client.m_CurrentMana = client.m_CurrentManaMax;

                    //通知自己要复活
                    GameManager.ClientMgr.NotifyMySelfRealive(tcpMgr.MySocketListener, pool, client, roleID,
                        client.PosX, client.PosY, client.RoleDirection);

                    {
                     
                      

                      
                        GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                        // 总生命值和魔法值变化通知(同一个地图才需要通知)
                        GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, false);
                    }
                }
                else if (djCmdType == (int)DianJiangCmds.ToLeave)
                {
                    int toMapCode = client.LastMapCode;
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        client.m_CurrentLife = client.m_CurrentLifeMax;
                        client.m_CurrentMana = client.m_CurrentManaMax;

                        //通知客户端怪已经加血加魔                                    
                        //GameManager.ClientMgr.NotifyOthersRelife(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        //client.MapCode, client.RoleID, (int)client.PosX, (int)client.PosY, (int)client.RoleDirection, (int)client.m_CurrentLife, (int)client.m_CurrentMana, (int)TCPGameServerCmds.CMD_SPR_RELIFE, 1);

                        //马上通知切换地图
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, toMapCode, client.LastPosX, client.LastPosY, -1, 1);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 处理获取点将台排名100列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetDJPointsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵传动到其他地图事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGoToMapCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int toMapCode = Convert.ToInt32(fields[1]);
                if (Global.CanEnterMap(client, toMapCode))
                {
                    Global.GotoMap(client, toMapCode);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 根据名称查询ID，并让客户端执行相关操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryNameByIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端获取坐骑列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetHorseListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端获取其他玩家的坐骑列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetOtherHorseListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端获取宠物列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetPetListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端撵走坐骑
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteModeHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int horseDbID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

     

    
        private static TCPProcessCmdResults ProcessSpriteGetGoodsListBySiteCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int site = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
                if (TCPProcessCmdResults.RESULT_FAILED != result)
                {
                    //处理本地精简的好友列表数据
                    List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);

                    client.PortableGoodsDataList = goodsDataList;
                }

                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端获取金蛋仓库中的物品列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
      


        /// <summary>
        /// 客户端获取线路信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetLineInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                long clientTicks = Convert.ToInt64(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                long serverTicks = TimeUtil.NOW();
                string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, clientTicks, serverTicks, GameManager.ClientMgr.GetClientCount());
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取物品合成类型列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetMergeTypesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int npcID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                npcID = (npcID - SpriteBaseIds.NpcBaseId);
                List<int> mergeTypesList = new List<int>();
                foreach (var systemMergeType in GameManager.systemGoodsMergeTypes.SystemXmlItemDict.Values)
                {
                    //是否是此NPC的操作
                    string Npcs = systemMergeType.GetStringValue("NPCs");
                    if (!string.IsNullOrEmpty(Npcs))
                    {
                        string[] npcFields = Npcs.Split(',');
                        bool foundNPC = false;
                        for (int i = 0; i < npcFields.Length; i++)
                        {
                            if (npcFields[i] == npcID.ToString())
                            {
                                foundNPC = true;
                                break;
                            }
                        }

                        if (!foundNPC) //不是此NPC的操作
                        {
                            continue;
                        }
                    }

                    //性别条件
                    int taskSex = systemMergeType.GetIntValue("SexCondition");
                    if (-1 != taskSex)
                    {
                        if (client.RoleSex != taskSex)
                        {
                            continue;
                        }
                    }

                    //职业条件
                    int taskOccupation = systemMergeType.GetIntValue("OccupCondition");
                    if (-1 != taskOccupation)
                    {
                        // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                        int nOcc = Global.CalcOriginalOccupationID(client);

                        if (nOcc != taskOccupation)
                        {
                            continue;
                        }
                    }

                    //必须够了级别
                    int minLevel = systemMergeType.GetIntValue("MinLevel");
                    if (client.m_Level < minLevel)
                    {
                        continue;
                    }

                    mergeTypesList.Add(systemMergeType.GetIntValue("ID"));
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(mergeTypesList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取物品合成项列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetMergeItemsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mergeTypeID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<int> mergeItemsList = new List<int>();
                foreach (var systemMergeItem in GameManager.systemGoodsMergeItems.SystemXmlItemDict.Values)
                {
                    if (mergeTypeID != systemMergeItem.GetIntValue("MergeType"))
                    {
                        continue;
                    }

                    mergeItemsList.Add(systemMergeItem.GetIntValue("ID"));
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(mergeItemsList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取合成的新物品列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMergeNewGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 合成改造 -- 增加‘翅膀合成’ [12/12/2013 LiaoWei]
                int roleID = Convert.ToInt32(fields[0]);
                int mergeItemID = Convert.ToInt32(fields[1]);
                int luckyGoodsID = Convert.ToInt32(fields[2]);
                int WingDBID = Convert.ToInt32(fields[3]);
                int CrystalDBID = Convert.ToInt32(fields[4]);
                int nUseBindItemFirst = Convert.ToInt32(fields[5]);   // 是否先扣除绑定物品

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理合成的新物品
                int ret = MergeNewGoods.Process(client, mergeItemID, luckyGoodsID, WingDBID, CrystalDBID, nUseBindItemFirst);

                string strcmd = "";

                strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, ret, -1, -1);

                // 如果合成失败是由于概率没到 为了让客户端显示正常 增加两个返回值 -- 翅膀DBID 和 翅膀的强化等级 [1/27/2014 LiaoWei]
                if (ret == -300)
                {
                    GoodsData goodData = null;

                    goodData = Global.GetGoodsByDbID(client, WingDBID);

                    if (goodData != null && goodData.Forge_level == 1)
                        strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, ret, WingDBID, goodData.Forge_level);
                }


                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取经脉的列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
      

      

        /// <summary>
        /// Có đối tượng mới xung quanh
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteLoadAlreadyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //判断类型
                GSpriteTypes spriteType = Global.GetSpriteType((UInt32)otherRoleID);
                if (GSpriteTypes.Other == spriteType) //其他玩家
                {
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        Global.HandleGameClientLoaded(client, otherClient);
                    }
                }
                else if (GSpriteTypes.Monster == spriteType) //怪物
                {
                    Monster monster = GameManager.MonsterMgr.FindMonster(client.MapCode, otherRoleID);
                    if (null != monster)
                    {
                        Global.HandleMonsterLoaded(client, monster);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行装备进阶的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEquipUpgradeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int goodsDbID = Convert.ToInt32(fields[1]);
                int ironNum = Convert.ToInt32(fields[2]);//保留，但不使用
                int goldRock = Convert.ToInt32(fields[3]);//保留，但不使用
                int luckyNum = Convert.ToInt32(fields[4]);//保留，但不使用
                luckyNum = Global.GMin(luckyNum, 1);//保留，但不使用

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理装备进阶
                int newDbID = EquipUpgradeMgr.ProcessUpgrade(client, goodsDbID);

                string strcmd = string.Format("{0}:{1}", roleID, newDbID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行宝石镶嵌的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEnchaseJewelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int actionType = Convert.ToInt32(fields[1]);
                int equipGoodsDbID = Convert.ToInt32(fields[2]);
                int jewelGoodsIDorDbID = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理宝石镶嵌
                string jewellist = "";
                int binding = 0;
                int result = EnchaseJewelMgr.ProcessEnchaseJewel(client, actionType, equipGoodsDbID, jewelGoodsIDorDbID, out jewellist, out binding);

                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, result, equipGoodsDbID, jewellist, binding);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行获取闭关信息操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteShowBigGuanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //计算已经经过的闭关时间
                long nowTime = TimeUtil.NOW();
                long msecs = Math.Max(nowTime - client.BiGuanTime, 0);
                msecs = Math.Min(msecs, 12 * 60 * 60 * 1000); //最多12个小时

                SystemXmlItem systemBigGuan = null;

                //闭关收益表
                if (!GameManager.systemBiGuanMgr.SystemXmlItemDict.TryGetValue(client.m_Level, out systemBigGuan))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("从闭关收益表定位收益数据时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                double minuteExperience = systemBigGuan.GetDoubleValue("Experience");
                double minuteInterPower = systemBigGuan.GetDoubleValue("InterPower");

                int biguanExperience = (int)(((msecs / 1000) / 60.0) * minuteExperience);
                int biguanInterPower = (int)(((msecs / 1000) / 60.0) * minuteInterPower);

                string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, msecs, biguanExperience, biguanInterPower);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行领取闭关经验和灵力的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetBigGuanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int actionType = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //计算已经经过的闭关时间
                long nowTime = TimeUtil.NOW();
                long msecs = Math.Max(nowTime - client.BiGuanTime, 0);
                msecs = Math.Min(msecs, 12 * 60 * 60 * 1000); //最多12个小时

                SystemXmlItem systemBigGuan = null;

                //闭关收益表
                if (!GameManager.systemBiGuanMgr.SystemXmlItemDict.TryGetValue(client.m_Level, out systemBigGuan))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("从闭关收益表定位收益数据时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                double minuteExperience = systemBigGuan.GetDoubleValue("Experience");
                double minuteInterPower = systemBigGuan.GetDoubleValue("InterPower");

                int biguanExperience = (int)(((msecs / 1000) / 60.0) * minuteExperience);
                int biguanInterPower = (int)(((msecs / 1000) / 60.0) * minuteInterPower);

                //是否领取双倍经验
                if (actionType > 0)
                {
                    //领取双倍的闭关经验的闭关令牌ID
                    int gigGuanLingPaiID = (int)GameManager.systemParamsList.GetParamValueIntByName("BigGuanLingPaiID");
                    if (Global.GetTotalGoodsCountByID(client, gigGuanLingPaiID) > 0)
                    {
                        bool usedBinding = false;
                        bool usedTimeLimited = false;

                        //从用户物品中扣除消耗的数量
                        if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, gigGuanLingPaiID, 1, false, out usedBinding, out usedTimeLimited))
                        {
                            biguanExperience *= 2;
                            biguanInterPower *= 2;
                        }
                    }
                }

                //重新开始闭关的的时间
                client.BiGuanTime = nowTime;

                //异步写数据库，写入当前的重新开始闭关的的时间
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_RESETBIGUAN,
                    string.Format("{0}:{1}", client.RoleID, nowTime),
                    null, client.ServerId);

                //领取经验
                if (biguanExperience > 0)
                {
                    //处理角色经验
                    GameManager.ClientMgr.ProcessRoleExperience(client, biguanExperience, true, false);
                }

                ////领取灵力
                //if (biguanInterPower > 0)
                //{
                //    GameManager.ClientMgr.AddInterPower(client, biguanInterPower, true);
                //}

                string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, 0, 0, 0);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, (int)TCPGameServerCmds.CMD_SPR_SHOWBIGUAN);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// 精灵进行获取经脉综合信息的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteJingMaiInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

            
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        #region 交易市场/MU新的摆摊

        /// <summary>
        /// 精灵进行获取离线摆摊市场的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetLiXianBaiTanTicksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = string.Format("{0}:{1}", roleID, GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行修改离线摆摊市场的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUpdateLiXianBaiTanTicksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int liXianBaiTanSecs = Math.Max(0, Convert.ToInt32(fields[1]));

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                int buyTicks = Global.ConstMaxLiXianBaiTanTicks - GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client);
                if (liXianBaiTanSecs * 1000 > buyTicks)
                {
                    liXianBaiTanSecs = buyTicks / 1000;
                    if (buyTicks == 0)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, StringUtil.substitute(Global.GetLang("您当前的剩余离线摆摊时长达到上限，无需购买!")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }
                }

                int hours = liXianBaiTanSecs / (60 * 60);
                int liXianBaiTanTicks = hours * (60 * 60 * 1000);

                //这里要将额外购买到的消耗金币
                if (liXianBaiTanTicks > 0)
                {
                    int liXianNeedJinBi = Math.Max(1, (int)GameManager.systemParamsList.GetParamValueIntByName("LiXianNeedJinBi"));

                    if (client.YinLiang < (hours * liXianNeedJinBi))
                    {
                        strcmd = string.Format("{0}:{1}", roleID, -1);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //扣除金币
                    if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, (hours * liXianNeedJinBi), "离线摆摊"))
                    {
                        strcmd = string.Format("{0}:{1}", roleID, -2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //更新离线摆摊的市场
                    GameManager.ClientMgr.ModifyLiXianBaiTanTicksValue(client, liXianBaiTanTicks, true);
                }

                strcmd = string.Format("{0}:{1}", roleID, GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行交易市场的打开操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteOpenMarketCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int offlineMarket = Convert.ToInt32(fields[1]);
                string marketName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";
                if (string.IsNullOrEmpty(marketName)) //停止摆摊
                {
                    client.AllowMarketBuy = false;
                    client.MarketName = "";

                    strcmd = string.Format("{0}:{1}:{2}", roleID, marketName, offlineMarket);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    return TCPProcessCmdResults.RESULT_DATA;
                }

                marketName = marketName.Substring(0, Math.Min(10, marketName.Length));

                //判断是否有需要摆摊的物品
                if (client.SaleGoodsDataList.Count <= 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("请至少上架一件物品才能摆摊!")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //如果是离线摆摊
                if (offlineMarket > 0)
                {
                    if (client.VipLevel < 3)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, StringUtil.substitute(Global.GetLang("离线摆摊需要VIP等级达到3级!")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.VIPNotEnough);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if ((GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000) <= 0)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, StringUtil.substitute(Global.GetLang("您当前的剩余离线摆摊时长为零，无法进行离线摆摊!")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }

                //当前位置是否允许打开交易市场
                if (!Global.AllowOpenMarket(client))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("只有【勇者大陆】安全区中才允许摆摊!")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //判断角色想要摆摊的格子处是否有人摆摊，如果有的话，就要提示不再允许摆摊
                if (!Global.CanOpenMarketByPos(client.MapCode, client.CurrentGrid))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("此位置已经有人在摆摊中，请在1米外其他位置进行摆摊!")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.AllowMarketBuy = true;
                client.OfflineMarketState = offlineMarket;
                client.MarketName = marketName;

                //strcmd = string.Format("{0}:{1}:{2}", roleID, marketName, offlineMarket);
                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                GameManager.ClientMgr.NotifySpriteMarketName(tcpMgr.MySocketListener, pool, client, marketName, offlineMarket);

                ChengJiuManager.OnFirstBaiTan(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Hàm thực hiện mua đồ trên sạp hàng
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMarketSaleMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int saleOutMoney = Math.Max(0, Convert.ToInt32(fields[1]));
                int userMoneyPrice = Math.Max(0, Convert.ToInt32(fields[2]));

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //是否禁用交易市场购买功能
                int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
                if (disableMarket > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //如果已经在摆摊中，则不能再上线物品
                if (client.AllowMarketBuy)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";
                if (saleOutMoney > client.YinLiang)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, saleOutMoney, userMoneyPrice, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除银两
                if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleOutMoney, "交易市场中出售金币"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, saleOutMoney, userMoneyPrice, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                GoodsData goodsData = Global.GetNewGoodsData((int)SaleGoodsConsts.BaiTanJinBiGoodsID, 0);
                goodsData.Site = (int)SaleGoodsConsts.SaleGoodsID;
             
                Global.AddSaleGoodsData(client, goodsData);

                //int goodsDbID = Global.AddGoodsDBCommand_Hook(pool, client,
                //    goodsData.GoodsID,
                //    goodsData.GCount,

                //    goodsData.Props,
                //    goodsData.Forge_level,
                //    goodsData.Forge_level,
                //    goodsData.Site,

                //    false,
                //    0,
                //    /**/"临时摆摊需要",
                //    false,
                //    Global.ConstGoodsEndTime,
                //    goodsData.AddPropIndex,
                //    goodsData.BornIndex,
                //    goodsData.Lucky,
                //    goodsData.Strong,
                //    goodsData.ExcellenceInfo,
                //    goodsData.AppendPropLev,
                //    goodsData.ChangeLifeLevForEquip);

                //if (goodsDbID < 0)
                //{
                //    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, saleOutMoney, userMoneyPrice, goodsData.Id);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                int goodsDbID = 0;

                goodsData.Id = goodsDbID;

                //向DBServer请求修改物品
                string[] dbFields = null;
                strcmd = Global.FormatUpdateDBGoodsStr(roleID, goodsDbID, "*", "*", "*", "*", goodsData.Site, "*", "*", "*", "*", "*", 0, 0, 0, "*", "*", "*", "*", "*", "*", "*", "*"); 
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -4, roleID, saleOutMoney, userMoneyPrice, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5, roleID, saleOutMoney, userMoneyPrice, goodsData.Id);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "铜钱交易上架");
                EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "铜钱交易上架");

                //将新修改的物品加入出售物品管理列表
                SaleGoodsManager.AddSaleGoodsItem(new SaleGoodsItem()
                {
                    GoodsDbID = goodsData.Id,
                    SalingGoodsData = goodsData,
                    Client = client,
                });

                //如果从0到1，则加入摊位管理
                if (1 == client.SaleGoodsDataList.Count)
                {
                    SaleRoleManager.AddSaleRoleItem(client);
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, saleOutMoney, userMoneyPrice, goodsData.Id);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行挂售物品的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSaleGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 7)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int goodsDbID = Convert.ToInt32(fields[1]);
                int site = Convert.ToInt32(fields[2]);
                int saleMoney1 = Convert.ToInt32(fields[3]);
                int saleYuanBao = Convert.ToInt32(fields[4]);
                int saleYinPiao = Convert.ToInt32(fields[5]);
                int saleGoodsCount = Convert.ToInt32(fields[6]);

                // 金币也可以作上架用 ChenXiaojun
                // saleMoney1 = 0;
                saleYinPiao = 0;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //是否禁用交易市场购买功能
                int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
                if (disableMarket > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //如果已经在摆摊中，则不能再上线物品 // 策划要求去掉这个判断 2014.4.11
                /*if (client.AllowMarketBuy)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }*/

                string strcmd = "";
                int bagIndex = 0;

                //修改内存中物品记录
                GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
                if (null == goodsData)
                {
                    goodsData = Global.GetSaleGoodsDataByDbID(client, goodsDbID);
                    if (null == goodsData)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("从交易市场定位物品对象失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsDbID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else
                    {
                        if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Endtime, true))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, StringUtil.substitute(Global.GetLang("背包已满，无法将物品从市场下架到背包中")),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                        bagIndex = Global.GetIdleSlotOfBagGoods(client); //找到空闲的包裹格子
                    }
                }
                else //如果是从背包到挂售的列表，则判断此物品是否可以挂售
                {
                    if (goodsData.Using > 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", StdErrorCode.Error_Goods_Is_Using, roleID, goodsDbID, site, saleMoney1, saleYuanBao);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (goodsData.Binding > 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -100, roleID, goodsDbID, site, saleMoney1, saleYuanBao);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (Global.IsTimeLimitGoods(goodsData))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -101, roleID, goodsDbID, site, saleMoney1, saleYuanBao);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //判断已经挂售的物品是否超过了最大限制
                    if (Global.GetSaleGoodsDataCount(client) >= (int)SaleGoodsConsts.MaxSaleNum)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -110, roleID, goodsDbID, site, saleMoney1, saleYuanBao);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //判断如果要挂售的物品可以叠加，并且出售的数量小于物品的数量，则执行拆分操作
                    int gridNum = Global.GetGoodsGridNumByID(goodsData.GoodsID);

                    //不做任何处理
                    if (gridNum > 1 && saleGoodsCount > 0 && saleGoodsCount < goodsData.GCount)
                    {
                        //根据参数命令拆分物品
                        if (TCPProcessCmdResults.RESULT_OK != Global.SplitGoodsByCmdParams(client, socket, (int)TCPGameServerCmds.CMD_SPR_SPLIT_GOODS, roleID, goodsData.Id, goodsData.Site, goodsData.GoodsID, goodsData.GCount - saleGoodsCount, false))
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -201, roleID, goodsDbID, site, saleMoney1, saleYuanBao);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                }

                //向DBServer请求修改物品
                string[] dbFields = null;
                strcmd = Global.FormatUpdateDBGoodsStr(roleID, goodsDbID, "*", "*", "*", "*", site, "*", "*", "*", "*", bagIndex, saleMoney1, saleYuanBao, saleYinPiao, "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -1, roleID, goodsDbID, site, saleMoney1, saleYuanBao, saleYinPiao);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", -10, roleID, goodsDbID, site, saleMoney1, saleYuanBao, saleYinPiao);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                goodsData.BagIndex = bagIndex;
                if (goodsData.Site != site) //位置没有改变
                {
                    if (goodsData.Site == 0 && site == (int)SaleGoodsConsts.SaleGoodsID) //原来在背包, 现在到出售列表
                    {
                        Global.RemoveGoodsData(client, goodsData);

                        goodsData.Site = site;
                     
                        Global.AddSaleGoodsData(client, goodsData);

                        //写入角色物品的得失行为日志(扩展)
                        Global.ModRoleGoodsEvent(client, goodsData, 0, "交易上架");
                        EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "交易上架");

                        //将新修改的物品加入出售物品管理列表
                        SaleGoodsManager.AddSaleGoodsItem(new SaleGoodsItem()
                        {
                            GoodsDbID = goodsData.Id,
                            SalingGoodsData = goodsData,
                            Client = client,
                        });

                        //如果从0到1，则加入摊位管理
                        if (1 == client.SaleGoodsDataList.Count)
                        {
                            SaleRoleManager.AddSaleRoleItem(client);
                        }

                        // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                        //更新重量
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, false, false);
                    }
                    else if (goodsData.Site == (int)SaleGoodsConsts.SaleGoodsID && site == 0) //原来在出售列表, 现在到背包
                    {
                        //从出售列表中删除
                        SaleGoodsManager.RemoveSaleGoodsItem(goodsData.Id);

                        Global.RemoveSaleGoodsData(client, goodsData);

                        if ((int)SaleGoodsConsts.BaiTanJinBiGoodsID != goodsData.GoodsID)
                        {
                            goodsData.Site = site;
                        
                            Global.AddGoodsData(client, goodsData);

                            //写入角色物品的得失行为日志(扩展)
                            Global.ModRoleGoodsEvent(client, goodsData, 0, "交易下架");
                            EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "交易下架");
                        }
                        else
                        {
                         
                        }

                        //如果从1到0，则删除摊位管理
                        if (0 == client.SaleGoodsDataList.Count)
                        {
                            SaleRoleManager.RemoveSaleRoleItem(client.RoleID);
                        }

                        // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                        //更新重量
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, true, false);
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", 0, roleID, goodsDbID, site, saleMoney1, saleYuanBao, saleYinPiao);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行获取自己挂售物品的列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSelfSaleGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<GoodsData> saleGoodsDataList = client.SaleGoodsDataList;
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(saleGoodsDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行获取其他人挂售物品的列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteOtherSaleGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<GoodsData> saleGoodsDataList = new List<GoodsData>();
                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null != otherClient)
                {
                    saleGoodsDataList = otherClient.SaleGoodsDataList;
                }
               

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(saleGoodsDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行获取正在出售物品的角色列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMarketRoleListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<SaleRoleData> saleRoleDataList = SaleRoleManager.GetSaleRoleDataList();
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<SaleRoleData>>(saleRoleDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行获取正在出售物品的角色列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMarketGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int marketSearchType = Convert.ToInt32(fields[1]);
                string marketSearchText = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<SaleGoodsData> saleGoodsDataList = null;
                if ((int)MarketSearchTypes.SearchAll == marketSearchType) //返回全部
                {
                    saleGoodsDataList = SaleGoodsManager.GetSaleGoodsDataList();
                }
                else if ((int)MarketSearchTypes.SearchGoodsIDs == marketSearchType) //根据物品ID匹配返回
                {
                    Dictionary<int, bool> goodsIDDict = new Dictionary<int, bool>();
                    string[] searchFileds = marketSearchText.Split(',');
                    if (null != searchFileds && searchFileds.Length > 0)
                    {
                        for (int i = 0; i < searchFileds.Length; i++)
                        {
                            int searchGoodsID = Global.SafeConvertToInt32(searchFileds[i]);
                            goodsIDDict[searchGoodsID] = true;
                        }

                        saleGoodsDataList = SaleGoodsManager.FindSaleGoodsDataList(goodsIDDict);
                    }

                }
                else if ((int)MarketSearchTypes.SearchRoleName == marketSearchType) //根据角色名称模糊匹配返回
                {
                    saleGoodsDataList = SaleGoodsManager.FindSaleGoodsDataListByRoleName(marketSearchText);
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<SaleGoodsData>>(saleGoodsDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Mua các mặt hàng mà người khác bán
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMarketBuyGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int goodsDbID = Convert.ToInt32(fields[1]);
                int goodsID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //是否禁用交易市场购买功能
                int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
                if (disableMarket > 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                KPlayer otherClient = null;
                SaleGoodsItem saleGoodsItem = SaleGoodsManager.RemoveSaleGoodsItem(goodsDbID);
                if (null != saleGoodsItem)
                {
                    //对方的角色
                    otherClient = GameManager.ClientMgr.FindClient(saleGoodsItem.Client.RoleID); //查找，确保还在线

                    if (null != otherClient)
                    {
                        //如果已经在摆摊中，则不能再上线物品
                        if (!otherClient.AllowMarketBuy)
                        {
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }

                if (null != saleGoodsItem && null != otherClient) //在线购买
                {
                    GoodsData goodsData = Global.GetSaleGoodsDataByDbID(otherClient, goodsDbID);
                    if (null == goodsData)
                    {
                        //返回管理
                        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                        //发送错误消息
                        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -3, 0, goodsDbID, goodsID);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    if (goodsData.GoodsID != goodsID)
                    {
                        //返回管理
                        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                        //发送错误消息
                        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -1003, 0, goodsDbID, goodsID);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //如果不是特殊的摆摊金币物品
                    if ((int)SaleGoodsConsts.BaiTanJinBiGoodsID != goodsData.GoodsID)
                    {
                        //判断背包是否够用
                        if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, 0, goodsData.Endtime, true))
                        {
                            //返回管理
                            SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                            //发送错误消息
                            GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -5, 0, goodsDbID, goodsID);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }

                    ////判断游银两余额是否不足
                    //if (saleGoodsItem.SalingGoodsData.SaleMoney1 > 0 && client.YinLiang < saleGoodsItem.SalingGoodsData.SaleMoney1)
                    //{
                    //    //返回管理
                    //    SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //    //发送错误消息
                    //    GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -10, 0, goodsDbID, goodsID);
                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////判断元宝余额是否不足
                    //if (saleGoodsItem.SalingGoodsData.SaleYuanBao > 0 && client.UserMoney < saleGoodsItem.SalingGoodsData.SaleYuanBao)
                    //{
                    //    //返回管理
                    //    SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //    //发送错误消息
                    //    GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -20, 0, goodsDbID, goodsID);
                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////判断银票个数是否不足
                    //int yinPiaoGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YinPiaoGoodsID");
                    //if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0 && Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID) < saleGoodsItem.SalingGoodsData.SaleYinPiao)
                    //{
                    //    //返回管理
                    //    SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //    //发送错误消息
                    //    GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -21, 0, goodsDbID, goodsID);
                    //    return TCPProcessCmdResults.RESULT_OK;
                    //}

                    ////判断对方的背包空格是否足够
                    //if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0)
                    //{
                    //    if (!Global.CanAddGoods2(otherClient, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, 0, Global.ConstGoodsEndTime, true))
                    //    {
                    //        //返回管理
                    //        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //        //发送错误消息
                    //        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -22, 0, goodsDbID, goodsID);
                    //        return TCPProcessCmdResults.RESULT_OK;
                    //    }
                    //}

                    //先DBServer请求扣费
                    ////扣除游戏金币1
                    //if (saleGoodsItem.SalingGoodsData.SaleMoney1 > 0)
                    //{
                    //    if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场购买1"))
                    //    {
                    //        //返回管理
                    //        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //        //发送错误消息
                    //        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -10, 0, goodsDbID, goodsID);
                    //        return TCPProcessCmdResults.RESULT_OK;
                    //    }
                    //    else
                    //    {
                    //        //添加游戏金币1
                    //        GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, saleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场出售1");
                    //    }
                    //}

                    ////先DBServer请求扣费
                    ////扣除用户元宝
                    //if (saleGoodsItem.SalingGoodsData.SaleYuanBao > 0)
                    //{
                    //    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场购买1", false))
                    //    {
                    //        //返回管理
                    //        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //        //发送错误消息
                    //        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -20, 0, goodsDbID, goodsID);
                    //        return TCPProcessCmdResults.RESULT_OK;
                    //    }
                    //    else
                    //    {
                    //        //添加用户点卷
                    //        GameManager.ClientMgr.AddUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, saleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场出售一");
                    //    }
                    //}

                    //扣除用户银票
                    //if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0)
                    //{
                    //    bool usedBinding = false;
                    //    bool usedTimeLimited = false;

                    //    //从用户物品中扣除消耗的数量
                    //    if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, false, out usedBinding, out usedTimeLimited))
                    //    {
                    //        //返回管理
                    //        SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);

                    //        //发送错误消息
                    //        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -21, 0, goodsDbID, goodsID);
                    //        return TCPProcessCmdResults.RESULT_OK;
                    //    }
                    //    else
                    //    {
                    //        //添加银票
                    //        //想DBServer请求加入某个新的物品到背包中
                    //        //添加物品
                    //        Global.BatchAddGoods(otherClient, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, 0, "交易市场购买后批量添加");
                    //    }
                    //}

                    //int saleMoney1 = goodsData.SaleMoney1;
                    //int saleYuanBao = goodsData.SaleYuanBao;
                    //int saleYinPiao = goodsData.SaleYinPiao;

                    //int saleOutMoney = Math.Max(0, goodsData.Quality);

                    //Global.RemoveSaleGoodsData(otherClient, goodsData);
                    //goodsData.SaleMoney1 = 0;
                    //goodsData.SaleYuanBao = 0;
                    //goodsData.SaleYinPiao = 0;
                    goodsData.Site = 0;

                    bool bMoveToTarget = true;
                    // 如果不是特殊的摆摊金币物品
                    if ((int)SaleGoodsConsts.BaiTanJinBiGoodsID != goodsData.GoodsID)
                    {
                        bMoveToTarget = true;
                    }
                    else
                    {
                        // 金币物品不移到玩家身上，直接加金币
                        bMoveToTarget = false;
                    }

                    //转移物品
                    bool ret = GameManager.ClientMgr.MoveGoodsDataToOtherRole(Global._TCPManager.MySocketListener,
                        Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                        goodsData, otherClient, client, bMoveToTarget);

                    if (!ret)
                    {
                        GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 交易市场购买, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}",
                            otherClient.RoleID, otherClient.RoleName, client.RoleID, client.RoleName,
                            goodsData.Id,
                            goodsData.GoodsID,
                            goodsData.GCount
                            ),
                            EventLevels.Important);

                        //发送错误消息
                        GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -100, 0, goodsDbID, goodsID);
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    // 特殊的摆摊金币物品
                    if (!bMoveToTarget)
                    {
                        // 扣除金币物品
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData, goodsData.GCount, false, true))
                        {
                            GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -1004, 0, goodsDbID, goodsID);
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                      //  GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleOutMoney, "交易市场放入物品失败补回一");
                    }

                    ////写入角色出售的行为日志
                    //Global.AddRoleSaleEvent(client, goodsData.GoodsID, goodsData.GCount, -saleMoney1, -saleYinPiao, -saleYuanBao, yinPiaoGoodsID, -saleOutMoney);

                    ////写入角色出售的行为日志
                    //Global.AddRoleSaleEvent(otherClient, goodsData.GoodsID, -goodsData.GCount, saleMoney1, saleYinPiao, saleYuanBao, yinPiaoGoodsID, saleOutMoney);

                    //通知对方
                    GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, otherClient, client, 0, 1, goodsDbID, goodsID);

                    //通知自己
                    GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, 0, 0, goodsDbID, goodsID);

                    //摆摊购买日志
                    //Global.AddMarketBuyLog(otherClient.RoleID, client.RoleID, client.RoleName, goodsData.GoodsID, goodsData.GCount, goodsData.Forge_level, saleYuanBao, client.UserMoney, saleMoney1, client.YinLiang, 0, goodsData.ExcellenceInfo);
                }
               


                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 交易市场/MU新的摆摊

        /// <summary>
        /// Tự động dùng thuốc
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteModAutoDrinkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int autoLifeV = Convert.ToInt32(fields[1]);
                int autoMagicV = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (autoLifeV != client.AutoHP || autoMagicV != client.AutoMP)
                {
                    client.AutoHP = autoLifeV;
                    client.AutoMP = autoMagicV;

                    //更新自动喝药设置
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEAUTODRINK,
                        string.Format("{0}:{1}:{2}", client.RoleID, autoLifeV, autoMagicV),
                        null, client.ServerId);
                }

                string strcmd = string.Format("{0}:{1}:{2}", roleID, autoLifeV, autoMagicV);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵进行播放特效的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpritePlayDecoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 10)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int decoID = Convert.ToInt32(fields[1]);
                int decoType = Convert.ToInt32(fields[2]);
                int toBody = Convert.ToInt32(fields[3]);
                int toX = Convert.ToInt32(fields[4]);
                int toY = Convert.ToInt32(fields[5]);
                int shakeMap = Convert.ToInt32(fields[6]);
                int toX1 = Convert.ToInt32(fields[7]);
                int toY1 = Convert.ToInt32(fields[8]);
                int moveTicks = Convert.ToInt32(fields[9]);
                int alphaTicks = Convert.ToInt32(fields[10]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //通知其自己和其他人，自己开始播放特效(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersMyDeco(tcpMgr.MySocketListener, pool, client, decoID, decoType, toBody, toX, toY, shakeMap, toX1, toY1, moveTicks, alphaTicks, null);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵到不到到其他地图事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteRunToMapCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int toMapCode = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    int defaultBirthPosX = gameMap.DefaultBirthPosX;
                    int defaultBirthPosY = gameMap.DefaultBirthPosY;
                    int defaultBirthRadius = gameMap.BirthRadius;

                    //从配置根据地图取默认位置
                    Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);

                    //从配置根据地图取默认位置
                    int toMapX = (int)newPos.X;
                    int toMapY = (int)newPos.Y;

                    string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, toMapCode, toMapX, toMapY);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵搜索当前地图的角色的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSearchRolesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string roleName = fields[1];
                int startIndex = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //搜索符合角色名符合字符串的用户并返回列表
                GameManager.ClientMgr.SearchRolesByStr(client, roleName, startIndex);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵列举当前地图的角色的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteListRolesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int startIndex = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //列举用户并返回列表
                GameManager.ClientMgr.ListMapRoles(client, startIndex);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵列举当前服务器中的队伍的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteListTeamsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int startIndex = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //列举队伍并返回列表
                GameManager.ClientMgr.ListAllTeams(client, startIndex);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵整理背包的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteResetBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // Giới hạn thời gian yêu cầu reset túi đồ liên tục
                if (CreateRoleLimitManager.Instance().ResetBagSlotTicks > 0 &&
                    TimeUtil.NOW() - client._ResetBagTicks < CreateRoleLimitManager.Instance().ResetBagSlotTicks)
                {
                    // 返回错误信息
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("您操作过快，请稍后再试")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                client._ResetBagTicks = TimeUtil.NOW();

                //整理用户的背包
                Global.ResetBagAllGoods(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Packet thay đổi body
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteChgHorseBodyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int horseDbID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                ////获取坐骑数据
                //HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
                //if (null == horseData)
                //{
                //    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, horseDbID, 0);
                //}
                //else
                //{
                //    int RandColorGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RandColor");
                //    if (Global.GetTotalGoodsCountByID(client, RandColorGoodsID) <= 0)
                //    {
                //        strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, horseDbID, 1);
                //    }
                //    else
                //    {
                //        bool usedBinding = false;
                //        bool usedTimeLimited = false;

                //        //扣除道具
                //        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, RandColorGoodsID, 1, false, out usedBinding, out usedTimeLimited))
                //        {
                //            strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, horseDbID, 1);
                //        }
                //        else
                //        {
                //            int newBodyID = Global.GetRandomHorseNewBodyID();

                //            //计算积分, 根据积分来换算坐骑的形象ID
                //            if (newBodyID != horseData.BodyID)
                //            {
                //                Global.UpdateHorseBodyIDDBCommand(Global._TCPManager.TcpOutPacketPool, client, horseData.DbID, newBodyID);
                //            }

                //            strcmd = string.Format("{0}:{1}:{2}:{3}", 0, roleID, horseDbID, horseData.BodyID);
                //        }
                //    }
                //}

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵整理随身仓库的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteResetPortableBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //整理用户的移动仓库
                Global.ResetPortableBagAllGoods(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵整理金蛋仓库的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteResetJinDanBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //整理用户的金蛋仓库
                Global.ResetJinDanBagAllGoods(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵执行挖宝的事件,精灵通过掉落物品配合钥匙进行挖宝
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteExecWaBaoByYaoShiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //箱子ID  钥匙ID 自动购买
                int idXiangZi = Convert.ToInt32(fields[1]);
                int idXiangYaoShi = Convert.ToInt32(fields[2]);
                int autoBuy = Convert.ToInt32(fields[3]);

                //处理挖宝的操作
                tcpOutPacket = WaBaoManager.ProcessWaBaoByYaoShi(client, pool, nID, idXiangZi, idXiangYaoShi, 1 == autoBuy ? true : false);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵执行挖宝的事件,通过无量秘藏
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteExecWaBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理挖宝的操作
                tcpOutPacket = WaBaoManager.ProcessRandomWaBao(client, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵执行领取挖宝的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetWaBaoDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理领取挖宝的物品的操作
                tcpOutPacket = WaBaoManager.ProcessGetWaBaoGoodsData(client, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #region 砸金蛋相关
        /// <summary>
        /// 精灵执行砸金蛋的事件              -- MU项目 祈福系统 增加物品的1.强化 2.追加 3.幸运 4.卓越 的随机掉落 [1/22/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteZaJinDanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                long startTicks = TimeUtil.NOW();

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int times = Convert.ToInt32(fields[1]);//砸金蛋次数 客户端传递过来，1 10 50 三种数字，不是这三个，则是外挂

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (times <= 0)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂发送错误数据, CMD={0}, Client={1}, RoleID={2}, times={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, times));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //限制在1次到50次之间
                times = Global.GMin(times, 50);
                times = Global.GMax(times, 1);

                //先判断宝物仓库空间是否足够
                if (null != client.JinDanGoodsDataList && Global.GetJinDanBagCapacity(client) - client.JinDanGoodsDataList.Count < times)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -100, roleID, client.JinDanGoodsDataList.Count);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除物品金蛋
                int needGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinDan");
                if (needGoodsID <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -110, roleID, client.JinDanGoodsDataList.Count);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                Boolean hasSubGoods = false;
                int usedGoodsNum = 0;

                //砸一次，且有物品，则扣除物品
                if (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == times)
                {
                    //从用户物品中扣除消耗的数量
                    hasSubGoods = GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needGoodsID, 1, false, out usedBinding, out usedTimeLimited);
                    if (hasSubGoods)
                    {
                        usedGoodsNum = 1;
                    }
                }

                int usedYuanBao = 0;

                //需要扣除元宝
                if (!hasSubGoods)
                {
                    int needYuanBao = times * 500;//砸金蛋的次数，1次，10次，50次,每次200元宝，次数多有优惠

                    if (10 == times)
                    {
                        needYuanBao = 4800;
                    }
                    else if (50 == times)
                    {
                        needYuanBao = 22000;
                    }

                    //自动扣除元宝
                    Boolean isOK = GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福1");

                    if (!isOK)
                    {
                        String goodsName = Global.GetGoodsNameByID(needGoodsID);

                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("要祈福时，钻石不足，请充值后，再重新祈福！"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);

                        strcmd = string.Format("{0}:{1}:{2}", -1, roleID, client.JinDanGoodsDataList.Count);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    usedYuanBao = needYuanBao;
                }

                String preString = String.Format("{0}_{1}_{2}_{3}_{4}_{5}", roleID, 0, client.ZoneID, times,
                    usedYuanBao, usedGoodsNum);//前缀信息字符串

                StringBuilder strBuilder = new StringBuilder();

                for (int n = 0; n < times; n++)
                {
                    int nBinding = usedBinding ? 1 : 0;

                    // 不用这儿了 [8/26/2014 LiaoWei]
                    //执行砸金蛋挖宝操作,返回得到的物品列表[下划线隔开]
                    //String gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, GameManager.systemQianKunMgr.SystemXmlItemDict, 1, nBinding);

                    /*if (gainString.Length > 0)
                    {
                        if (strBuilder.Length > 0)
                        {
                            strBuilder.Append(";");//多条记录用分号隔开
                        }

                        //添加一条记录
                        strBuilder.Append(String.Format("{0}_{1}", preString, gainString));
                    }*/
                }

                /*if (strBuilder.Length > 0)
                {
                    //通知gamedbserver记录竞猜历史 每个角色的通知一次,这儿应该综合考虑一下数据包大小问题，每次不要太大，也不要太小，保证次数不要太多
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDZAJINDANHISTORY,
                    string.Format("{0}", strBuilder.ToString()),
                    null);
                }*/

                //增加砸金蛋的积分
                Global.AddZaJinDanJiFen(client, Math.Max(0, times * 10));

                strcmd = string.Format("{0}:{1}:{2}", 1, roleID, client.JinDanGoodsDataList.Count);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                long usedTicks = TimeUtil.NOW() - startTicks;

                //System.Diagnostics.Debug.WriteLine(String.Format("砸金蛋{0}次 使用时间 {1} 毫秒", times, usedTicks));
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵从服务器端获取砸金蛋历史记录
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryZaJinDanHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                int param = Convert.ToInt32(fields[1]);
                //参数2可能是roleid，也可能是-1

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //只能查询所有玩家的或者自己的砸金蛋信息
                if (param >= 0 && param != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的砸金蛋历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 砸金蛋相关

        /// <summary>
        /// 精灵获取活动数据事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetHuoDongDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //处理领取挖宝的物品的操作
                GameManager.ClientMgr.NotifyHuodongData(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取周连续登录礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetWLoginGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int whichOne = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取周连续登录的物品列表
                int ret = HuodongCachingMgr.ProcessGetWLoginGift(client, whichOne);

                string strcmd = string.Format("{0}:{1}", ret, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取限时累计登录礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetLimitTimeLoginGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int whichOne = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取限制时间累计登录的物品列表
                int ret = HuodongCachingMgr.ProcessGetLimitTimeLoginGift(client, whichOne);

                string strcmd = string.Format("{0}:{1}:{2}", ret, roleID, whichOne);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取当月在线时长礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetMTimeGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int whichOne = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取月在线时长的礼物
                int ret = HuodongCachingMgr.ProcessGetMOnlineTimeGift(client, whichOne);

                string strcmd = string.Format("{0}:{1}", ret, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取新手见面礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetNewStepGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int step = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取新手见面的礼物
                int ret = HuodongCachingMgr.ProcessGetNewStepGift(client, step);

                string strcmd = string.Format("{0}:{1}:{2}:{3}", ret, roleID, client.MyHuodongData.NewStep, client.MyHuodongData.StepTime);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取大奖活动礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetBigGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int whichOne = Convert.ToInt32(fields[1]);
                int bigAwardID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取大奖的礼物
                int ret = HuodongCachingMgr.ProcessGetBigAwardGift(client, bigAwardID, whichOne);

                string strcmd = string.Format("{0}:{1}", ret, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取活动送礼(礼品码)礼物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetSongLiGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string liPinMa = fields[1];
                int songLiID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                // 对liPinMa做判断 [6/30/2014 LiaoWei]
                if (string.IsNullOrEmpty(liPinMa))
                {
                    strcmd = string.Format("{0}:{1}", -1020, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //处理角色获取送礼活动礼品的操作
                int ret = HuodongCachingMgr.ProcessGetSongLiGift(client, songLiID, liPinMa);

                strcmd = string.Format("{0}:{1}", ret, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵申请进入副本事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEnterFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int fuBenID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (socket.IsKuaFuLogin)
                {
                    strcmd = string.Format("{0}:{1}", StdErrorCode.Error_Denied_In_Activity_Time, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知怪物区域管理对象，开始动态的刷出副本中的怪物
                if (GameManager.MonsterZoneMgr.WaitingAddFuBenMonsterQueueCount() >= MonsterZoneManager.MaxWaitingRunQueueNum)
                {
                    strcmd = string.Format("{0}:{1}", -1111, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //获取副本的数据
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断副本类型
                int fuBenUseType = systemFuBenItem.GetIntValue("FuBenUse");
                switch (fuBenUseType)
                {
                    case (int)FuBenUseTypes.TaskFuBen:
                    case (int)FuBenUseTypes.JingJiChang:
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的进入副本指令,角色:{0},副本:{1},副本用途:{2}", Global.FormatRoleName4(client), fuBenID, fuBenUseType));
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                        break;
                    default:
                        break;
                }

                int fuBenTab = systemFuBenItem.GetIntValue("TabID");
                int needTask = GlobalNew.GetFuBenTabNeedTask(fuBenTab);
                if (needTask > client.MainTaskID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的进入副本指令,角色:{0},副本:{1},需要完成任务:{2}", Global.FormatRoleName4(client), fuBenID, needTask));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                // 增加剧情副本判断 [7/29/2014 LiaoWei]
                int nUpCopyID = -1;
                int nFinishNumber = -1;

                nUpCopyID = systemFuBenItem.GetIntValue("UpCopyID");
                nFinishNumber = systemFuBenItem.GetIntValue("FinishNumber");

                if (nUpCopyID > 0 && nFinishNumber > 0)
                {
                    if (!Global.FuBenPassed(client, nUpCopyID))
                    {
                        strcmd = string.Format("{0}:{1}", -1000, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int minLevel = systemFuBenItem.GetIntValue("MinLevel");
                int maxLevel = systemFuBenItem.GetIntValue("MaxLevel");
                if (maxLevel <= 0)
                {
                    maxLevel = 1000; //表示无限制
                }

                int copyType = systemFuBenItem.GetIntValue("CopyType");
                int enterNumber = systemFuBenItem.GetIntValue("EnterNumber");
                int finishNumber = systemFuBenItem.GetIntValue("FinishNumber");
                int toMapCode = systemFuBenItem.GetIntValue("MapCode");
                int enterGoods = systemFuBenItem.GetIntValue("EnterGoods");
                int nYuanbao = systemFuBenItem.GetIntValue("NeedYuanBao"); // 增加 元宝消耗项 [11/17/2013 LiaoWei]

                int nMinZhuanSheng = -1;
                nMinZhuanSheng = systemFuBenItem.GetIntValue("MinZhuanSheng");
                int nMaxZhuanSheng = -1;
                nMaxZhuanSheng = systemFuBenItem.GetIntValue("MaxZhuanSheng");
                if (nMaxZhuanSheng <= 0)
                {
                    nMaxZhuanSheng = 1000; // 无限制
                }

                minLevel = Global.GetUnionLevel(nMinZhuanSheng, minLevel);
                maxLevel = Global.GetUnionLevel(nMaxZhuanSheng, maxLevel, true);

                // 首先判断转生级别
                int unionLevel = Global.GetUnionLevel(client.ChangeLifeCount, client.m_Level);
                if (unionLevel < minLevel || unionLevel > maxLevel)
                {
                    strcmd = string.Format("{0}:{1}", -5, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
                int nFinishNum;
                int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out nFinishNum);

                int nNum = 0;
                int nMaxNum = 0;

                if (finishNumber > 0)
                {
                    nNum = nFinishNum;
                    nMaxNum = finishNumber;
                }
                else
                {
                    nNum = haveEnterNum;
                    nMaxNum = enterNumber;
                }

                int nActivityCopyNum = -1;

                //int fuBenLingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("FuBenLingGoodsID");
                int fuBenLingGoodsID = enterGoods;

                TeamData td = null;
                CopyTeamData ctd = null;
                if (Global.ConstTeamCopyType == copyType)
                {
                    if (!CopyTeamManager.Instance().CanEnterScene(client, out ctd))//情侣副本做了判断
                    {
                        strcmd = string.Format("{0}:{1}", -100, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (1 == copyType && MapTypes.MarriageCopy != Global.GetMapType(fuBenID)) //组队副本 非情侣副本
                {
                    if (client.TeamID <= 0)
                    {
                        strcmd = string.Format("{0}:{1}", -100, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //查找组队的数据
                    td = GameManager.TeamMgr.FindData(client.TeamID);
                    if (null == td) //没有找到组队数据
                    {
                        strcmd = string.Format("{0}:{1}", -105, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            strcmd = string.Format("{0}:{1}", -110, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                }
                else if (copyType == 3 || copyType == 4)
                {
                    strcmd = string.Format("{0}:{1}", -30, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool bIsWanMoTaMapCode = WanMotaCopySceneManager.IsWanMoTaMapCode(fuBenID);
                if (bIsWanMoTaMapCode)
                {
                    // 万魔塔只能挑战当前层
                    if ((client.WanMoTaNextLayerOrder + WanMotaCopySceneManager.nWanMoTaFirstFuBenOrder) != fuBenID)
                    {
                        strcmd = string.Format("{0}:{1}", -7, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 扫荡未完成时，万魔塔不能挑战
                    if (client.WanMoTaProp.nSweepLayer >= 0)
                    {
                        strcmd = string.Format("{0}:{1}", -8, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int needFuBenLingNum = 0;

                if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(fuBenID)) // 血色城堡副本 [7/3/2014 LiaoWei]
                {
                    if (GameManager.BloodCastleCopySceneMgr.EnterBloodCastSceneCopySceneCount(client, fuBenID, out nActivityCopyNum) < 0)
                    {
                        strcmd = string.Format("{0}:{1}", -1001, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(fuBenID)) // 恶魔广场副本 [7/11/2014 LiaoWei]
                {
                    if (GameManager.DaimonSquareCopySceneMgr.EnterDaimonSquareSceneCopySceneCount(client, fuBenID, out nActivityCopyNum) < 0)
                    {
                        strcmd = string.Format("{0}:{1}", -1002, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID)) // 帮会副本
                {
                    // 这个时间点在设置标记
                    if (GameManager.GuildCopyMapMgr.IsRefuseTime())
                    {
                        strcmd = string.Format("{0}:{1}", -1003, roleID);//正在重置
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 更新没有完成
                    if (GameManager.GuildCopyMapMgr.ProcessEndFlag == true)
                    {
                        strcmd = string.Format("{0}:{1}", -1003, roleID);//正在重置
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 
                    BangHuiMiniData bangHuiMiniData = Global.GetBangHuiMiniData(client.GuildID);
                    if (null == bangHuiMiniData)
                    {
                        strcmd = string.Format("{0}:{1}", -1004, roleID);//没有战盟不让进
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    int mapid;
                    int seqid;
                    GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, toMapCode);
                    if (mapid < 0)
                    {
                        strcmd = string.Format("{0}:{1}", -1005, roleID);//本周已经全部通关
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    if (mapid != fuBenID)
                    {
                        strcmd = string.Format("{0}:{1}", -1006, roleID);//要进的和该进的不符
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else if ((enterNumber >= 0 && haveEnterNum >= enterNumber && !bIsWanMoTaMapCode) || (finishNumber >= 0 && nFinishNum >= finishNumber))// 判断进入次数是否满足 // 万魔塔的挑战次数没有限制 ChenXiaojun
                {
                    bool bGoOn = false;
                    int[] nAddNum = null;
                    int nVipLev = client.VipLevel;

                    if (Global.IsInExperienceCopyScene(fuBenID))
                    {
                        nAddNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinYanFuBenNum");

                        if (nVipLev > 0 && nVipLev <= (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL && nAddNum != null && nAddNum.Length > 0 && nAddNum.Length <= 13)
                        {
                            int nRealNum = enterNumber + nAddNum[nVipLev];

                            if (haveEnterNum < nRealNum)
                            {
                                needFuBenLingNum = 1;
                                bGoOn = true;
                            }
                        }

                        if (bGoOn == false)
                        {
                            strcmd = string.Format("{0}:{1}", -6, roleID);                    // 没有进入的次数了
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;

                        }

                    }
                    else if (fuBenID == (int)GoldCopySceneEnum.GOLDCOPYSCENEMAPCODEID)
                    {
                        nAddNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinBiFuBenNum");

                        if (nVipLev > 0 && nVipLev <= (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL && nAddNum != null && nAddNum.Length > 0 && nAddNum.Length <= 13)
                        {
                            int nRealNum = enterNumber + nAddNum[nVipLev];

                            if (haveEnterNum < nRealNum)
                            {
                                needFuBenLingNum = 1;
                                bGoOn = true;
                            }
                        }

                        if (bGoOn == false)
                        {
                            strcmd = string.Format("{0}:{1}", -6, roleID);                    // 没有进入的次数了
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    else
                    {
                        //needFuBenLingNum = (int)(haveEnterNum - enterNumber) + 1;

                        needFuBenLingNum = 1;
                    }
                }

                if (needFuBenLingNum > 0)
                {
                    // 增加元宝消耗项  把道具消耗和元宝消耗逻辑分开[11/17/2013 LiaoWei]
                    int nValue = Global.GMax(1, (nNum + 1) - nMaxNum);
                    int nNeedYuanBao = nValue * nYuanbao;

                    if (Global.IsInExperienceCopyScene(fuBenID))
                    {
                        nNeedYuanBao = nYuanbao;
                    }

                    if (fuBenLingGoodsID <= 0 && nYuanbao <= 0)
                    {
                        strcmd = string.Format("{0}:{1}", -6, roleID);                  // 您今日进入次数已满 无法进入副本
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    bool bSubGoods = false;
                    bool bSubYuanBo = false;

                    if (fuBenLingGoodsID > 0)
                    {
                        if (Global.GetTotalGoodsCountByID(client, fuBenLingGoodsID) < needFuBenLingNum)
                        {
                            strcmd = string.Format("{0}:{1}", -10, roleID);                     // 进入副本需求的道具不够
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        bSubGoods = true;
                    }

                    if (nYuanbao > 0)
                    {
                        lock (client.UserMoneyMutex)
                        {
                            if (client.UserMoney < nNeedYuanBao)
                            {
                                strcmd = string.Format("{0}:{1}", -12, roleID);                     // 进入副本需求的元宝不足 无法进入副本
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }

                        bSubYuanBo = true;
                    }

                    if (bSubGoods)
                    {
                        bool usedBinding = false;
                        bool usedTimeLimited = false;

                        //扣除副本令的道具
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, fuBenLingGoodsID, needFuBenLingNum, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}", -11, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                    if (bSubYuanBo)
                    {
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedYuanBao, "进入副本"))
                        {
                            strcmd = string.Format("{0}:{1}", -12, roleID);                     // 进入副本需求的元宝不足 无法进入副本
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                }

                string[] dbFields;
                int fuBenSeqID = -1;

                bool bRet = true;
                int nRet = 0;
                if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(fuBenID))  // 如果进入的是血色城堡副本
                {
                    lock (BloodCastleCopySceneManager.m_Mutex)
                    {
                        nRet = GameManager.BloodCastleCopySceneMgr.EnterBloodCastSceneCopyScene(client, fuBenID, nActivityCopyNum, out fuBenSeqID, toMapCode);
                        if (nRet < 0)
                        {
                            strcmd = string.Format("{0}:{1}", 0, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (fuBenSeqID > 0)
                        {
                            bRet = false;
                        }
                    }
                }
                else if (GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(fuBenID)) // 如果进入的是恶魔广场副本
                {
                    lock (DaimonSquareCopySceneManager.m_Mutex)
                    {
                        nRet = GameManager.DaimonSquareCopySceneMgr.EnterDaimonSquareSceneCopyScene(client, fuBenID, nActivityCopyNum, out fuBenSeqID, toMapCode);
                        if (nRet < 0)
                        {
                            strcmd = string.Format("{0}:{1}", 0, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (fuBenSeqID > 0)
                        {
                            bRet = false;
                        }
                    }
                }
                else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID))
                {
                    int fubenid = 0;
                    GameManager.GuildCopyMapMgr.EnterGuildCopyMap(client, out fubenid, out fuBenSeqID, toMapCode);
                    if (fubenid < 0 || fuBenSeqID < 0)
                    {
                        strcmd = string.Format("{0}:{1}", -19, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    bRet = false;
                }

                if (bRet)
                {
                    //从DBServer获取副本顺序ID
                    dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.RoleID), client.ServerId);
                    if (null == dbFields || dbFields.Length < 2)
                    {
                        strcmd = string.Format("{0}:{1}", -20, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                }

                if (fuBenSeqID > 0 && client.FuBenSeqID > 0)
                {
                    GlobalEventSource.getInstance().fireEvent(new PlayerLeaveFuBenEventObject(client));
                }

                //判断是个人副本还是组队副本
                if (0 == copyType) //个人副本
                {
                    Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数

                    //通知用户切换地图到副本的地图上
                    GameMap gameMap = null;
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        strcmd = string.Format("{0}:{1}", -30, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //设置角色的副本顺序ID
                    client.FuBenSeqID = fuBenSeqID;

                    client.FuBenID = fuBenID;

                    //添加一个角色到副本顺序ID的映射
                    FuBenManager.AddFuBenSeqID(client.RoleID, client.FuBenSeqID, 0, fuBenID);

                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, toMapCode, -1, -1, -1);
                }
                else if (Global.ConstTeamCopyType == copyType)
                {
                    List<int> roleIDsList = new List<int>();
                    if (MapTypes.MarriageCopy == Global.GetMapType(fuBenID))
                    {
                     
                       // Liên quan tới cưới
                    }
                    else
                    {
                        CopyTeamManager.Instance().HandleClickStart(client, fuBenSeqID);
                        return TCPProcessCmdResults.RESULT_OK;
                        lock (ctd)
                        {
                            //判断是否是队长
                            if (ctd.LeaderRoleID != client.RoleID)
                            {
                                strcmd = string.Format("{0}:{1}", -110, roleID);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            if (null != ctd.TeamRoles)
                            {
                                for (int i = 0; i < ctd.TeamRoles.Count; i++)
                                {
                                    roleIDsList.Add(ctd.TeamRoles[i].RoleID);
                                }
                            }

                            ctd.StartTime = TimeUtil.NOW();
                            ctd.FuBenSeqID = fuBenSeqID;
                        }

                    }


                    //通知组队副本进入的消息
                    CopyTeamManager.Instance().NotifyTeamFuBenEnterMsg(roleIDsList, minLevel, maxLevel, client.MapCode, client.RoleID, fuBenID, fuBenSeqID, enterNumber, finishNumber, enterNumber <= 0);
                }
                else if (2 == copyType)
                {
                    Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数

                    //通知用户切换地图到副本的地图上
                    GameMap gameMap = null;
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        strcmd = string.Format("{0}:{1}", -30, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //设置角色的副本顺序ID
                    client.FuBenSeqID = fuBenSeqID;

                    client.FuBenID = fuBenID;

                    //添加一个角色到副本顺序ID的映射
                    FuBenManager.AddFuBenSeqID(client.RoleID, client.FuBenSeqID, 0, fuBenID);

                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, toMapCode, -1, -1, -1);
                }
                else //组队副本(必须是队长，才有权限进入)
                {
                    List<int> roleIDsList = new List<int>();
                    lock (td)
                    {
                        //判断是否是队长
                        if (td.LeaderRoleID != client.RoleID)
                        {
                            strcmd = string.Format("{0}:{1}", -110, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (null != td.TeamRoles)
                        {
                            for (int i = 0; i < td.TeamRoles.Count; i++)
                            {
                                roleIDsList.Add(td.TeamRoles[i].RoleID);
                            }
                        }
                    }

                    //通知组队副本进入的消息
                    GameManager.ClientMgr.NotifyTeamFuBenEnterMsg(roleIDsList, minLevel, maxLevel, client.MapCode, client.RoleID, fuBenID, fuBenSeqID, enterNumber, finishNumber, enterNumber <= 0);
                }

                strcmd = string.Format("{0}:{1}", 0, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵申请进入副本事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNotifyEnterFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int fuBenID = Convert.ToInt32(fields[1]);
                int fuBenSeqID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
(TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SceneUIClasses sceneType = Global.GetMapSceneType(client.MapCode);
                if (sceneType != SceneUIClasses.Normal)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //获取副本的数据
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int minLevel = systemFuBenItem.GetIntValue("MinLevel");
                int maxLevel = systemFuBenItem.GetIntValue("MaxLevel");
                if (maxLevel <= 0)
                {
                    maxLevel = 1000; //表示无限制
                }
                int copyType = systemFuBenItem.GetIntValue("CopyType");
                int enterNumber = systemFuBenItem.GetIntValue("EnterNumber");
                int finishNumber = systemFuBenItem.GetIntValue("FinishNumber");
                int toMapCode = systemFuBenItem.GetIntValue("MapCode");

                int nMinZhuanSheng = -1;
                nMinZhuanSheng = systemFuBenItem.GetIntValue("MinZhuanSheng");
                int nMaxZhuanSheng = -1;
                nMaxZhuanSheng = systemFuBenItem.GetIntValue("MaxZhuanSheng");
                if (nMaxZhuanSheng <= 0)
                {
                    nMaxZhuanSheng = 1000; // 无限制
                }

                minLevel = Global.GetUnionLevel(nMinZhuanSheng, minLevel);
                maxLevel = Global.GetUnionLevel(nMaxZhuanSheng, maxLevel, true);

                // 首先判断级别是否满足
                int unionLevel = Global.GetUnionLevel(client.ChangeLifeCount, client.m_Level);
                if (unionLevel < minLevel || unionLevel > maxLevel)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                sceneType = Global.GetMapSceneType(toMapCode);
                switch (sceneType)
                {
                    case SceneUIClasses.BloodCastle:
                    case SceneUIClasses.Demon:
                        return TCPProcessCmdResults.RESULT_OK;
                }

                if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
                int nFinishNum;
                int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out nFinishNum);

                //判断进入次数是否满足
                if ((enterNumber >= 0 && haveEnterNum >= enterNumber) || (finishNumber >= 0 && nFinishNum >= finishNumber))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //判断是个人副本还是组队副本
                if (Global.ConstTeamCopyType == copyType) //新组队副本类型
                {
                    if (MapTypes.MarriageCopy == Global.GetMapType(fuBenID))
                    {
                      // Liên quan tới cưới
                    }

                    Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数

                    if (!CopyTeamManager.Instance().IsKuaFuCopy(fuBenID))
                    {
                        //通知用户切换地图到副本的地图上
                        GameMap gameMap = null;
                        if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                        {
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        //设置角色的副本顺序ID
                        client.FuBenSeqID = fuBenSeqID;
                        client.FuBenID = fuBenID;

                        //重置累计伤害
                        client.SumDamageForCopyTeam = 0;
                        CopyTeamManager.Instance().UnRegisterCopyTeamListNotify(client);
                        CopyTeamManager.Instance().HandleQuitFromTeam(client, false);

                        //添加一个角色到副本顺序ID的映射
                        FuBenManager.AddFuBenSeqID(client.RoleID, client.FuBenSeqID, 0, fuBenID);

                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, toMapCode, -1, -1, -1);
                    }
                    else
                    {
                        FuBenMapItem mapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, systemFuBenItem.GetIntValue("MapCode"));
                        GlobalNew.RecordSwitchKuaFuServerLog(client);
                        client.sendCmd((int)TCPGameServerCmds.CMD_SPR_KF_SWITCH_SERVER, Global.GetClientKuaFuServerLoginData(client));
                    }
                }
                else if (1 == copyType) //组队副本
                {
                    Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数

                    //通知用户切换地图到副本的地图上
                    GameMap gameMap = null;
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //设置角色的副本顺序ID
                    client.FuBenSeqID = fuBenSeqID;
                    client.FuBenID = fuBenID;

                    //添加一个角色到副本顺序ID的映射
                    FuBenManager.AddFuBenSeqID(client.RoleID, client.FuBenSeqID, 0, fuBenID);

                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, toMapCode, -1, -1, -1);
                }
                //                 else if (4 == copyType)  //[bing] 结婚副本
                //                 {
                //                     Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数
                // 
                //                     //通知用户切换地图到副本的地图上
                //                     GameMap gameMap = null;
                //                     if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                //                     {
                //                         return TCPProcessCmdResults.RESULT_OK;
                //                     }
                // 
                //                     //设置角色的副本顺序ID
                //                     client.FuBenSeqID = fuBenSeqID;
                // 
                //                     //添加一个角色到副本顺序ID的映射
                //                     FuBenManager.AddFuBenSeqID(client.RoleID, client.FuBenSeqID, 0, fuBenID);
                //                     MarryFuBenMgr.getInstance().ClientExitRoom(client);
                //                     GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                //                         client, toMapCode, -1, -1, -1);
                //                 }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵与服务器端保持心跳的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteClientHeartCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SCClientHeart cmdData = null;
            //string cmdData = null;

            //try
            //{
            //    cmdData = new UTF8Encoding().GetString(data, 0, count);
            //}
            //catch (Exception) //解析错误
            //{
            //    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
            //    return TCPProcessCmdResults.RESULT_FAILED;
            //}

            try
            {
                //解析用户名称和用户密码
                //string[] fields = cmdData.Split(':');
                //if (fields.Length != 3)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                ProtoChecker.Instance().Check<SCClientHeart>(data, 0, count, socket.m_Socket);

                if (!CheckHelper.CheckTCPCmdHandle<SCClientHeart>(socket, nID, data, count, out cmdData))
                    return TCPProcessCmdResults.RESULT_FAILED;

                int roleID = cmdData.RoleID;
                int roleRandToken = cmdData.RandToken;
                long clientTicks = cmdData.Ticks;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    //LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    //return TCPProcessCmdResults.RESULT_FAILED;

                    SCClientHeart scData1 = new SCClientHeart(0, (int)(TimeUtil.NOW()), 0);
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCClientHeart>(scData1, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_CLIENTHEART);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //检测Tokean是否有效
                if (!tcpRandKey.FindKey(roleRandToken))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("接收到客户端心跳后，检测token无效, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                long nowTicks = TimeUtil.NOW();
                //System.Diagnostics.Debug.WriteLine(string.Format("speed-up-eplased1:{0}", clientTicks - nowTicks));
                //System.Diagnostics.Debug.WriteLine(string.Format("speed-up-eplased2:{0}", nowTicks - client.LastClientHeartTicks));

                //int disableSpeedUp = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-speed-up", 0); //是否启用的防止加速?
                //int speedUpSecs = GameManager.GameConfigMgr.GetGameConfigItemInt("speed-up-secs", 30); //防止加速的最大时间间隔(秒)
                //int banSpeedUpMinutes = GameManager.GameConfigMgr.GetGameConfigItemInt("ban-speed-up-minutes", 120); //加速禁止登陆的时间

                ////上次的心跳时间
                //if (disableSpeedUp <= 0)
                //{
                //    if (client.ClientHeartCount > 0) //如果心跳次数大于0，则判断客户端是否进行了加速
                //    {
                //        if ((nowTicks - client.LastClientHeartTicks) <= (speedUpSecs * 1000)) //如果客户端的时间大于服务器端指定的时间段了，则判断用户使用了加速软件
                //        {
                //            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("本游戏禁止使用加速软件，{0}分钟内将禁止登陆!"), banSpeedUpMinutes), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                //            Global.BanRoleNameToDBServer(Global.FormatRoleName(client, client.RoleName), banSpeedUpMinutes); //禁止一个小时内登陆

                //            LogManager.WriteLog(LogTypes.Error, string.Format("判断客户端启用了加速操作，强制断开客户端的连接, CMD={0}, Client={1}, RoleName={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.RoleName));
                //            return TCPProcessCmdResults.RESULT_FAILED;
                //        }
                //    }
                //}

                //更新回报位置的心跳时间
                client.LastClientHeartTicks = nowTicks;

                //标记客户端心跳的次数
                client.ClientHeartCount = (client.ClientHeartCount + 1);

                int allowTicks = GameManager.GameConfigMgr.GetGameConfigItemInt("yuzhouticks", 2000);

                ////将怒斩中的防止宇宙加速的代码移植过来
                //if (allowTicks > 0) ///判断是否允许判断终极宇宙加速
                //{
                //    long subTicks = clientTicks - nowTicks;
                //    client.LastClientServerSubTicks += subTicks;
                //    client.LastClientServerSubNum += 1;

                //    int avgTicks = (int)(client.LastClientServerSubTicks / client.LastClientServerSubNum);
                //    //trace("avgTicks_123=" + avgTicks);
                //    if (avgTicks >= allowTicks)
                //    {
                //        int banSpeedUpMinutes = GameManager.GameConfigMgr.GetGameConfigItemInt("ban-speed-up-minutes2", 10); //加速禁止登陆的时间

                //        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("本游戏禁止使用加速软件，{0}分钟内将禁止登陆!"), banSpeedUpMinutes), GameInfoTypeIndexes.Error, ShowGameInfoTypes.HintAndBox);
                //        //Global.BanRoleNameToDBServer(Global.FormatRoleName(client, client.RoleName), banSpeedUpMinutes); //禁止一个小时内登陆
                //        BanManager.BanRoleName(Global.FormatRoleName(client, client.RoleName), banSpeedUpMinutes);


                //        LogManager.WriteLog(LogTypes.Error, string.Format("判断客户端启用了加速操作，强制断开客户端的连接, CMD={0}, Client={1}, RoleName={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.RoleName));
                //        return TCPProcessCmdResults.RESULT_FAILED;
                //    }
                //}

                //string strcmd = string.Format("{0}:{1}:{2}", roleID, TimeUtil.NOW(), allowTicks);
                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                SpeedUpTickCheck.Instance().OnClientHeart(client, cmdData.ReportCliRealTick);
                SCClientHeart scData = new SCClientHeart(roleID, (int)(TimeUtil.NOW()), allowTicks);
                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_CLIENTHEART, scData);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取随机的角色名称的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetRandomNameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int sex = Convert.ToInt32(fields[0]);
                string preName = "";

                string[] dbFields = Global.ExecuteDBCmd(nID, string.Format("{0}", sex), GameManager.LocalServerId);
                if (null != dbFields && dbFields.Length == 2)
                {
                    preName = dbFields[1];
                }

                string strcmd = string.Format("{0}:{1}", sex, preName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取副本历史记录事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetFuBenHistDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int fuBenID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取副本开始信息事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetFuBenBeginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //通知副本的开始信息(每一层图怪物清空时也会调用)
                GameManager.ClientMgr.NotifyFuBenBeginInfo(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取副本内当前人数和怪物数
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetFuBenMonstersNumCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //通知副本的玩家和怪物信息(每一层图怪物清空时也会调用)
                GameManager.ClientMgr.NotifyAllFuBenMonstersNum(client, false);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取怪物位置信息事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFindMonsterCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SCFindMonster cmdData = null;
            //string cmdData = null;

            //try
            //{
            //    cmdData = new UTF8Encoding().GetString(data, 0, count);
            //}
            //catch (Exception) //解析错误
            //{
            //    LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
            //    return TCPProcessCmdResults.RESULT_FAILED;
            //}

            try
            {
                //解析用户名称和用户密码
                //string[] fields = cmdData.Split(':');
                //if (fields.Length != 4)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                ProtoChecker.Instance().Check<SCFindMonster>(data, 0, count, socket.m_Socket);

                if (!CheckHelper.CheckTCPCmdHandle<SCFindMonster>(socket, nID, data, count, out cmdData))
                    return TCPProcessCmdResults.RESULT_FAILED;

                int roleID = cmdData.RoleID;
                int centerX = cmdData.X;
                int centerY = cmdData.Y;
                int radiusGridNum = cmdData.Num;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int totalMonsterNum = 0;

                //long startTicks = TimeUtil.NOW();

                //供精灵使用，自动搜索怪物
                Point pt = GameManager.ClientMgr.SeekMonsterPosition(client, centerX, centerY, radiusGridNum, out totalMonsterNum);

                //System.Diagnostics.Debug.WriteLine(string.Format("SeekMonsterPosition消耗时间:{0}", TimeUtil.NOW() - startTicks));

                //string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, (int)pt.X, (int)pt.Y, totalMonsterNum);
                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                SCFindMonster scData = new SCFindMonster(roleID, (int)pt.X, (int)pt.Y, totalMonsterNum);
                client.sendCmd(nID, scData);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端批量转换银票
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessBatchYinPiaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int yinPiaoNum = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //银票数量不能小于等于0
                if (yinPiaoNum <= 0)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断银票个数是否不足
                int yinPiaoGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YinPiaoGoodsID");
                if (yinPiaoNum > Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -10);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yinPiaoGoodsID, yinPiaoNum, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -20);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else
                {
                    //添加银两
                    GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinPiaoNum * 1000, "批量转换银票");
                }

                strcmd = string.Format("{0}:{1}", roleID, yinPiaoNum);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端强迫关入牢房
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessForceToLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int toMapCode = Global.GetLaoFangMapCode();
                if (-1 != toMapCode)
                {
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                    {
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, toMapCode, -1, -1, -1);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端强迫关入牢房
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetRoleDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //将角色的每日数据发送给客户端
                GameManager.ClientMgr.NotifyRoleDailyData(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取BOSS的刷新信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBossInfoDictCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //将BOSS刷新数据通知客户端
                GameManager.ClientMgr.NotifyBossInfoDictData(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取排行榜的信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetPaiHangListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                //刘惠城 临时测试

                //                 GameMap map = GameManager.MapMgr.DictMaps[1];
                //                 GameManager.MonsterZoneMgr.AddDynamicMonsters(1, 100, -1, 5000, map.MapGridRowsNum / 2, map.MapGridColsNum / 2, 100, 0);

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

      

        /// <summary>
        /// 精灵自动寻路到镖车事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteFindBiaoCheCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(roleID);

                int toMapCode = -1;
                int toPosX = 0;
                int toPosY = 0;
                if (null != biaoCheItem)
                {
                    toMapCode = biaoCheItem.MapCode;
                    toPosX = biaoCheItem.PosX;
                    toPosY = biaoCheItem.PosY;
                }

                string strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, toMapCode, toPosX, toPosY);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取充值积分的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetChongZhiJiFenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取充值点兑换数据的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetInputPointsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                JieriIPointsExchgActivity act = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                string cmdData = new UTF8Encoding().GetString(data, 0, count);
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                cmdData += ':';
                cmdData += act.FromDate.Replace(':', '$');
                cmdData += ':';
                cmdData += act.ToDate.Replace(':', '$');
                byte[] bytesCmd = new UTF8Encoding().GetBytes(cmdData);

                // 向DB发起请求
                TCPProcessCmdResults eRet = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, bytesCmd, bytesCmd.Length, out tcpOutPacket, socket.ServerId);

                // 处理DB的返回消息
                string cmdDataDB = null;
                tcpOutPacket.GetPacketCmdData(out cmdDataDB);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 加工后返回Client
                if (null != act)
                {
                    string cmdDataClient;
                    act.BuildInputPointsDataCmdForClient(client, cmdDataDB, out cmdDataClient);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdDataClient, nID);
                }

                return eRet;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取周末充值数据的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetWeekEndIputDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                WeedEndInputActivity act = HuodongCachingMgr.GetWeekEndInputActivity();
                if (null == act || !act.InActivityTime())
                {
                    strcmd = string.Format("{0}:{1}", -1, 0); // 调整消息
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string strFlag = RoleParamName.WeekEndInputFlag;
                String WeekEndInputRandData = Global.GetRoleParamByName(client, strFlag);
                if (string.IsNullOrEmpty(WeekEndInputRandData))
                {
                    strcmd = string.Format("{0}:{1}", -1, 0);
                }
                else
                {
                    //"Day|WhitchOne$RewardID$id,id,id,id|WhitchOne$RewardID$id,id,id,id|WhitchOne$RewardID$id,id,id,id"
                    string[] InputRandData = WeekEndInputRandData.Split('#');
                    if (InputRandData.Length == 2) // 获得周末充值随机奖励数据
                    {
                        strcmd = string.Format("{0}:{1}", 0, InputRandData[1]);
                    }
                }

                // 更新界面打开时间
                act.UpdateWeekEndInputOpenDay(client);

                // 刷新与充值回馈相关图标状态
                client._IconStateMgr.FlushChongZhiIconState(client);
                client._IconStateMgr.SendIconStateToClient(client);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取副本历史列表记录事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetFuBenHistListDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端获取其他玩家的坐骑
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetOtherHorseDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Xem thông tin play khác
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetOtherAttrib2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
               
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int ohterRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                RoleDataEx roleDataEx = null;

                
                KPlayer otherClient = GameManager.ClientMgr.FindClient(ohterRoleID);
                if (null == otherClient)
                {
                    byte[] bytesData = null;
                    if (TCPProcessCmdResults.RESULT_FAILED != Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, socket.ServerId))
                    {
                        Int32 length = BitConverter.ToInt32(bytesData, 0);

                       
                        roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
                    }
                    else
                    {
                        roleDataEx = new RoleDataEx()
                        {
                            RoleID = -2,
                        };
                    }
                }
                else
                {
                    roleDataEx = otherClient.GetRoleData();
                }

                // Gửi thông tin về cho KPlayer
                GameManager.ClientMgr.NotifySelfOtherData(tcpMgr.MySocketListener, pool, client, roleDataEx, nID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
              
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
               
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取帮会列表事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBangHuiListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端创建帮会事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessCreateBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string[] nameAndPingTaiID = fields[1].Split('$');
                string bangHuiName = nameAndPingTaiID[0];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 对名字检查
                string name = nameAndPingTaiID[0];
                int ret = NameServerNamager.CheckInvalidCharacters(name);
                if (ret <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", ret, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                ret = NameServerNamager.RegisterNameToNameServer(client.ZoneID, client.strUserID, nameAndPingTaiID, 1, roleID);
                if (ret <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", ret, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断转生等级
                if (client.ChangeLifeCount < Global.CreateBangHuiNeedZhuanShengLevel)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else if (client.ChangeLifeCount == Global.CreateBangHuiNeedZhuanShengLevel)
                {
                    //判断是否角色等级足够了
                    if (client.m_Level < Global.CreateBangHuiNeedLevel)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int createBangHuiGoodsID = Global.CreateBangHuiNeedGoodsID;

                //判断有没有建帮令
                if (createBangHuiGoodsID > 0)
                {
                    if (Global.GetTotalGoodsCountByID(client, createBangHuiGoodsID) <= 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -50, roleID, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                // 先检查钱够不够
                if (client.Money1 + client.YinLiang < Global.CreateBangHuiNeedTongQian)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                cmdData += string.Format(":{0}", Global.GetZhanMengInitCoin());
                string[] retFields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == retFields || 3 != retFields.Length || Convert.ToInt32(retFields[0]) < 0)
                {
                    int dbRetCode = (retFields != null && retFields.Length > 0) ? Convert.ToInt32(retFields[0]) : -1031;
                    if (dbRetCode == -1031)
                    {
                        dbRetCode = StdErrorCode.Error_ZhanMeng_Duplicate_Name;
                    }
                    else
                    {
                        dbRetCode = StdErrorCode.Error_ZhanMeng_Has_In_ZhanMeng;
                    }

                    strcmd = string.Format("{0}:{1}:{2}", dbRetCode, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int retCode = Convert.ToInt32(retFields[0]);
                if (retCode >= 0)
                {
                    //首先判断有没有足够的铜钱
                    //if (client.YinLiang < Global.CreateBangHuiNeedTongQian)
                    if (!Global.SubBindTongQianAndTongQian(client, Global.CreateBangHuiNeedTongQian, "创建帮会"))
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    //扣除游戏金币1
                    //GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, Global.CreateBangHuiNeedTongQian); //不处理失败情况

                    bool usedBinding = false;
                    bool usedTimeLimited = false;

                    //从用户物品中扣除消耗的数量
                    if (createBangHuiGoodsID > 0)
                        GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, createBangHuiGoodsID, 1, false, out usedBinding, out usedTimeLimited); //不处理失败情况

                    client.GuildID = Convert.ToInt32(retFields[2]);
                    client.GuildName = Global.FormatBangHuiName(client.ZoneID, bangHuiName);
                    client.GuildRank = 1;

                    //通知附近用户，某用户的帮派信息进行了修改
                    //通知帮派信息(限制当前地图)
                    GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
                    GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, client.GuildID), (int)SceneUIClasses.All);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.EnterBangHuiUnixSecs, DataHelper.UnixSecondsNow(), true);

                    //通知GameServer同步帮旗的级别和名称
                    JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);

                    //广播创建消息
                    Global.BroadcastBangHuiCreateOk(client, client.GuildName);

                    //触发战盟事件
                    GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createCreateZhanMengEvent(Global.FormatRoleName4(client), client.GuildID, client.ServerId));

                    // 触发成就 [7/18/2014 LiaoWei]
                    ChengJiuManager.OnFirstInFaction(client);

                    UnionPalaceManager.initSetUnionPalaceProps(client, true);

                    client._IconStateMgr.CheckGuildIcon(client, false);

                }

                strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, retFields[2]);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端查询帮会详细数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryBangHuiDetailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                // 帮会捐赠 为了客户端能正常的显示...
                int nChangeDayFlag = 0;
                int dayID = TimeUtil.NowDateTime().DayOfYear;


                byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}", roleID, bhid, nChangeDayFlag, dayID));

                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, sendBytesCmd, sendBytesCmd.Length, out tcpOutPacket, client.ServerId);
            
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端修改帮会公告
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUpdateBangHuiBulletinCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端查询帮会成员数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBHMemberDataListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端修改是否验证
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUpdateBHVerifyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端申请加入帮派
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessApplyToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                string bhName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (client.GuildID > 0) //如果已经在帮会中，则不处理申请加入其他帮会的操作
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (Global.GetUnionLevel(client) < Global.JoinBangHuiNeedLevel)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                /*// 检测是否已经申请过了 [1/17/2014 LiaoWei]
                {
                    Dictionary<int, List<int>> dData = null;
                    dData = GuildManager.m_GuildApplyDic;

                    if (dData != null)
                    {
                        List<int> lData = null;

                        lData = dData[bhid];
                        if (lData != null && lData.Contains(roleID))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                                                StringUtil.substitute(Global.GetLang("你已经申请过了加入【{0}】战盟， 正在等待管理员批准"),
                                                                bhName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);        
                        }
                    }
                                                            
                }*/

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYBHMGRLIST, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("从DBServer查询战盟的管理成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //判断要加入的帮派是否需要验证
                int isVerify = Convert.ToInt32(fields[2]);
                if (isVerify < 0) //出错了，不处理
                {
                    if (-1001 == isVerify || -1 == isVerify)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("想要加入的『{0}』战盟已经不存在!"), bhName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }

                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (1 == isVerify) //需要验证
                {
                    string gmCmdData = string.Format("-applytobh {0} {1} {2} {3} {4}", roleID, client.RoleName, bhid, bhName, fields[3]);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, "", 0, "", 0, gmCmdData, 0, 0, -1),
                        null, client.ServerId);

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.EnterBangHuiUnixSecs, DataHelper.UnixSecondsNow(), true);
                    GameManager.ClientMgr.NotifyHintMsg(client, string.Format(Global.GetLang("您已申请加入战盟【{0}】,请耐心等待管理员审批！"), bhName));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //直接允许加入
                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, bhid, roleID, client.RoleName, 0);

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_ADDBHMEMBER, strcmd, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode < 0)
                {
                    if (-1001 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟已经不存在"), bhName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }
                    else if (-1060 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟的人数已经达到了上限"), bhName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }
                    else if (-1020 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("该玩家已经在战盟中,无法添加")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }
                    else
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("将『{0}』加入『{1}』战盟时发生错误：{2}"), client.RoleName, bhName, retCode),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }

                    return TCPProcessCmdResults.RESULT_OK;
                }

                //触发战盟事件
                GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));

                //修改加入帮派的角色的信息
                client.GuildID = bhid;
                client.GuildName = bhName;
                client.GuildRank = 0;

                //通知附近用户，某用户的帮派信息进行了修改
                //通知帮派信息(限制当前地图)
                GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
                GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, bhid), (int)SceneUIClasses.All);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.EnterBangHuiUnixSecs, DataHelper.UnixSecondsNow(), true);

                int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.GuildID);

                //更新BufferData
                double[] actionParams = new double[1];
                actionParams[0] = (double)junQiLevel - 1;
                Global.UpdateBufferData(client, BufferItemTypes.JunQi, actionParams, 1);

                //通知本帮派的所有在线的人，某人加入了本帮派
                Global.BroadcastBangHuiMsg(client.RoleID, bhid,
                    StringUtil.substitute(Global.GetLang("『{0}』加入了『{1}』战盟"), client.RoleName, bhName),
                    true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);

                //成就处理第一次加入战盟
                ChengJiuManager.OnFirstInFaction(client);

                UnionPalaceManager.initSetUnionPalaceProps(client, true);
                AllyManager.getInstance().UnionDataChange(bhid, client.ServerId);

                client._IconStateMgr.CheckGuildIcon(client, false);

                /*// 同样返回给客户端 [1/16/2014 LiaoWei]
                string strcmd1 = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", roleID, client.RoleName,
                                                client.FactionID, client.m_Level, client.ChangeLifeCount, bhid, bhName);
                
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd1, nID);*/

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端拒绝加入帮会
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRefuseApplyToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int otherRoleID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null != otherClient)
                {
                    //拒绝申请加入帮派的操作
                    GameManager.ClientMgr.NotifyRefuseApplyToBHMember(otherClient, client.RoleName, client.GuildName);
                }
                else //使用GM命令通知某个角色加入了某个帮派
                {
                    string gmCmdData = string.Format("-refusetobh {0} {1} {2} {3}", otherRoleID, client.RoleName, client.GuildName, 0);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                        null, client.ServerId);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端添加帮会成员
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAddBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int otherRoleID = Convert.ToInt32(fields[2]);
                string otherRoleName = fields[3];
                int toVerify = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //不能自己添加自己
                if (roleID == otherRoleID)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("不能添加自己")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return TCPProcessCmdResults.RESULT_OK;
                }

                //对方必须在线
                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null == otherClient)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("『{0}』不在线"), otherRoleName),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return TCPProcessCmdResults.RESULT_OK;
                }

                //对方等级必须满足条件，低于50级不能加入战盟
                if (Global.GetUnionLevel(otherClient) < Global.JoinBangHuiNeedLevel)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("『{0}』等级低于{1}，不能加入战盟"), otherRoleName, Global.JoinBangHuiNeedLevel),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_ADDBHMEMBER, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode < 0)
                {
                    if (-1001 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟已经不存在"), client.GuildName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else if (-1060 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟的人数已经达到了上限"), client.GuildName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else if (-1050 == retCode) //需要验证
                    {
                        if (null != otherClient)
                        {
                            //加入帮派邀请通知通知自己
                            GameManager.ClientMgr.NotifyInviteToBangHui(tcpMgr.MySocketListener, pool, otherClient, client.RoleID, client.RoleName, bhid, client.GuildName, client.ChangeLifeCount);
                        }
                        else //使用GM命令通知某个角色加入了某个帮派
                        {
                            string gmCmdData = string.Format("-invitetobh {0} {1} {2} {3} {4}", otherRoleID, client.RoleID, client.RoleName, bhid, client.GuildName);

                            //转发GM消息到DBServer
                            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                                string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                                null, client.ServerId);
                        }

                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("等待『{0}』通过加入『{1}』战盟的邀请..."), otherRoleName, client.GuildName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    else if (-1020 == retCode)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("『{0}』已经在战盟中,无法添加"), otherRoleName),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("将『{0}』加入『{1}』战盟时发生错误：{2}"), otherRoleName, client.GuildName, retCode),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return TCPProcessCmdResults.RESULT_OK;
                }

                //触发战盟事件
                GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(otherRoleName, bhid, otherClient.ServerId));
                if (null != otherClient)
                {
                    //通知某个角色被加入了某个帮派
                    GameManager.ClientMgr.NotifyJoinBangHui(tcpMgr.MySocketListener, pool, otherClient, bhid, client.GuildName);
                    GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(otherClient, bhid), (int)SceneUIClasses.All);
                }
                else //使用GM命令通知某个角色加入了某个帮派
                {
                    string gmCmdData = string.Format("-joinbh {0} {1} {2}", otherRoleID, bhid, client.GuildName);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                        null, client.ServerId);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端同意加入帮派
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAgreeToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                int bhid = Convert.ToInt32(fields[2]);
                string bhName = fields[3];
                int agreeTo = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (client.GuildID > 0) //如果已经在帮会中，则不处理申请加入其他帮会的操作
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (Global.GetUnionLevel(client) < Global.JoinBangHuiNeedLevel)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (1 == agreeTo) //同意
                {
                    if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //直接允许加入
                    string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, bhid, roleID, client.RoleName, 0);

                    fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_ADDBHMEMBER, strcmd, client.ServerId);
                    if (null == fields || fields.Length != 4)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                        return TCPProcessCmdResults.RESULT_FAILED;
                    }

                    int retCode = Global.SafeConvertToInt32(fields[0]);
                    if (retCode < 0)
                    {
                        if (-1001 == retCode)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟已经不存在"), bhName),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }
                        else if (-1060 == retCode)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("要加入的『{0}』战盟的人数已经达到了上限"), bhName),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }
                        else
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("『{0}』加入『{1}』战盟时发生错误：{2}"), client.RoleName, bhName, retCode),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }

                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    //修改加入帮派的角色的信息
                    client.GuildID = bhid;
                    client.GuildName = bhName;
                    client.GuildRank = 0;

                    //通知附近用户，某用户的帮派信息进行了修改
                    //通知帮派信息(限制当前地图)
                    GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
                    GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, bhid), (int)SceneUIClasses.All);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.EnterBangHuiUnixSecs, DataHelper.UnixSecondsNow(), true);

                    int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.GuildID);

                    //更新BufferData
                    double[] actionParams = new double[1];
                    actionParams[0] = (double)junQiLevel - 1;
                    Global.UpdateBufferData(client, BufferItemTypes.JunQi, actionParams, 1);

                    //通知本帮派的所有在线的人，某人加入了本帮派
                    Global.BroadcastBangHuiMsg(client.RoleID, bhid,
                        StringUtil.substitute(Global.GetLang("『{0}』加入了『{1}』战盟"), client.RoleName, bhName),
                        true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlySysHint);

                    //触发战盟事件
                    GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));
                    //成就处理第一次加入帮会
                    ChengJiuManager.OnFirstInFaction(client);

                    UnionPalaceManager.initSetUnionPalaceProps(client, true);

                    client._IconStateMgr.CheckGuildIcon(client, false);
                }
                else //拒绝
                {
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        //拒绝申请加入帮派的操作
                        GameManager.ClientMgr.NotifyRefuseInviteToBHMember(otherClient, client.RoleName, bhName);
                    }
                    else //使用GM命令通知某个角色加入了某个帮派
                    {
                        string gmCmdData = string.Format("-refusetobh {0} {1} {2} {3}", otherRoleID, client.RoleName, bhName, 1);

                        //转发GM消息到DBServer
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                            string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                            null, client.ServerId);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端删除帮会成员
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRemoveBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int otherRoleID = Convert.ToInt32(fields[2]);
                string otherRoleName = fields[3];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_REMOVEBHMEMBER, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("将『{0}』开除出『{1}』战盟时发生错误：{2}"), otherRoleName, client.GuildName, retCode),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    strcmd = string.Format("{0}:{1}:{2}:{3}", retCode, roleID, bhid, otherRoleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null != otherClient)
                {
                    //通知某个角色离开了某个帮派
                    GameManager.ClientMgr.NotifyLeaveBangHui(tcpMgr.MySocketListener, pool, otherClient, bhid, client.GuildName, 0);
                    //触发战盟事件
                    GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createLeaveZhanMengEvent(Global.FormatRoleName4(otherClient), bhid, otherClient.ServerId));

                }
                else //使用GM命令通知某个角色加入了某个帮派
                {
                    string gmCmdData = string.Format("-leavebh {0} {1} {2} {3}", otherRoleID, bhid, client.GuildName, 0);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                        null, client.ServerId);
                }

                AllyManager.getInstance().UnionDataChange(client.GuildID, client.ServerId);

                strcmd = string.Format("{0}:{1}:{2}:{3}", retCode, roleID, bhid, otherRoleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端离开某个帮会
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQuitFromBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID <= 0) //这玩家根本没战盟
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2000, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (1 == client.GuildRank) //这玩家是战盟首领，不能退出
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("首领无法退出战盟")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    strcmd = string.Format("{0}:{1}:{2}", -2100, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUITFROMBANGHUI, cmdData, client.ServerId);
                if (null == fields || fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("『{0}』脱离『{1}』战盟时发生错误：{2}"), client.RoleName, client.GuildName, retCode),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知某个角色离开了某个帮派
                GameManager.ClientMgr.NotifyLeaveBangHui(tcpMgr.MySocketListener, pool, client, bhid, client.GuildName, 1);

                //触发战盟事件
                GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createLeaveZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));

                AllyManager.getInstance().UnionDataChange(client.GuildID, client.ServerId);

                strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端解散帮会
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessDestroyBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";
                BangHuiDetailData unionData = Global.GetBangHuiDetailData(-1, bhid, client.ServerId);
                if (client.GuildID != bhid || unionData == null)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2000, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int unionLevel = unionData.QiLevel;

                if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), (int)SceneUIClasses.All))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_DESTROYBANGHUI, cmdData, client.ServerId);
                if (null == fields || fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string bhName = client.GuildName;
                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("『{0}』解散『{1}』战盟时发生错误：{2}"), client.RoleName, client.GuildName, retCode),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知本帮派的所有在线的人，某人加入了本帮派
                Global.BroadcastBangHuiMsg(roleID, bhid,
                    StringUtil.substitute(Global.GetLang("首领【{0}】解散了『{1}』战盟"), client.RoleName, bhName),
                    true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);

                //通知所有指定帮会的在线用户帮会已经解散
                GameManager.ClientMgr.NotifyBangHuiDestroy(retCode, roleID, bhid);

                AllyManager.getInstance().UnionDataChange(bhid, client.ServerId, true, unionLevel);

                //通知其他线路
                string gmCmdData = string.Format("-destroybh {0} {1} {2}", retCode, roleID, bhid);

                //转发GM消息到DBServer
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                    string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                    null, client.ServerId);

                //帮会解散时发出取消领地所属的帮旗的操作
                JunQiManager.SendClearJunQiCmd(bhid);

                //通知GameServer同步帮旗的级别和名称
                JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);

                //通知GameServer同步领地帮会分布
                JunQiManager.NotifySyncBangHuiLingDiItemsDict();

                //如果自己是皇帝
                if (HuangChengManager.GetHuangDiRoleID() == client.RoleID)
                {
                    //处理拥有皇帝特效的角色死亡，而失去皇帝特效的事件
                    HuangChengManager.HandleDeadHuangDiRoleChanging(null);
                }

                //清除缓存项
                Global.RemoveBangHuiMiniData(bhid);

                GuildCopyMap mapData = GameManager.GuildCopyMapMgr.FindGuildCopyMap(bhid);
                // 检测完成
                if (null != mapData)
                {
                    // 移除缓存
                    GameManager.GuildCopyMapMgr.RemoveGuildCopyMap(mapData.GuildID);
                    // 关闭副本
                    GameManager.CopyMapMgr.CloseGuildCopyMap(mapData.SeqID, mapData.MapCode);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端修改被邀请加入帮会时的是否验证
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessBangHuiVerifyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int toVerify = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                client.GuildVerify = toVerify;

                //更新上线状态
                Global.ExecuteDBCmd(nID,
                    string.Format("{0}:{1}", roleID, toVerify), client.ServerId);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端修改成员职务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessChgBHMemberZhiWuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int otherRoleID = Convert.ToInt32(fields[2]);
                int zhiWu = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                if (client.GuildRank != 1)
                {
                    //只有首领能修改职务
                    string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", -1030, roleID, bhid, otherRoleID, zhiWu);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (roleID == otherRoleID)
                {
                    //不能修改自己的职务
                    string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", -1002, roleID, bhid, otherRoleID, zhiWu);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                PreBangHuiChangeZhiWuEventObject changeZhiWuEventObj = new PreBangHuiChangeZhiWuEventObject(client, bhid, otherRoleID, zhiWu);
                if (!GlobalEventSource4Scene.getInstance().fireEvent(changeZhiWuEventObj, (int)SceneUIClasses.All) && changeZhiWuEventObj.Handled)
                {
                    string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", StdErrorCode.Error_ZhanMeng_Not_Allowed_Change_ShengYuChengZhu, roleID, bhid, otherRoleID, zhiWu);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (zhiWu == (int)ZhanMengZhiWus.ShouLing)
                {
                    BangHuiLingDiItemData lingDiItemData = JunQiManager.GetItemByLingDiID((int)LingDiIDs.LuoLanChengZhan);
                    if (null != lingDiItemData && lingDiItemData.BHID > 0 && lingDiItemData.BHID == client.GuildID)
                    {
                        string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", StdErrorCode.Error_ZhanMeng_Not_Allowed_Change_LuoLanChengZhu, roleID, bhid, otherRoleID, zhiWu);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //更新上线状态
                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("修改战盟成员的职务时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    int oldZhiWuRoleID = Global.SafeConvertToInt32(fields[5]);
                    string gmCmdData = string.Format("-chbhzhiwu {0} {1} {2} {3}", bhid, otherRoleID, zhiWu, oldZhiWuRoleID);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", 0, "", 0, "", 0, gmCmdData, 0, 0, /*GameManager.ServerLineID*/-1), //强迫发送到所有线， 包括自己
                        null, client.ServerId);

                    //触发战盟事件
                    GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createChangeZhiWuEvent(Global.FormatRoleName4(client), bhid, zhiWu, otherRoleID, client.ServerId));

                    AllyManager.getInstance().UnionDataChange(bhid, client.ServerId);
                }

                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, otherRoleID, zhiWu);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端修改成员称号
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessChgBHMemberChengHaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端搜索角色列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSearchRolesFromDBCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // Giới hạn yêu cầu add thành viên liên tục
                if (CreateRoleLimitManager.Instance().AddBHMemberSlotTicks > 0 &&
                    TimeUtil.NOW() - client._AddBHMemberTicks < CreateRoleLimitManager.Instance().AddBHMemberSlotTicks)
                {
                    // 返回错误信息
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("您操作过快，请稍后再试")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                client._AddBHMemberTicks = TimeUtil.NOW();

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端查询帮贡历史数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBangGongHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端为帮会贡献铜钱
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessDonateBGMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                // 帮会贡献改造 帮会贡献区分1.银两 2.元宝[2/28/2014 LiaoWei]

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int nMoneyType = Convert.ToInt32(fields[2]);    // 1.银两 2.元宝
                int nDonateNum = Convert.ToInt32(fields[3]);    // 捐赠的次数

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid || bhid <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, bhid, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (nDonateNum != 1 && nDonateNum != 10)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -103, roleID, bhid, 0, 0);              // 计数不对
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int[] nValue1 = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengJinBiJuanZeng"); ;
                int[] nValue2 = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZuanShiJuanZeng");

                int nBangGongLimit = 0;
                int nSubMoney = 0;
                int bangGong = 0;       // 当天的帮贡数额
                int nGuildMoney = 0;

                // VIP处理 增加每日帮贡增加的战功值
                int[] nAddNum1 = null;
                int[] nAddNum2 = null;
                int nVIPLev = client.VipLevel;
                if (nVIPLev > 0 && nVIPLev <= (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                {
                    nAddNum1 = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinBiJuanZeng");
                    nAddNum2 = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPZuanShiJuanZeng");
                }


                AddBangGongTypes bgType = AddBangGongTypes.None;
                if (nMoneyType == 1)
                {
                    nSubMoney = nDonateNum * nValue1[0];

                    if (client.YinLiang < nSubMoney)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, bhid, 0, 0);           // 金币不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, nSubMoney, "帮会贡献"))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, bhid, 0, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    bangGong = nDonateNum * nValue1[1];
                    nGuildMoney = nDonateNum * nValue1[2];
                    nBangGongLimit = nValue1[3];

                    if (nAddNum1 != null && nAddNum1.Length > 0 && nAddNum1.Length < 13)
                    {
                        nBangGongLimit += nAddNum1[nVIPLev];
                    }

                    bgType = AddBangGongTypes.BGGold;
                }
                //else if (nMoneyType == 2)
                //{
                //    nSubMoney = nDonateNum * nValue2[0];

                //    if (client.UserMoney < nSubMoney)
                //    {
                //        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -101, roleID, bhid, 0, 0);          // 钻石不够
                //        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //        return TCPProcessCmdResults.RESULT_DATA;
                //    }

                //    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, nSubMoney, "帮会捐赠"))
                //    {
                //        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -101, roleID, bhid, 0, 0);
                //        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //        return TCPProcessCmdResults.RESULT_DATA;
                //    }

                //    bangGong = nDonateNum * nValue2[1];
                //    nGuildMoney = nDonateNum * nValue2[2];
                //    nBangGongLimit = nValue2[3];

                //    if (nAddNum2 != null && nAddNum2.Length > 0 && nAddNum2.Length < 13)
                //    {
                //        nBangGongLimit += nAddNum2[nVIPLev];
                //    }

                //    bgType = AddBangGongTypes.BGDiamond;
                //}
                else
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -102, roleID, bhid, 0, 0);              // 消耗类型错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //添加用户帮贡
                if (GameManager.ClientMgr.AddBangGong(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, ref bangGong, bgType, nBangGongLimit))
                {
                    //[bing] 记录战功增加流向log
                    if (0 != bangGong)
                        GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "为帮会贡献铜板", "系统", client.RoleName, "增加", bangGong, client.ZoneID, client.strUserID, client.BangGong, client.ServerId);
                }

                // 去掉荣耀值 其实它和帮贡是同一个东西 MU项目 就用帮贡了 [2/28/2014 LiaoWei]
                //增加荣耀
                //GameManager.ClientMgr.ModifyRongYuValue(client, bangGong, true, true);

                string dbcmd = string.Format("{0}:{1}:{2}:{3}", roleID, bhid, nGuildMoney, client.BangGong);
                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_DONATEBGMONEY, dbcmd, client.ServerId);
                if (null == fields || fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("角色为战盟贡献金币时时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);

                //触发战盟事件
                if (retCode == 1)
                {
                    GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createZhanMengJuanZengEvent(Global.FormatRoleName4(client), bhid, nSubMoney, nMoneyType, bangGong, client.ServerId));
                }

                // 1.返回码 2.roleid 3.帮会ID 4.这次捐赠给战盟增加的资金值 5.这次次捐赠获得的战功值
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, nGuildMoney, bangGong);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端为帮会贡献道具
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessDonateBGGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 7)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int goods1Num = Convert.ToInt32(fields[2]);
                int goods2Num = Convert.ToInt32(fields[3]);
                int goods3Num = Convert.ToInt32(fields[4]);
                int goods4Num = Convert.ToInt32(fields[5]);
                int goods5Num = Convert.ToInt32(fields[6]);

                goods1Num = Global.GMax(0, goods1Num);
                goods2Num = Global.GMax(0, goods2Num);
                goods3Num = Global.GMax(0, goods3Num);
                goods4Num = Global.GMax(0, goods4Num);
                goods5Num = Global.GMax(0, goods5Num);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid || bhid <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, bhid, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string donateGoodsIDs = GameManager.systemParamsList.GetParamValueByName("ZhanMengGoods");
                if (string.IsNullOrEmpty(donateGoodsIDs))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, bhid, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int[] donateGoodsIDArray = Global.String2IntArray(donateGoodsIDs);
                if (null == donateGoodsIDArray || donateGoodsIDArray.Length != 4)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -20, roleID, bhid, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                List<int> goodsNumList = new List<int>();
                goodsNumList.Add(goods1Num);
                goodsNumList.Add(goods2Num);
                goodsNumList.Add(goods3Num);
                goodsNumList.Add(goods4Num);
                goodsNumList.Add(goods5Num);

                int[] nValue2 = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengGoodsJuanZeng");
                int nGoodsOrder = 0;
                int bangGong = 0;
                for (int i = 0; i < donateGoodsIDArray.Length; i++)
                {
                    if (Global.GetTotalGoodsCountByID(client, donateGoodsIDArray[i]) >= goodsNumList[i])
                    {
                        bool usedBinding = false;
                        bool usedTimeLimited = false;

                        //从用户物品中扣除消耗的数量
                        if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, donateGoodsIDArray[i], goodsNumList[i], false, out usedBinding, out usedTimeLimited))
                        {
                            nGoodsOrder = i;
                            bangGong += (goodsNumList[i]);
                        }
                        else
                        {
                            goodsNumList[i] = 0;
                        }
                    }
                    else
                    {
                        goodsNumList[i] = 0;
                    }
                }

                if (bangGong <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -30, roleID, bhid, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nGuildMoney = bangGong * nValue2[1];
                bangGong *= nValue2[0];

                //添加用户帮贡
                if (GameManager.ClientMgr.AddBangGong(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, ref bangGong, AddBangGongTypes.BGGoods, nValue2[2]))
                {
                    //[bing] 记录战功增加流向log
                    if (0 != bangGong)
                        GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "为帮会贡献道具", "系统", client.RoleName, "增加", bangGong, client.ZoneID, client.strUserID, client.BangGong, client.ServerId);
                }

                //增加荣耀
                // GameManager.ClientMgr.ModifyRongYuValue(client, bangGong, true, true);

                string dbcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, bhid, goodsNumList[0], goodsNumList[1], goodsNumList[2], goodsNumList[3], goodsNumList[4], bangGong, nGuildMoney);
                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_DONATEBGGOODS, dbcmd, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("角色为战盟贡献道具时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode == 0)
                {
                    if (nGoodsOrder >= 0)
                    {
                        GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createZhanMengGoodsJuanZengEvent(Global.FormatRoleName4(client), bhid, donateGoodsIDArray[nGoodsOrder], goodsNumList[nGoodsOrder], bangGong, client.ServerId));
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, nGuildMoney, bangGong);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端查询帮旗和领地占领数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBangQiInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端执行帮旗改名
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRenameBangQiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                string bangQiName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, bhid, bangQiName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string dbcmd = string.Format("{0}:{1}:{2}:{3}", roleID, bhid, bangQiName, Global.RenameBangQiNameNeedTongQian);
                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_RENAMEBANGQI, dbcmd, client.ServerId);
                if (null == fields || fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("修改帮旗名称时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //通知GameServer同步帮旗的级别和名称
                    JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, bhid, bangQiName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行帮旗升级操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUpLevelBangQiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int toLevel = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (toLevel > Global.MaxBangHuiFlagLevel)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -10, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem systemFlagUpLevelItem = null;
                if (!GameManager.systemBangHuiFlagUpLevelMgr.SystemXmlItemDict.TryGetValue(toLevel, out systemFlagUpLevelItem))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -20, roleID, bhid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int goods1Num = systemFlagUpLevelItem.GetIntValue("GoodsOneNumber");
                int goods2Num = systemFlagUpLevelItem.GetIntValue("GoodsTwoNumber");
                int goods3Num = systemFlagUpLevelItem.GetIntValue("GoodsThreeNumber");
                int goods4Num = systemFlagUpLevelItem.GetIntValue("GoodsFourNumber");
                int goods5Num = systemFlagUpLevelItem.GetIntValue("GoodsFiveNumber");
                int needMoney = systemFlagUpLevelItem.GetIntValue("UseMoney");

                string dbcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, bhid, goods1Num, goods2Num, goods3Num, goods4Num, goods5Num, needMoney, toLevel);
                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_UPLEVELBANGQI, dbcmd, client.ServerId);
                if (null == fields || fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("升级帮旗等级时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //通知GameServer同步帮会的所属和范围
                    JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);

                    //帮旗升级的提示
                    Global.BroadcastJunQiUpLevelHint(client, toLevel);

                    // GameManager.ClientMgr.NotifyBangHuiUpLevel(bhid);
                }

                strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端根据帮会ID查询领地配置信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBHLingDiInfoDictByBHIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行设置领地税率的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSetLingDiTaxCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int lingDiID = Convert.ToInt32(fields[2]);
                int newLingDiTax = Convert.ToInt32(fields[3]);
                newLingDiTax = Global.GMin(10, newLingDiTax);
                newLingDiTax = Global.GMax(0, newLingDiTax);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, bhid, lingDiID, newLingDiTax);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_SETLINGDITAX, cmdData, client.ServerId);
                if (null == fields || fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("设置领地税率时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //扬州城铜钱商店税率调整提示
                    Global.BroadcastYangZhouTaxHint(client, lingDiID, newLingDiTax);

                    //通知GameServer同步帮旗的级别和名称
                    JunQiManager.NotifySyncBangHuiLingDiItemsDict();
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, lingDiID, newLingDiTax);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行添加王城争夺战的请求[王城争霸]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteCityWarRequestCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                int lingDiID = (int)LingDiIDs.HuangGong;
                int bhid = client.GuildID;

                //验证申请者是否本帮会的人，且帮主才能申请
                if (client.GuildRank != 1)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, bhid, lingDiID, "");
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                BangHuiLingDiItemData lingDiItem = JunQiManager.GetItemByLingDiID(lingDiID);
                if (null == lingDiItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, bhid, lingDiID, "");
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int retCode = -1;
                TimeSpan ts;

                //加锁，防止出现同时申请的情况， 单一应用所，不用担心死锁
                lock (WangChengManager.ApplyWangChengWarMutex)
                {
                    //banghuiid_day,banghuiid_day,banghuiid_day
                    String oldWarRequest = lingDiItem.WarRequest;

                    Dictionary<int, int> warRequstMap = WangChengManager.GetWarRequstMap(oldWarRequest);

                    //进行帮会是否已在申请列表的判断
                    if (warRequstMap.ContainsKey(bhid))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, bhid, lingDiID, "");
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //目标战争day
                    DateTime destWarDay = TimeUtil.NowDateTime().AddDays(1);

                    //最多20次，同时有超过20个帮会申请吗？一下超过20天
                    int nMaxTimes = 20;

                    //不断的往后挪动天数
                    while (warRequstMap.ContainsValue(destWarDay.DayOfYear) && nMaxTimes > 0)
                    {
                        destWarDay = destWarDay.AddDays(1);
                        nMaxTimes--;
                    }

                    //超过最大申请个数
                    if (warRequstMap.ContainsValue(destWarDay.DayOfYear))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -4, roleID, bhid, lingDiID, "");
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    bool usedBinding = false;
                    bool usedTimeLimited = false;

                    int needSubGoodsNum = 0;//所需物品数量
                    int needGoodsID = -1;//王城争霸所需物品

                    int[] needWarRequestGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WarRequestGoods");
                    if (null == needWarRequestGoods || 2 != needWarRequestGoods.Length)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -44, roleID, bhid, lingDiID, "");
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    needGoodsID = needWarRequestGoods[0];
                    needSubGoodsNum = needWarRequestGoods[1];

                    //扣除物品
                    if (needSubGoodsNum > 0)
                    {
                        //判断物品数量
                        if (Global.GetTotalGoodsCountByID(client, needGoodsID) < needSubGoodsNum)
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -21, roleID, bhid, lingDiID, needGoodsID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        //从用户物品中扣除消耗的数量
                        if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGoodsID, needSubGoodsNum, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -22, roleID, bhid, lingDiID, needGoodsID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    else
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -23, roleID, bhid, lingDiID, needGoodsID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //设置新的王城战申请day
                    warRequstMap.Add(bhid, destWarDay.DayOfYear);

                    String nowWarRequest = WangChengManager.GeWarRequstString(warRequstMap);

                    //通知gamedbserver 更新数据，同时会通知所有gameserver同步数据
                    retCode = WangChengManager.SetCityWarRequestToDBServer(lingDiID, nowWarRequest);

                    //今天加1秒，正好错过1天，不加一秒也会错过几十毫秒，加上更保险
                    ts = destWarDay - TimeUtil.NowDateTime().AddSeconds(1);

                    //广播通知
                    if (0 == retCode)
                    {
                        Global.BroadcastCityWarRequestOk(client, client.GuildName, ts.Days + 1);

                        //通知全网客户王城战的申请信息变更
                        WangChengManager.NotifyAllWangChengMapInfoData();
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, lingDiID, ts.Days + 1);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行从领地提取税收铜钱的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTakeLingDiTaxMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int lingDiID = Convert.ToInt32(fields[2]);
                int takeTaxMoney = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, bhid, lingDiID, takeTaxMoney);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (takeTaxMoney <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, bhid, lingDiID, takeTaxMoney);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_TAKELINGDITAXMONEY, cmdData, client.ServerId);
                if (null == fields || fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("从领地税提取金币时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", retCode, roleID, bhid, lingDiID, takeTaxMoney);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行从领地提取每日奖励操作【当前主要用于王城或皇城奖励】
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTakeLingDiDailyAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bhid = Convert.ToInt32(fields[1]);
                int lingDiID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (client.GuildID != bhid)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -1, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //只能领取皇宫的
                if ((int)LingDiIDs.HuangGong != lingDiID)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -12, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //战斗期间不让领
                if (WangChengManager.IsInBattling())
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -13, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //必须是帮主才能领取
                if (client.GuildRank != 1)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -11, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                BangHuiLingDiItemData lingDiItem = JunQiManager.GetItemByLingDiID(lingDiID);

                if (null == lingDiItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -2, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //已经领取过了
                if (lingDiItem.AwardFetchDay == TimeUtil.NowDateTime().DayOfYear)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", -3, roleID, bhid, lingDiID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知gamedbserver 更新相关领取标志位
                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("从领地税提取每日奖励设置领取标志位失败时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);

                //元宝2000，银两200万
                int yuanBao = 2000;
                int yinLiang = 2000000;

                if (0 == retCode)
                {
                    //从配置文件读取奖励数额
                    int[] awardArray = GameManager.systemParamsList.GetParamValueIntArrayByName("KingBangHuiAward");
                    if (2 == awardArray.Length)
                    {
                        yuanBao = awardArray[0];
                        yinLiang = awardArray[1];
                    }

                    //给予元宝 和 银两奖励
                    //领取元宝
                    if (yuanBao > 0)
                    {
                        //给用户加钱,更新用户的元宝
                        GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yuanBao, "王城福利");
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色根据领地特权领取元宝, roleID={0}({1}), Money={2}, newMoney={3}, bhid={4}", client.RoleID, client.RoleName, client.UserMoney, yuanBao, bhid), EventLevels.Record);

                        //添加获取元宝记录
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDGIVEUSERMONEYITEM, string.Format("{0}:{1}:{2}",
                            client.RoleID, yuanBao, Global.GetLang("王城福利")),
                            null, client.ServerId);
                    }

                    //领取银两
                    if (yinLiang > 0)
                    {
                        //给用户加钱,更新用户的银两
                        GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinLiang, "王城福利");
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色根据领地特权领取银两, roleID={0}({1}), Money={2}, newMoney={3}, bhid={4}", client.RoleID, client.RoleName, client.YinLiang, yinLiang, bhid), EventLevels.Record);
                    }

                    //通知GameServer同步领地相关信息辞典
                    JunQiManager.NotifySyncBangHuiLingDiItemsDict();
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", retCode, roleID, bhid, lingDiID, yuanBao, yinLiang);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端根据获取皇帝所在帮会信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetHuangDiBHInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行打开杨公宝库的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessOpenYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                bool allowAutobuy = (1 == Convert.ToInt32(fields[1])) ? true : false;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<GoodsData> goodsDataList = null;
                string goodsName = "";
                int yangGongMiDianGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YangGongMiDianGoodsID");
                //没有杨公秘典也无所谓
                if (Global.GetTotalGoodsCountByID(client, yangGongMiDianGoodsID) <= 0)
                {
                    //goodsName = Global.GetGoodsNameByID(yangGongMiDianGoodsID);

                    ///// 通知在线的对方(不限制地图)个人紧要消息
                    //GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                    //    StringUtil.substitute(Global.GetLang("背包中没有找到【{0}】, 无法开启杨公宝库"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    //tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    //return TCPProcessCmdResults.RESULT_DATA;
                }

                //是否需要购买昆仑镜
                bool needBuyKunLunJing = false;

                int kunLunJingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("KunLunJingGoodsID");
                if (Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID) <= 0)
                {
                    //昆仑镜不足，且允许自动购买，则需要购买昆仑镜
                    if (allowAutobuy)
                    {
                        needBuyKunLunJing = true;
                    }
                    else
                    {
                        goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);

                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("背包中没有找到【{0}】, 无法开启杨公宝库"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                bool isBaoWuBinding = false;

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量----没有杨公秘典就不扣
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yangGongMiDianGoodsID, 1, false, out usedBinding, out usedTimeLimited))
                {
                    //goodsName = Global.GetGoodsNameByID(yangGongMiDianGoodsID);

                    ///// 通知在线的对方(不限制地图)个人紧要消息
                    //GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                    //    StringUtil.substitute(Global.GetLang("背包中没有找到【{0}】, 无法开启杨公宝库"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    //tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    //return TCPProcessCmdResults.RESULT_DATA;
                }

                //isBaoWuBinding |= usedBinding;

                usedBinding = false;
                usedTimeLimited = false;

                //需要购买昆仑镜
                if (needBuyKunLunJing)
                {
                    int needKunLungJingNum = 1;

                    //自动购买
                    int subMoney = 0;

                    //自动扣除元宝购买昆仑镜
                    subMoney = Global.SubUserMoneyForGoods(client, kunLunJingGoodsID, needKunLungJingNum, "开启杨公宝库");

                    if (subMoney <= 0)
                    {
                        goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);

                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("背包中没有找到【{0}】, 且自动购买失败"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else
                {
                    //从用户物品中扣除消耗的数量
                    if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, 1, false, out usedBinding, out usedTimeLimited))
                    {
                        goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);

                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("背包中没有找到【{0}】, 无法开启杨公宝库"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                isBaoWuBinding |= usedBinding; //修改为了只和杨公秘典挂钩

                //打开杨公宝库的处理
                YangGongBKItem yangGongBKItem = YangGongBKManager.OpenYangGongBK(client, isBaoWuBinding);
                if (null == yangGongBKItem)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("开启杨公宝库失败，宝库中的宝藏不存在")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                client.MyYangGongBKItem = yangGongBKItem;
                goodsDataList = yangGongBKItem.GoodsDataList;

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行刷新杨公宝库的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRefreshYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<GoodsData> goodsDataList = null;
                if (null == client.MyYangGongBKItem)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("杨公宝库还未开启，无法免费刷新宝藏")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (client.MyYangGongBKItem.FreeRefreshNum >= Global.MaxFreeRefreshNum)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("每次打开杨公宝库后，最多免费刷【{0}】次"), Global.MaxFreeRefreshNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (client.MyYangGongBKItem.ClickBKNum > 0)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("杨公宝库选宝后，就无法再刷新"), Global.MaxFreeRefreshNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //打开杨公宝库的处理
                YangGongBKItem yangGongBKItem = YangGongBKManager.OpenYangGongBK(client, client.MyYangGongBKItem.IsBaoWuBinding);
                if (null == yangGongBKItem)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("免费刷新杨公宝库失败，宝库中的宝藏不存在")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                client.MyYangGongBKItem.FallGoodsItemList = yangGongBKItem.FallGoodsItemList;
                client.MyYangGongBKItem.GoodsDataList = yangGongBKItem.GoodsDataList;
                client.MyYangGongBKItem.TempGoodsDataList = yangGongBKItem.TempGoodsDataList;
                client.MyYangGongBKItem.FreeRefreshNum++;

                goodsDataList = yangGongBKItem.GoodsDataList;

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行选取杨公宝库物品的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessClickYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bkIndex = Convert.ToInt32(fields[1]);
                bool allowAutobuy = (1 == Convert.ToInt32(fields[2])) ? true : false;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                YangGongBKItem yangGongBKItem = client.MyYangGongBKItem;
                if (null == yangGongBKItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, -1, bkIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (yangGongBKItem.ClickBKNum >= Global.MaxClickYangGongBKNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, -100, bkIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //从杨公宝库的处理中选宝的操作
                GoodsData goodsData = null;
                int findIndex = YangGongBKManager.ClickYangGongBK(client, yangGongBKItem, out goodsData);
                if (findIndex < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, findIndex, bkIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (yangGongBKItem.IsBaoWuBinding)
                {
                    goodsData.Binding = 1;
                }

                //判断背包是否够用
                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, -500, bkIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //根据点击选宝的次数来计算所需要的昆仑镜
                int needKunLungJingNum = Global.CalcNeedKunLungJingNum(yangGongBKItem.ClickBKNum);
                //是否需要购买昆仑镜
                bool needBuyKunLunJing = false;

                //扣除道具
                if (needKunLungJingNum > 0)
                {
                    int kunLunJingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("KunLunJingGoodsID");
                    if (Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID) < needKunLungJingNum)
                    {
                        //昆仑镜不足，且允许自动购买，则需要购买昆仑镜
                        if (allowAutobuy)
                        {
                            needBuyKunLunJing = true;
                        }
                        else
                        {
                            strcmd = string.Format("{0}:{1}:{2}", roleID, -700, bkIndex);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                    bool usedBinding = false;
                    bool usedTimeLimited = false;

                    if (needBuyKunLunJing)
                    {
                        int needKouChuKunLunJingNum = Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID);
                        if (needKouChuKunLunJingNum < 0)
                        {
                            needKouChuKunLunJingNum = 0;
                        }

                        int needBuyKunLunJingNum = needKunLungJingNum - needKouChuKunLunJingNum;

                        //先扣除背包中剩余的
                        if (needKouChuKunLunJingNum > 0)
                        {
                            //从用户物品中扣除消耗的数量
                            if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, needKouChuKunLunJingNum, false, out usedBinding, out usedTimeLimited))
                            {
                                strcmd = string.Format("{0}:{1}:{2}", roleID, -701, bkIndex);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }

                        //自动购买
                        int subMoney = 0;

                        //自动扣除元宝购买昆仑镜
                        subMoney = Global.SubUserMoneyForGoods(client, kunLunJingGoodsID, needBuyKunLunJingNum, "杨公宝库点击物品");

                        if (subMoney <= 0)
                        {
                            strcmd = string.Format("{0}:{1}:{2}", roleID, subMoney, bkIndex);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    else
                    {
                        //从用户物品中扣除消耗的数量
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, needKunLungJingNum, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}:{2}", roleID, -701, bkIndex);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                    if (usedBinding)
                    {
                        goodsData.Binding = 1;
                    }
                }

                yangGongBKItem.PickUpDict[goodsData.Id] = true;
                yangGongBKItem.ClickBKNum++;

              

                //给积分奖励和经验奖励
                SystemXmlItem item = null;

                if (GameManager.systemLuckyMgr.SystemXmlItemDict.TryGetValue(yangGongBKItem.ClickBKNum, out item))
                {
                    int jifen = item.GetIntValue("Lucky");
                    int exp = item.GetIntValue("Exp");

                    //给角色增加经验
                    if (exp > 0)
                    {
                        GameManager.ClientMgr.ProcessRoleExperience(client, exp, true, false);
                    }

                }

                //杨公宝库成功的提示
                Global.BroadcastYangGongBKGoodsHint(client, goodsData);

                strcmd = string.Format("{0}:{1}:{2}", roleID, goodsData.Id, bkIndex);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行刷新奇珍阁物品的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRefreshQiZhenGeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<QiZhenGeItemData> qiZhenGeGoodsList = null;

                //判断用户点卷额是否不足
                if (client.UserMoney < Global.MaxNeedYuanBaoPerRefresh)
                //if (GameManager.ClientMgr.GetCanUseUserMoneyAndGold(client) < Global.MaxNeedYuanBaoPerRefresh)
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("元宝余额不足，无法刷新奇珍阁")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int oldUserMoney = client.UserMoney;

                //优先扣除金币
                //扣除的金币
                //int hasSubGold = 0;

                //扣除的元宝
                //int hasSubYuanBao = 0;

                //先DBServer请求扣费
                //扣除用户点卷
                //if (!GameManager.ClientMgr.SubUserMoney2(tcpMgr.MySocketListener, tcpClientPool, pool, client, Global.MaxNeedYuanBaoPerRefresh, out hasSubYuanBao, out hasSubGold))
                if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Global.MaxNeedYuanBaoPerRefresh, "奇珍阁刷新"))
                {
                    /// 通知在线的对方(不限制地图)个人紧要消息
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                        StringUtil.substitute(Global.GetLang("元宝余额不足，无法刷新奇珍阁")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);

                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //写入角色奇珍阁刷新耗费元宝的日志
                Global.AddRoleRefreshQiZhenGeEvent(client, oldUserMoney);

                //获取奇珍阁中的物品
                qiZhenGeGoodsList = QiZhenGeManager.GetQiZhenGeGoodsList(client);

                Dictionary<int, QiZhenGeItemData> qiZhenGeGoodsDict = new Dictionary<int, QiZhenGeItemData>();
                for (int i = 0; i < qiZhenGeGoodsList.Count; i++)
                {
                    qiZhenGeGoodsDict[qiZhenGeGoodsList[i].ItemID] = qiZhenGeGoodsList[i];
                }

                client.QiZhenGeGoodsDict = qiZhenGeGoodsDict;
                client.QiZhenGeBuyNum = 0;

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行从奇珍阁购买物品的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQiZhenGeBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int itemID = Convert.ToInt32(fields[1]);
                int goodsNum = Convert.ToInt32(fields[2]);

                bool autoUseGold = (1 == Convert.ToInt32(fields[3]));

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (goodsNum <= 0 || goodsNum >= 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("奇珍阁, 非法的外挂购买, 物品数量不能小于等于0或者大于2, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsNum));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                Dictionary<int, QiZhenGeItemData> qiZhenGeGoodsDict = client.QiZhenGeGoodsDict;
                if (null == qiZhenGeGoodsDict)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsNum <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -5, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                QiZhenGeItemData qiZhenGeItemData = null;
                if (!qiZhenGeGoodsDict.TryGetValue(itemID, out qiZhenGeItemData))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (client.QiZhenGeBuyNum >= Global.MaxNumPerRefreshQiZhenGe)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -20, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int price = qiZhenGeItemData.Price;
                if (price <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -100, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int goodsID = qiZhenGeItemData.GoodsID;
                if (goodsID <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -101, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断用户点卷额是否不足
                if (client.UserMoney < (price * goodsNum))
                //if (GameManager.ClientMgr.GetCanUseUserMoneyAndGold(client) < (price * goodsNum)) 
                {
                    strcmd = string.Format("{0}:{1}:{2}", -200, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);

                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }

                    //判断背包是否够用
                    if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0))
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -300, roleID, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //优先扣除金币
                    //扣除的金币
                    //int hasSubGold = 0;

                    //扣除的元宝
                    //int hasSubYuanBao = 0;

                    //先DBServer请求扣费
                    //扣除用户点卷
                    if (autoUseGold)
                    {
                        //if (!GameManager.ClientMgr.SubUserMoney2(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), out hasSubYuanBao, out hasSubGold))
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "奇珍阁购买自动扣除"))
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -400, roleID, 0);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }
                    }
                    else
                    {
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "奇珍阁购买"))
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -400, roleID, 0);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }
                    }

                    client.TotalUsedMoney += (price * thisTimeNum);

                    //想DBServer请求加入某个新的物品到背包中[有金子被扣除就强制绑定物品]
                    //int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, hasSubGold > 0 ? 1 : 0, 0, "", true, 1, "奇珍阁购买");
                    int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, 0, 0, "", true, 1, "奇珍阁购买");
                    if (dbRet < 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -500, roleID, 0);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //写入角色元宝在奇珍阁购买的行为日志
                    Global.AddRoleQiZhenGeBuyWithYuanBaoEvent(client, goodsID, thisTimeNum, (price * thisTimeNum));

                    //删除，确保物品只能购买一次
                    //qiZhenGeGoodsDict.Remove(itemID);
                    client.QiZhenGeBuyNum++;

                    strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取奇珍阁购买历史记录
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryQiZhenGeBuyHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

     

        /// Sửa trang bị
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprMendEquipmentCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int goodsDbID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
                if (null == goodsData)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, goodsDbID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //只有装备才能被修理
                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是否装备
                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -11, goodsDbID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

              

                //// Sửa trang bị gì đó

                double fMaxStrong =100;

                //不需要修理
                if (fMaxStrong <= 0.0 || goodsData.Strong <= 0.0)
                {
                    //对于不需要修理的物品，减点耐久度，便于测试
                    //GameManager.ClientMgr.SubEquipStrong(client, goodsData, 4000);

                    strcmd = string.Format("{0}:{1}:{2}", -4, goodsDbID, goodsData.Strong);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //修理费用铜钱=（购买铜钱/3）*(损耗耐久值/耐久上限值) 
                int needYinLiang = 100;

                //扣除银两
                if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "修理装备"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -6, goodsDbID, goodsData.Strong);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //减少装备耐久度(0表示耐久度到了最大)
                GameManager.ClientMgr.SubEquipStrong(client, goodsData, goodsData.Strong);

                if (goodsData.Using > 0) //如果是佩戴在身上的
                {
                    Global.RefreshEquipPropAndNotify(client);
                }

                strcmd = string.Format("{0}:{1}:{2}", 0, goodsDbID, (int)(0));
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行快速强化装备的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQuickEquipEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int goodsDbID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
               
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行快速锻造装备的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQuickEquipForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //从物品包中获取要锻造的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Forge_level < Global.MaxForgeLevel)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9997, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Site != 0) //如果物品不在背包中，拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9998, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Using > 0) //如果物品被佩戴在身上, 拒绝操作
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -9999, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsData.Forge_level >= Global.MaxForgeLevel)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -4, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needNum = 1;
                int rockGoodsID = -1;
                int needYinLiang = Global.QuickForgeToNextLevelNeedYinLiang;
                if (10 == goodsData.Forge_level)
                {
                    rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui11GoodsID");
                }
                else if (11 == goodsData.Forge_level)
                {
                    rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui12GoodsID");
                }
                else if (12 == goodsData.Forge_level)
                {
                    rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui13GoodsID");
                }
                else if (13 == goodsData.Forge_level)
                {
                    rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui14GoodsID");
                }
                else if (14 == goodsData.Forge_level)
                {
                    rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui15GoodsID");
                }

                int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
                if (totalNum < needNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); //判断银两是否折半
                if (needYinLiang > client.YinLiang)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除银两
                if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "快速锻造装备"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int newGoodsBinding = goodsData.Binding;
                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needNum, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -100, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (newGoodsBinding <= 0)
                {
                    newGoodsBinding = usedBinding ? 1 : 0;
                }

                //开始锻造
                if (Global.StartQuickForge(client, goodsData)) //锻造成功
                {
                    //
                    goodsData.Forge_level += 1; //锻造级别加1
                    goodsData.Binding = newGoodsBinding;
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 1, roleID, id, goodsData.Forge_level, goodsData.Binding);

                    //锻造成功(6级以上提示)
                    Global.BroadcastForgeOk(client, goodsData);
                }
                else //锻造失败
                {
                    goodsData.Binding = newGoodsBinding;
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, id, goodsData.Forge_level, goodsData.Binding);
                }

                //修改装备的数据库
                //向DBServer请求修改物品
                string[] dbFields = null;
                string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", goodsData.Forge_level, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", goodsData.Binding, "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "快速强化");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "快速强化");

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

     
        private static TCPProcessCmdResults ProcessAddHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                string otherRoleName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null == otherClient)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, otherRoleID, otherRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (otherClient.RoleSex == client.RoleSex)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, otherRoleID, otherRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

               

                int ruYiPeiGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RuYiPeiGoodsID");
                if (Global.GetTotalGoodsCountByID(client, ruYiPeiGoodsID) <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -30, roleID, otherRoleID, otherRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知选为皇妃的命令
                GameManager.ClientMgr.NotifyInviteAddHuangFei(otherClient,
                    client.RoleID,
                    Global.FormatRoleName(client, client.RoleName),
                    HuangChengManager.NewXuanFeiSafeNum(otherClient.RoleID));

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, otherRoleID, otherRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端同意成为皇妃的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAgreeAddHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int huangDiRoleID = Convert.ToInt32(fields[1]);
                string huangDiRoleName = fields[2];
                int randNum = Convert.ToInt32(fields[3]);
                int agreeState = Convert.ToInt32(fields[4]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                KPlayer otherClient = GameManager.ClientMgr.FindClient(huangDiRoleID);
                if (null == otherClient)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, huangDiRoleID, huangDiRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (agreeState <= 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, otherClient,
                        StringUtil.substitute(Global.GetLang("【{0}】拒绝成为您的新皇妃"), Global.FormatRoleName(client, client.RoleName)),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return TCPProcessCmdResults.RESULT_OK;
                }


                int ruYiPeiGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RuYiPeiGoodsID");
                if (Global.GetTotalGoodsCountByID(otherClient, ruYiPeiGoodsID) <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -30, roleID, huangDiRoleID, huangDiRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, ruYiPeiGoodsID, 1, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -40, roleID, huangDiRoleID, huangDiRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string dbcmd = string.Format("{0}:{1}:{2}", huangDiRoleID, client.RoleID, client.RoleName);
                fields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_ADDHUANGFEI, dbcmd, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //通知对方，他成为了皇妃，为他添加特效和buffer
                    //更新角色的皇后状态
                    Global.UpdateRoleHuangHou(client, 1, Global.FormatRoleName(otherClient, otherClient.RoleName));

                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, otherClient,
                        StringUtil.substitute(Global.GetLang("【{0}】已经同意成为您的新皇妃"), Global.FormatRoleName(client, client.RoleName)),
                        GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox);
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", retCode, roleID, huangDiRoleID, huangDiRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行删除皇妃的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRemoveHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                string otherRoleName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //通知对方，废除了他的皇妃，删除他的特效和buffer
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        //更新角色的皇后状态
                        Global.UpdateRoleHuangHou(otherClient, 0, Global.FormatRoleName(client, client.RoleName));
                    }
                    else
                    {
                        //GM命令
                        string gmCmdData = string.Format("-removehuangfei {0} {1}", otherRoleID, Global.FormatRoleName(client, client.RoleName));

                        //转发GM消息到DBServer
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                            string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                            null, client.ServerId);
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, otherRoleID, otherRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行获取皇妃列表的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetHuangFeiDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行对某个角色禁言的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessBanChatCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                string otherRoleName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    int banHours = 1; //禁言一个小时

                    Global.BanRoleChatToDBServer(otherRoleName, banHours);

                    /// 聊天发言限制管理
                    BanChatManager.AddBanRoleName(otherRoleName, banHours);

                    //被皇帝禁言的提示
                    Global.BroadcastBanChatHint(Global.FormatRoleName(client, client.RoleName), otherRoleName);
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, otherRoleID, otherRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行对某个角色关入牢房的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSendToLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                string otherRoleName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                if (null == otherClient)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, otherRoleID, otherRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (otherClient.MapCode != GameManager.MainMapCode)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -10, roleID, otherRoleID, otherRoleName);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    //强迫关入牢房地图
                    Global.ForceSendToLaoFangMap(otherClient, Global.GMax(Global.MinLeaveJailPKPoints + (5 * 60), otherClient.PKPoint)); //关入300秒

                    //被皇帝关入牢房的提示
                    Global.BroadcastSendToLaoFangHint(client, Global.FormatRoleName(otherClient, otherClient.RoleName));
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, otherRoleID, otherRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行对某个角色放出牢房的操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTakeOutLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int otherRoleID = Convert.ToInt32(fields[1]);
                string otherRoleName = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
                if (null == fields || fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求释放玩家出牢房时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                int retCode = Global.SafeConvertToInt32(fields[0]);
                if (retCode >= 0)
                {
                    KPlayer otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
                    if (null != otherClient)
                    {
                        //从牢房中放出
                        Global.ForceTakeOutLaoFangMap(otherClient, otherClient.PKPoint);

                        //被皇帝从牢房放出的提示
                        Global.BroadcastTakeOutLaoFangHint(Global.FormatRoleName(client, client.RoleName), Global.FormatRoleName(otherClient, otherClient.RoleName));
                    }
                    else
                    {
                        //GM命令
                        string gmCmdData = string.Format("-leavelaofang {0} {1}", otherRoleID, Global.FormatRoleName(client, client.RoleName));

                        //转发GM消息到DBServer
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                            string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                            null, client.ServerId);
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", fields[0], roleID, otherRoleID, otherRoleName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行获取领地地图信息的数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetLingDiMapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取地图战斗状态数据
                LingDiMapInfoData lingDiMapInfoData = JunQiManager.GetLingDiMapData(client);

                //领地信息数据通知
                GameManager.ClientMgr.NotifyLingDiMapInfoData(client, lingDiMapInfoData);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行获取皇城信息的数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetHuangChengMapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取地图战斗状态数据
                HuangChengMapInfoData huangChengMapInfoData = HuangChengManager.FormatHuangChengMapInfoData();

                //领地信息数据通知
                GameManager.ClientMgr.NotifyHuangChengMapInfoData(client, huangChengMapInfoData);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行任务传送
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTaskTransportCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int toMapCode = Convert.ToInt32(fields[1]);
                int posX = Convert.ToInt32(fields[2]);
                int posY = Convert.ToInt32(fields[3]);
                int useChuanSongJuan = Convert.ToInt32(fields[4]);

                if (MapTypes.Normal != Global.GetMapType(toMapCode))
                {
                    //非常规地图,不允许传送.不做响应，客户端处理错误提示
                    return TCPProcessCmdResults.RESULT_OK;
                }
                SceneUIClasses sceneType = Global.GetMapSceneType(toMapCode);
                if (Data.CanTeleportMapHashSet.Contains((int)sceneType))
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    // 是跨服登录
                    bool _canTransInKuaFu = false;
                    do
                    {
                        // 当前位于跨服主线地图中才可以使用飞鞋
                        if (!KuaFuMapManager.getInstance().IsKuaFuMap(client.MapCode))
                            break;

                        // 目标地图： 普通地图 ---> 回原服
                        // 目标地图： 非普通地图 ---> 那么必须是当前地图，即只允许跨服主线中本地图飞鞋
                        // 否则：不能使用
                        if (toMapCode != client.MapCode
                            && Global.GetMapSceneType(toMapCode) != SceneUIClasses.Normal)
                        {
                            break;
                        }

                        _canTransInKuaFu = true;
                    } while (false);

                    // 如果目标地图也是跨服主线地图，那么目标地图必须是当前地图，即跨服主线地图中只允许本地图飞
                    if (!_canTransInKuaFu)
                        return TCPProcessCmdResults.RESULT_OK;
                }

                if (client.m_CurrentLife <= 0)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //处理VIP月卡
                /*if (DBRoleBufferManager.ProcessMonthVIP(client) <= 0.0) //无VIP月卡
                {
                    if (useChuanSongJuan <= 0)
                    {
                        /// 获取今日的免费传送次数
                        if (Global.GetFreeChuanSongNum(client) <= 0)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("今日的免费传送次数已经为0，无法执行传送，成为VIP无限免费传送")),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.ToVip);

                            //不做相应，客户端处理错误提示
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        /// 增加今日的免费传送次数
                        Global.AddFreeChuanSongNum(client);

                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("今日剩余免费传送{0}次，成为VIP无限免费传送"), Global.GetFreeChuanSongNum(client)),
                            GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox);
                    }
                    else
                    {
                        bool canTransport = false;

                        //先确认是否有传送卷
                        GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
                        if (null != goodsData)
                        {
                            //从用户物品中扣除消耗的数量
                            if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                            {
                                canTransport = true; //能够被传送
                            }
                        }
                        else
                        {
                            goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
                            if (null != goodsData)
                            {
                                //从用户物品中扣除消耗的数量
                                if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                                {
                                    canTransport = true; //能够被传送
                                }
                            }
                        }

                        if (!canTransport)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("背包中没有传送【{0}】，无法执行任务传送"), Global.GetGoodsNameByID(Global.MapTransGoodsID)),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }*/

                // VIP处理 [2/20/2014 LiaoWei]
                bool bCanTransport = false;
                int nVipLev = 0;
                nVipLev = client.VipLevel;

                if (nVipLev > 0 && nVipLev >= (int)VIPEumValue.VIPENUMVALUE_TRANSPORT)
                {
                    bCanTransport = true;
                }

                if (!bCanTransport)
                {
                    if (useChuanSongJuan <= 0)
                    {
                        /// 获取今日的免费传送次数
                        if (Global.GetFreeChuanSongNum(client) <= 0)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("今日的免费传送次数已经为0，无法执行传送，成为VIP无限免费传送")),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.ToVip);

                            //不做相应，客户端处理错误提示
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        /// 增加今日的免费传送次数
                        Global.AddFreeChuanSongNum(client);

                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                            StringUtil.substitute(Global.GetLang("今日剩余免费传送{0}次，成为VIP无限免费传送"), Global.GetFreeChuanSongNum(client)),
                            GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox);
                    }
                    else
                    {
                        bool canTransport = false;

                        //先确认是否有传送卷
                        GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
                        if (null != goodsData)
                        {
                            //从用户物品中扣除消耗的数量
                            if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                            {
                                canTransport = true; //能够被传送
                            }
                        }
                        else
                        {
                            goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
                            if (null != goodsData)
                            {
                                //从用户物品中扣除消耗的数量
                                if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                                {
                                    canTransport = true; //能够被传送
                                }
                            }
                        }

                        if (!canTransport)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client,
                                StringUtil.substitute(Global.GetLang("背包中没有传送【{0}】，无法执行任务传送"), Global.GetGoodsNameByID(Global.MapTransGoodsID)),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }

                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    //从配置根据地图取默认位置
                    int toMapX = posX;
                    int toMapY = posY;

                    Point pos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, toMapX, toMapY, 60); //人的位置X/Y坐标
                    toMapX = (int)pos.X;
                    toMapY = (int)pos.Y;

                    //如果已经在要传送的地图中, 包含了跨服主线同一张地图中传送的情况
                    if (toMapCode == client.MapCode)
                    {
                        if (!Global.InObs(ObjectTypes.OT_CLIENT, client.MapCode, (int)toMapX, (int)toMapY))
                        {
                            GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, (int)toMapX, (int)toMapY, client.RoleDirection, (int)TCPGameServerCmds.CMD_SPR_CHANGEPOS);
                        }
                    }
                    else
                    {
                        // 跨服主线地图去非跨服主线地图
                        if (KuaFuMapManager.getInstance().IsKuaFuMap(client.MapCode)
                            && !KuaFuMapManager.getInstance().IsKuaFuMap(toMapCode))
                        {
                            //目前,跨服主线状态切换地图,强制切换回原服务器
                            Point grid = Global.PixelToGrid(toMapCode, pos);
                            Global.ModifyMapRecordData(client, (ushort)toMapCode, (ushort)grid.X, (ushort)grid.Y, (int)MapRecordIndexes.InitGameMapPostion);
                            KuaFuManager.getInstance().GotoLastMap(client);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                        else if (!Global.InObs(ObjectTypes.OT_CLIENT, toMapCode, (int)toMapX, (int)toMapY))
                        {
                            int toDirection = Global.GetRandomNumber(0, 8);
                            GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection);
                            //调试用
                            //SysConOut.WriteLine(string.Format("mapcode:{0}, x:{1}, y:{2}, dir:{3}", toMapCode, toMapX, toMapY, toDirection));
                        }
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行任务传送2
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessTaskTransport2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                //处理任务寻路
                Global.ProcessAutoTaskFindRoad(client, taskID);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行活动引导传送
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessActivityTransportCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskType = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SystemXmlItem xmlItem = null;
                if (!GameManager.systemActivityTipMgr.SystemXmlItemDict.TryGetValue(taskType, out xmlItem) || null == xmlItem)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据活动类型定位传送目标配置信息出错, CMD={0}, Client={1}, RoleID={2}, taskType={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskType));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //读取配置文件，获取地图编号，x 和 y参数
                int toMapCode = xmlItem.GetIntValue("ToMapID");
                int posX = xmlItem.GetIntValue("ToX");
                int posY = xmlItem.GetIntValue("ToY");

                //判断是否在图标显示时间内，也即活动时间内
                string showTimes = xmlItem.GetStringValue("ShowTimes");
                string weekDaysStr = xmlItem.GetStringValue("WeekDays");

                string[] weekDays = weekDaysStr.Split(',');
                string[] times = showTimes.Split('|');

                bool bInTimes = false;

                string weekDayOfNow = string.Format("{0}", (int)TimeUtil.NowDateTime().DayOfWeek);

                if (String.IsNullOrEmpty(weekDaysStr.Trim()) || weekDays.ToList().IndexOf(weekDayOfNow) >= 0)
                {
                    string nowTime = TimeUtil.NowDateTime().ToString("HH:mm:ss");
                    foreach (var item in times)
                    {
                        string[] arr = item.Split('-');
                        if (arr.Length != 2)
                        {
                            continue;
                        }

                        if (nowTime.CompareTo(arr[0]) > 0 && nowTime.CompareTo(arr[1]) < 0)
                        {
                            bInTimes = true;
                            break;
                        }
                    }
                }

                string strcmd = "";
                if (!bInTimes)
                {
                    //不在活动时间范围内
                    strcmd = string.Format("-1:{0}:{1}", roleID, taskType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    return TCPProcessCmdResults.RESULT_DATA;

                }

                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    //从配置根据地图取默认位置
                    int toMapX = posX;
                    int toMapY = posY;

                    Point pos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, toMapX, toMapY, 60); //人的位置X/Y坐标
                    toMapX = (int)pos.X;
                    toMapY = (int)pos.Y;

                    if (toMapCode == client.MapCode) //如果已经在要传送的地图中
                    {
                        if (!Global.InObs(ObjectTypes.OT_CLIENT, client.MapCode, (int)toMapX, (int)toMapY))
                        {
                            GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, (int)toMapX, (int)toMapY, client.RoleDirection, (int)TCPGameServerCmds.CMD_SPR_CHANGEPOS);
                        }
                    }
                    else
                    {
                        int toDirection = Global.GetRandomNumber(0, 8);
                        GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

      
        
        private static TCPProcessCmdResults ProcessGetGoodsByDbIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端消耗元宝快速完成某个任务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQuickCompleteTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                TaskData taskData = Global.GetTaskData(client, taskID);
                if (null == taskData)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";

                SystemXmlItem systemTask = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                //{
                //    strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -1);
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                string taskName = systemTask.GetStringValue("Title");
                int needYuanBao = systemTask.GetIntValue("YuanBaoComplete");
                if (needYuanBao <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -10);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int targetNum1 = systemTask.GetIntValue("TargetNum1");
                int targetNum2 = systemTask.GetIntValue("TargetNum2");
                if (taskData.DoingTaskVal1 >= targetNum1 &&
                    taskData.DoingTaskVal2 >= targetNum2)
                {
                    return TCPProcessCmdResults.RESULT_OK; //防止重复扣除元宝
                }

                //判断用户点卷额是否不足
                if (client.UserMoney < needYuanBao)
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -20);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //先DBServer请求扣费
                //扣除用户点卷
                if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "快速完成任务1"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -20);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //直接修改任务的数值
                ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, taskName, 1, targetNum1);

                //直接修改任务的数值
                ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, taskName, 2, targetNum2);

                //直接清空任务道具
                ProcessTask.ClearTaskGoods(tcpMgr.MySocketListener, pool, client, taskID);

                strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, 0);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取充值的真实钱数信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryChongZhiMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                int totalChongZhiMoney = GameManager.ClientMgr.QueryTotaoChongZhiMoney(client);

                strcmd = string.Format("{0}", totalChongZhiMoney);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取首次充值的大礼包 目前未用到
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetFirstChongZhiDaLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

             

                Activity instActivity = Global.GetActivity(ActivityTypes.InputFirst);
                if (null == instActivity)
                {
                    strcmd = string.Format("{0}", -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (!Global.CanGetFirstChongZhiDaLiByUserID(client))
                {
                    strcmd = string.Format("{0}", -1111);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 判断背包是否够用
                if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, client.m_cPlayerFaction.GetFactionId()))
                {
                    strcmd = string.Format("{0}", -20);                                 // 背包不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int totalChongZhiMoney = GameManager.ClientMgr.QueryTotaoChongZhiMoney(client);
                if (totalChongZhiMoney <= 0)
                {
                    strcmd = string.Format("{0}", -5);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /*int[] shouChongDaLiIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("ShouChongDaLiID");
                if (null == shouChongDaLiIDs || shouChongDaLiIDs.Length < 3)
                {
                    strcmd = string.Format("{0}", -9);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                int nOcc = Global.CalcOriginalOccupationID(client);

                /*int shouChongDaLiID = shouChongDaLiIDs[nOcc];
                if (shouChongDaLiID <= 0)
                {
                    strcmd = string.Format("{0}", -10);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断背包是否够用
                if (!Global.CanAddGoods(client, shouChongDaLiID, 1, 1))
                {
                    strcmd = string.Format("{0}", -20);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(shouChongDaLiID, out systemGoods))
                {
                    strcmd = string.Format("{0}", -40);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                instActivity.GiveAward(client);

                //添加物品
                //Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, shouChongDaLiID, 1, 0, "", 0, 1, 0, "", true, 1, "首冲大礼包");

                //判断完成充值任务ID
                Global.JugeCompleteChongZhiSecondTask(client, 1);

                //首冲大礼领取提示
                Global.BroadcastShouChongDaLiHint(client);

                strcmd = string.Format("{0}", 0);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵从服务器端获取一些活动的奖励  modify by LiaoWei 2013.7.16
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetDayChongZhiDaLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //每日充值豪礼 充值领取神装 神装激情回赠 [7/16/2013 LiaoWei]

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nRoleID = Convert.ToInt32(fields[0]);
                int nActivityType = Global.SafeConvertToInt32(fields[1]);
                int nBtnIndex = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != nRoleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), nRoleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                Activity instActivity = Global.GetActivity((ActivityTypes)nActivityType);
                if (null == instActivity)
                {
                    strcmd = string.Format("{0}:{1}::", -1, nActivityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int result = 0;
                int nRetValue = 0; //  冲击领取神装和神装激情回馈点击后剩余的名额 

                // 分豪礼类别 27 28 29
                ActivityTypes tmpActType = (ActivityTypes)nActivityType;
                switch (tmpActType)
                {
                    case ActivityTypes.MeiRiChongZhiHaoLi:
                        {
                            // 判断背包是否够用
                            if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, nBtnIndex))
                            {
                                strcmd = string.Format("{0}:{1}::", -20, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            // 判断是否已经领取
                            if (!Global.CanGetDayChongZhiDaLi(client, nBtnIndex))
                            {
                                strcmd = string.Format("{0}:{1}::", -1111, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            AwardItem tmp = instActivity.GetAward(client, nBtnIndex);
                            if (tmp == null)
                            {
                                strcmd = string.Format("{0}:{1}::", -1, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            int totalChongZhiMoneyToday = GameManager.ClientMgr.QueryTotaoChongZhiMoneyToday(client);
                            totalChongZhiMoneyToday = Global.TransMoneyToYuanBao(totalChongZhiMoneyToday);
                            if (totalChongZhiMoneyToday < tmp.MinAwardCondionValue)
                            {
                                strcmd = string.Format("{0}:{1}::", -5, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            //添加物品
                            instActivity.GiveAward(client, nBtnIndex);

                            //完成每日充值大礼的领取
                            Global.CompleteDayChongZhiDaLi(client, nBtnIndex);

                            //每日充值大礼领取提示
                            Global.BroadcastDayChongDaLiHint(client);

                            result = 0;
                            for (int i = (int)GiftBtnIndex.BTN1; i <= (int)GiftBtnIndex.BTN3; i++)
                            {
                                if (!Global.CanGetDayChongZhiDaLi(client, (int)i))
                                {
                                    result |= Global.GetBitValue((int)i);
                                }
                            }

                            break;
                        }
                    case ActivityTypes.ChongJiLingQuShenZhuang:
                        {
                            // 判断背包是否够用
                            if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, nBtnIndex))
                            {
                                strcmd = string.Format("{0}:{1}::", -20, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            // 检测当前等级是否可以领取豪礼

                            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                            int nOcc = Global.CalcOriginalOccupationID(client);

                            // MU 修改逻辑
                            //int nRoleLev = client.m_Level;
                            int nChangeLifeLev = client.ChangeLifeCount;
                            AwardItem tmpItem = instActivity.GetAward(client, nOcc, 1);
                            if (tmpItem == null)
                            {
                                strcmd = string.Format("{0}:{1}::", -1, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            if (nChangeLifeLev < tmpItem.MinAwardCondionValue)
                            {
                                strcmd = string.Format("{0}:{1}::", -100, nActivityType);           //您当前的等级尚未达到领取等级要求
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            // 检测当前的角色是否已经领取了该项豪礼                            
                            if (!Global.CanGetChongJiLingQuShenZhuang(client, nBtnIndex))
                            {
                                strcmd = string.Format("{0}:{1}::", -1111, nActivityType);          //您已领取过该等级段奖励,无法再次进行领取
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            // 检测当前是否还有领取的名额
                            int nQuota = Global.GetChongJiLingQuShenZhuangQuota(client, nBtnIndex);
                            if (nQuota >= tmpItem.MinAwardCondionValue2)
                            {
                                strcmd = string.Format("{0}:{1}::", -101, nActivityType);   // 该等级段的奖励名额已满，无法进行领取
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            //添加物品
                            instActivity.GiveAward(client, nBtnIndex, nOcc);

                            //完成冲级神装领取
                            Global.CompleteChongJiLingQuShenZhuang(client, nBtnIndex, nQuota + 1);

                            //冲级领取神装大礼领取提示
                            AwardItem tmpItem1 = instActivity.GetAward(client, nBtnIndex, 2);
                            Global.BroadcastChongJiLingQuShengZhuangHint(client, nBtnIndex, tmpItem1.GoodsDataList[nOcc].GoodsID);

                            //给每个按钮设置标志位 告诉客户端是否已经点击了
                            result = 0;
                            for (int i = (int)GiftBtnIndex.BTN1; i <= (int)GiftBtnIndex.BTN5; i++)
                            {
                                if (!Global.CanGetChongJiLingQuShenZhuang(client, (int)i))
                                {
                                    result |= Global.GetBitValue((int)i);
                                }
                            }

                            nRetValue = nQuota + 1;
                            break;
                        }
                    case ActivityTypes.ShenZhuangJiQingHuiKui:
                        {
                            // 判断背包是否够用
                            if (!instActivity.HasEnoughBagSpaceForAwardGoods(client))
                            {
                                strcmd = string.Format("{0}:{1}::", -20, nActivityType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }

                            // 判断是否有资格领取
                            int nRet = 0;
                            nRet = Global.GetShenZhuangHuiKuiStatus(client);
                            if (nRet == 0)
                            {
                                strcmd = string.Format("{0}:{1}::", -102, nActivityType);// 您尚未从NPC·神兵神甲处购买任意一件装备,无法领取奖励
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                            else if (nRet == 2)
                            {
                                strcmd = string.Format("{0}:{1}::", -103, nActivityType);// 对不起 您已经领取过神装回馈大礼
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                            else if (nRet == 1)
                            {
                                AwardItem tmpItem = instActivity.GetAward(client);
                                if (tmpItem == null)
                                {
                                    strcmd = string.Format("{0}:{1}::", -20, nActivityType);
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }

                                // 判断当前剩余名额
                                int nQuota = GameManager.GameConfigMgr.GetGameConfigItemInt(GameConfigNames.ShenZhuangHuiKuiGift, 0);
                                if (nQuota >= tmpItem.MinAwardCondionValue)
                                {
                                    strcmd = string.Format("{0}:{1}::", -104, nActivityType);   //神器回馈奖励名额已满，无法进行领取
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }

                                //添加物品
                                instActivity.GiveAward(client, 0);

                                //完成冲级神装领取
                                Global.CompleteShenZhuangHuiKui(client, nQuota + 1);

                                //神装激情回馈领取提示
                                Global.BroadcastShengZhuangJiQingHuiKuiHint(client);

                                //给每个按钮设置标志位 告诉客户端是否已经点击了
                                result = 0;
                                if (Global.GetShenZhuangHuiKuiStatus(client) == 2)
                                    result |= Global.GetBitValue(1);

                                nRetValue = nQuota + 1;
                            }

                            break;
                        }
                    default:
                        break;
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}", result, nActivityType, nRetValue, nBtnIndex);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #region 系统角色终身仅有一次的奖励 微端下载，成为各种vip
        /// 精灵从服务器端获取完成微端下载的大礼包
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessCompleteTinyClientCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";


                int[] tinyClientDaLiIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("TinyClientDaLiID");
                if (null == tinyClientDaLiIDs || tinyClientDaLiIDs.Length < 3)
                {
                    strcmd = string.Format("{0}", -9);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                int nOcc = Global.CalcOriginalOccupationID(client);

                int tinyClientDaLiID = tinyClientDaLiIDs[nOcc];
                if (tinyClientDaLiID <= 0)
                {
                    strcmd = string.Format("{0}", -10);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断背包是否够用
                if (!Global.CanAddGoods(client, tinyClientDaLiID, 1, 1))
                {
                    strcmd = string.Format("{0}", -20);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

              

                //添加物品
                Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, tinyClientDaLiID, 1, 0, "", 0, 1, 0, "", true, 1, "微端大礼包");

            

               
                //微端大礼领取提示
                Global.BroadcastTinyClientDaLiHint(client);

            
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 角色领取成为各级vip的相关礼包
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFetchVipOnceAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //判断是否可以领取
                if (!Global.CanFetchOnceVipAward(client))
                {
                    strcmd = string.Format("{0}", -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needBagSpaceNum = Global.GetGoodsCountForVipPriority(Global.GetVipOnceAwardPriorityID(client));

                //判断背包空间是否足够【假如有物品奖励】
                if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
                {
                    strcmd = string.Format("{0}", -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //给予奖励
                if (!Global.GiveVipOnceAwardForPriority(client))
                {
                    strcmd = string.Format("{0}", -3);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //更新标志位
                Global.UpdateOnceVipAwardFlag(client);

              

                //领取提示
                Global.BroadcastVipOnceAwardHint(client);

             
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 完成微端下载

        #region 处理邮件
        /// 处理用户发送邮件
        /// <summary>
        /// 处理用户发送邮件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessSpriteSendUserMailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 11)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                //这儿同时判断了发件人的确是发送数据的角色
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //fields的个数必须是10
                //int senderrid, string senderrname, int receiverrid, string reveiverrname, string subject, string content, int yinliang, int tongqian, int yuanbao;
                //邮件主体部分
                int senderrid = Convert.ToInt32(fields[0]);
                string senderrname = fields[1];
                int receiverrid = Convert.ToInt32(fields[2]);
                string reveiverrname = fields[3];
                string subject = fields[4];
                string content = fields[5];
                int yinliang = Convert.ToInt32(fields[6]);
                int tongqian = Convert.ToInt32(fields[7]);
                int yuanbao = Convert.ToInt32(fields[8]);

                //修正发送值--不允许发元宝 和 铜钱
                yuanbao = 0;
                tongqian = 0;

                //银两不允许小于0
                if (yinliang < 0)
                {
                    yinliang = 0;
                }

                //邮件物品列表
                string goodslist = fields[9];
                //竖线隔开的各个goods的dbid
                string[] goodsDbIDArr = { };
                if (!String.IsNullOrWhiteSpace(goodslist))
                {
                    goodsDbIDArr = goodslist.Split('|');
                }

                //验证码
                string mailSendSecurityCode = fields[10];

                bool hasAttachment = goodsDbIDArr.Length > 0 ? true : false;

                //需要扣除的银两，铜钱，元宝 [银两包括附件银两和发送邮件需要的费用]
                int needYinLiang = yinliang + Global.GetChargeYinLiangForSendMail(hasAttachment);
                int needTongQian = tongqian;
                int needYuanBao = yuanbao;

                //邮件所需物品列表
                List<GoodsData> needGoodsList = new List<GoodsData>();

                string strcmd = "";

                //判断玩家等级是否大于等于最小发送等级
                if (client.m_Level < GameManager.systemParamsList.GetParamValueIntByName("MinLevelForMailSend"))
                {
                    strcmd = string.Format("{0}:{1}", -90, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判读验证码是否对
                if (String.IsNullOrEmpty(client.MailSendSecurityCode) || 0 != mailSendSecurityCode.CompareTo(client.MailSendSecurityCode))
                {
                    strcmd = string.Format("{0}:{1}", -100, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判读验发送主题和发送内容是否为空
                if (String.IsNullOrEmpty(subject) || String.IsNullOrEmpty(content))
                {
                    strcmd = string.Format("{0}:{1}", -107, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int maxSubjectLen = Global.GetValueBetweenMinAndMax((int)GameManager.systemParamsList.GetParamValueIntByName("MaxSubjectLen"), 10, 49);
                int maxContentLen = Global.GetValueBetweenMinAndMax((int)GameManager.systemParamsList.GetParamValueIntByName("MaxContentLen"), 150, 10000);

                //判读验发送主题和发送内容长度是否合法
                if (subject.Length > maxSubjectLen || content.Length > maxContentLen)
                {
                    strcmd = string.Format("{0}:{1}", -101, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断收件人是否存在,同时获取到收件人角色ID
                //先DBServer请求查询角色
                string[] dbRoleFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_FINDROLEID_BYROLENAME, reveiverrname, client.ServerId);
                if (null == dbRoleFields || dbRoleFields.Length != 2 || int.Parse(dbRoleFields[0]) < 0)
                {
                    strcmd = string.Format("{0}:{1}", -109, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //更新接收者roleID
                receiverrid = int.Parse(dbRoleFields[0]);
                //不允许给自己发邮件
                if (receiverrid == senderrid)
                {
                    strcmd = string.Format("{0}:{1}", -108, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判读铜钱是否足够
                if (needTongQian > 0)
                {
                    if (client.Money1 < needTongQian)
                    {
                        strcmd = string.Format("{0}:{1}", -110, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //判断银两是否足够
                if (needYinLiang > 0)
                {
                    if (client.YinLiang < needYinLiang)
                    {
                        strcmd = string.Format("{0}:{1}", -120, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //判断元宝是否足够
                if (needYuanBao > 0)
                {
                    if (client.UserMoney < needYuanBao)
                    {
                        strcmd = string.Format("{0}:{1}", -130, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //判断物品是否存在
                if (goodsDbIDArr.Length > 0)
                {
                    foreach (var goodsdbid in goodsDbIDArr)
                    {
                        if (String.IsNullOrEmpty(goodsdbid))
                        {
                            continue;
                        }

                        int dbid = int.Parse(goodsdbid);
                        GoodsData goodsData = Global.GetGoodsByDbID(client, dbid);
                        if (null != goodsData)
                        {
                            if (0 == goodsData.Binding)
                            {
                                // fix bug [8/27/2013 LiaoWei]
                                if (goodsData.Using > 0)
                                {
                                    //有正在使用的物品 不能发送
                                    strcmd = string.Format("{0}:{1}", -200, roleID);
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }

                                //物品数量为0，不让发送
                                if (goodsData.GCount <= 0)
                                {
                                    //数量小于等于0的物品，不让发送
                                    strcmd = string.Format("{0}:{1}", -134, roleID);
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }

                                needGoodsList.Add(goodsData);
                            }
                            else
                            {
                                //绑定物品不让发送
                                strcmd = string.Format("{0}:{1}", -135, roleID);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }
                        else
                        {
                            strcmd = string.Format("{0}:{1}", -140, roleID);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                }

                //判断发送物品个数是否超过10个【不让发送超过8个物品】
                if (needGoodsList.Count > 10)
                {
                    strcmd = string.Format("{0}:{1}", -149, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除铜钱
                if (needTongQian > 0)
                {
                    if (!GameManager.ClientMgr.SubMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, needTongQian, "发送邮件"))
                    {
                        strcmd = string.Format("{0}:{1}", -150, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //扣除银两
                if (needYinLiang > 0)
                {
                    if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "发送邮件"))
                    {
                        strcmd = string.Format("{0}:{1}", -160, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //扣除元宝
                if (needYuanBao > 0)
                {
                    //自动扣除元宝
                    //先DBServer请求扣费
                    //扣除用户点卷
                    if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "邮件发送元宝"))
                    {
                        strcmd = string.Format("{0}:{1}", -170, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //每一个mail goods item 都是 goodsid_forge_level_quality_Props_gcount_origholenum_rmbholenum_jewellist_addpropindex_binding 多个用竖线隔开
                string mailGoodsString = "";
                //扣除物品
                foreach (var item in needGoodsList)
                {
                    //origholenum 和 rmbholenum 都设置为 0 考虑到item.GCount是引用,定义临时变量useCount,【扣除物品的时候，如果有某个命令切分了GCount,比如数量分割，物品使用，可能导致数量8，切分出去7，剩下1，扣除1，发送8的物品复制？】
                    //物品分割的时候，分割后的两个dbid都是新的没问题，如果有一个物品还用
                    //int useCount = item.GCount;

                    //mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}",
                    //    item.GoodsID, item.Forge_level, item.Quality, item.Props, useCount, 0, 0, item.Jewellist, item.AddPropIndex, item.Binding, item.BornIndex, item.Lucky, item.Strong, item.ExcellenceInfo, item.AppendPropLev, item.ChangeLifeLevForEquip); // 卓越信息 [12/14/2013 LiaoWei]

                    ////对于数据个数只有一个的，这个GCount的值是0，这儿强行设置1，对于有多个的，直接扣除
                    //if (useCount <= 0)
                    //{
                    //    useCount = 1;
                    //}

                    ////扣除dbid 对应的整个物品
                    //if (!GameManager.ClientMgr.NotifyUseGoodsByDbId(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, item.Id, useCount, false))
                    //{
                    //    strcmd = string.Format("{0}:{1}", -180, roleID);
                    //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    //    return TCPProcessCmdResults.RESULT_DATA;
                    //}

                    //if (mailGoodsString.Length > 0)
                    //{
                    //    mailGoodsString += "|";
                    //}
                }

                //int senderrid = Convert.ToInt32(fields[0]);
                //string senderrname = fields[1];
                //int receiverrid = Convert.ToInt32(fields[2]);
                //string reveiverrname = fields[3];
                //string subject = fields[4];
                //string content = fields[5];
                //int yinliang = Convert.ToInt32(fields[6]);
                //int tongqian = Convert.ToInt32(fields[7]);
                //int yuanbao = Convert.ToInt32(fields[8]);

                //组装gamedbserver需要的生成邮件命令[发送者名字，接收者名字，主题，内容直接采用接收包中:被$符号替换过的数据]
                string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}",
                    senderrid, fields[1], receiverrid, fields[3], fields[4], fields[5], yinliang, tongqian, yuanbao, mailGoodsString);

                //先DBServer请求添加邮件
                string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_SENDUSERMAIL, strDbCmd, client.ServerId);
                if (null == dbFields || dbFields.Length != 3)
                {
                    strcmd = string.Format("{0}:{1}", -190, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                KPlayer receiverClient = GameManager.ClientMgr.FindClient(receiverrid);
                if (null != receiverClient)
                {
                    receiverClient._IconStateMgr.CheckEmailCount(client);
                }

                int mailID = Convert.ToInt32(dbFields[1]);
                int mailGoodsCountToDB = Convert.ToInt32(dbFields[2]);

                //if (mailID >= 0 && needGoodsList.Count > 0 && mailGoodsCountToDB != needGoodsList.Count)
                //{
                //    //邮件发送成功，但是附件未成功添加, mailGoodsCountToDB 理论上大于等于0
                //    //strcmd = string.Format("{0}:{1}:{2}", mailID, roleID, -mailGoodsCountToDB);
                //}
                //else
                //{
                //    //1.邮件发送成功，附件成功添加  2.邮件发送失败，mailID小于0，理论上mailGoodsCountToDB会是0
                //    //strcmd = string.Format("{0}:{1}:{2}", mailID, roleID, mailGoodsCountToDB);
                //}
                //发送成功，清空验证码，一个验证码能发一次邮件
                if (mailID >= 0)
                {
                    client.MailSendSecurityCode = "";
                }

                //如果mailID为 -2000，表示接受角色不存在[客户端进行提示处理]
                strcmd = string.Format("{0}:{1}", mailID, roleID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 处理请求邮件列表
        /// <summary>
        /// 处理请求邮件列表
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessGetUserMailListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //只有用户存在了，才能进一步向gamedbserver转发请求
                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;ExcellencePropertyRandom.xml
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 处理请求单个邮件数据
        /// <summary>
        /// 处理请求单个邮件数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessGetUserMailDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //只有用户存在了，才能进一步向gamedbserver转发请求
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
                client._IconStateMgr.CheckEmailCount(client);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 用户提取邮件附件
        /// <summary>
        /// 用户提取邮件附件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessFetchMailGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mailID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //如果不是不允许提取附件，则返回
                if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("canfetchmailattachment", "1"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -99, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                byte[] bytes = null;
                int dataStartPos = 0;
                int dataLen = 0;
                //向gamedbserver 请求 邮件实体，生成物品，提取铜钱，银两，以及邮件
                Global.RequestToDBServer4(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_GETUSERMAILDATA, cmdData, out bytes, out dataStartPos, out dataLen, client.ServerId);

                if (null == bytes || bytes.Length <= 0 || bytes.Length < dataStartPos + dataLen || dataStartPos < 0 || dataLen < 1)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -100, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //获取邮件数据
                MailData mailData = DataHelper.BytesToObject<MailData>(bytes, dataStartPos, dataLen);
                if (null == mailData)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -110, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //返回邮件具体数据的时候gamedbserver在sql语句中已经通过 roleid 和 mailid 一起查询，原则上这儿不可能成立
                //用户发送提取别人邮件的信息返回的只会是null， ProcessGetUserMailDataCmd 也一样
                if (mailData.ReceiverRID != roleID)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -115, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //邮件没有附件,没有银两，没有元宝，没有铜钱
                if ((mailData.GoodsList != null && mailData.GoodsList.Count <= 0) && mailData.Yinliang <= 0 && mailData.Tongqian <= 0 && mailData.YuanBao <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -120, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //邮件附件已经被提取
                if (mailData.Hasfetchattachment != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -121, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判读背包是否有足够的空位置
                if ((mailData.GoodsList != null && mailData.GoodsList.Count > 0) && !Global.CanAddGoodsNum(client, mailData.GoodsList.Count))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -125, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //先通知gamedb设置已经提取标志位
                string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_FETCHMAILGOODS, cmdData, client.ServerId);
                if (null == dbFields || dbFields.Length != 3)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -130, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //数据库设置已提取标志出错
                if (int.Parse(dbFields[2]) != 1)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -140, roleID, mailID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //开始提取铜钱
                if (mailData.Tongqian > 0)
                {
                    //给用户加钱,更新用户的铜钱
                    GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Tongqian, "提取邮件", false);
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取金币, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.Money1, mailData.Tongqian), EventLevels.Record);
                }

                //开始提取银两
                if (mailData.Yinliang > 0)
                {
                    //给用户加钱,更新用户的银两
                    GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Yinliang, "提取邮件"
                        );
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取银两, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.YinLiang, mailData.Yinliang), EventLevels.Record);
                }

                //开始提取元宝【这儿是否应该设置一个上限,没人每天最多提取多少，单次最多提取多少】
                if (mailData.YuanBao > 0)
                {
                    //给用户加钱,更新用户的元宝
                    GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.YuanBao, "提取邮件");
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取元宝, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.UserMoney, mailData.YuanBao), EventLevels.Record);
                }

                //记录money 提取日志
                Global.AddRoleFetchMailMoneyEvent(client, mailData.YuanBao, mailData.Yinliang, mailData.Tongqian);

                int nFetchGoodsCount = 0;
                if (null != mailData.GoodsList && mailData.GoodsList.Count > 0)
                {
                    //开始提取物品[这儿是否应该对GCount<=0进行过滤？]
                    foreach (var item in mailData.GoodsList)
                    {
                        GoodsData goodsData = new GoodsData()
                        {
                            Id = -1,
                            GoodsID = item.GoodsID,
                            Using = 0,
                            Forge_level = item.Forge_level,
                            Starttime = "1900-01-01 12:00:00",
                            Endtime = Global.ConstGoodsEndTime,
                            Site = 0,
                           
                            Props = item.Props,
                            GCount = item.GCount,
                            Binding = item.Binding,
                         
                            BagIndex = 0,
                           
                            Strong = item.Strong,
                         
                        };

                      

                      
                        if (goodsData.Id >= 0)
                        {
                            nFetchGoodsCount++;
                        }
                    }

                    if (nFetchGoodsCount != mailData.GoodsList.Count)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -150, roleID, mailID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //邮件附件提取成功
                strcmd = string.Format("1:{0}:{1}", roleID, mailID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 用户提取邮件附件
        /// <summary>
        /// 用户所有提取邮件附件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessBatchFetchMailGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                List<int> mailIDList = Global.StringToIntList(fields[1], ',');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //如果不是不允许提取附件，则返回
                if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("canfetchmailattachment", "1"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -99, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (null == mailIDList || mailIDList.Count == 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -110, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nCmdID = (int)TCPGameServerCmds.CMD_SPR_BATCHFETCHMAILGOODS;
                string preString = string.Format("{0}:", roleID);
                foreach (int mailID in mailIDList)
                {
                    byte[] bytes = null;
                    int dataStartPos = 0;
                    int dataLen = 0;
                    string mailIDStr = preString + mailID;
                    //向gamedbserver 请求 邮件实体，生成物品，提取铜钱，银两，以及邮件
                    Global.RequestToDBServer4(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_GETUSERMAILDATA, mailIDStr, out bytes, out dataStartPos, out dataLen, client.ServerId);

                    if (null == bytes || bytes.Length <= 0 || bytes.Length < dataStartPos + dataLen || dataStartPos < 0 || dataLen < 1)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -100, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //获取邮件数据
                    MailData mailData = DataHelper.BytesToObject<MailData>(bytes, dataStartPos, dataLen);
                    if (null == mailData)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -110, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //返回邮件具体数据的时候gamedbserver在sql语句中已经通过 roleid 和 mailid 一起查询，原则上这儿不可能成立
                    //用户发送提取别人邮件的信息返回的只会是null， ProcessGetUserMailDataCmd 也一样
                    if (mailData.ReceiverRID != roleID)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -115, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //邮件没有附件,没有银两，没有元宝，没有铜钱
                    if ((mailData.GoodsList != null && mailData.GoodsList.Count <= 0) && mailData.Yinliang <= 0 && mailData.Tongqian <= 0 && mailData.YuanBao <= 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -120, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //邮件附件已经被提取
                    if (mailData.Hasfetchattachment != 0)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -121, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //判读背包是否有足够的空位置
                    if ((mailData.GoodsList != null && mailData.GoodsList.Count > 0) && !Global.CanAddGoodsNum(client, mailData.GoodsList.Count))
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -125, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        break;
                    }

                    //先通知gamedb设置已经提取标志位
                    string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_FETCHMAILGOODS, mailIDStr, client.ServerId);
                    if (null == dbFields || dbFields.Length != 3)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -130, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //数据库设置已提取标志出错
                    if (int.Parse(dbFields[2]) != 1)
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -140, roleID, mailID);
                        client.sendCmd(nCmdID, strcmd);
                        continue;
                    }

                    //开始提取铜钱
                    if (mailData.Tongqian > 0)
                    {
                        //给用户加钱,更新用户的铜钱
                        GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Tongqian, "提取邮件", false);
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取金币, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.Money1, mailData.Tongqian), EventLevels.Record);
                    }

                    //开始提取银两
                    if (mailData.Yinliang > 0)
                    {
                        //给用户加钱,更新用户的银两
                        GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Yinliang, "提取邮件"
                            );
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取银两, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.YinLiang, mailData.Yinliang), EventLevels.Record);
                    }

                    //开始提取元宝【这儿是否应该设置一个上限,没人每天最多提取多少，单次最多提取多少】
                    if (mailData.YuanBao > 0)
                    {
                        //给用户加钱,更新用户的元宝
                        GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.YuanBao, "提取邮件");
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取元宝, roleID={0}({1}), Money={2}, newMoney={3}", client.RoleID, client.RoleName, client.UserMoney, mailData.YuanBao), EventLevels.Record);
                    }

                    //记录money 提取日志
                    Global.AddRoleFetchMailMoneyEvent(client, mailData.YuanBao, mailData.Yinliang, mailData.Tongqian);

                    int nFetchGoodsCount = 0;
                    if (null != mailData.GoodsList && mailData.GoodsList.Count > 0)
                    {
                        //开始提取物品[这儿是否应该对GCount<=0进行过滤？]
                        foreach (var item in mailData.GoodsList)
                        {
                           
                        }

                        if (nFetchGoodsCount != mailData.GoodsList.Count)
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -150, roleID, mailID);
                            client.sendCmd(nCmdID, strcmd);
                            continue;
                        }
                    }

                    //邮件附件提取成功
                    strcmd = string.Format("1:{0}:{1}", roleID, mailID);
                    client.sendCmd(nCmdID, strcmd);
                }

                client._IconStateMgr.CheckEmailCount(client);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        private static int getGoodsAppendMax(GoodsData goodsData)
        {
            int nMaxLevel = 0;
            int nExcellenceNum = Global.GetEquipExcellencePropNum(goodsData);

            if (nExcellenceNum == 0)
                nMaxLevel = 20;
            else if (nExcellenceNum >= 1 && nExcellenceNum <= 2)
                nMaxLevel = 40;
            else if (nExcellenceNum >= 3 && nExcellenceNum <= 4)
                nMaxLevel = 60;
            else if (nExcellenceNum >= 5 && nExcellenceNum <= 6)
                nMaxLevel = 80;
            else // 以后还会有新的条件的...
                nMaxLevel = 80;

            return nMaxLevel;
        }
        /// 邮件验证码
        /// <summary>
        /// 邮件验证码
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessSpriteGetMailSendCodeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //10万到99万之间的随机数字符串,便于将来扩展为随机字符
                client.MailSendSecurityCode = string.Format("{0}", Global.GetRandomNumber(100000, 1000000));
                //邮件验证码
                strcmd = string.Format("{0}:{1}", roleID, client.MailSendSecurityCode);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 删除邮件
        /// <summary>
        /// 删除邮件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pool"></param>
        /// <param name="cmd"></param>
        /// <param name="idXiangZi"></param>
        /// <param name="idYaoShi"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessDeleteUserMailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析角色ID
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //只有用户存在了，才能进一步向gamedbserver转发请求
                TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
                client._IconStateMgr.CheckEmailCount(client);
                return result;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 处理邮件

        #region 活动奖励
        /// <summary>
        /// 充值返利
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryInputFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputFanLi, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 充值送礼
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryInputJiaSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {

                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////最小元宝值
                //int gateYuanBao = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputJiaSong, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 充值王
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryInputKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////排名最低元宝要求列表，依次为第一名的最小元宝，第二名的最小元宝......
                //string[] minYuanBaoArr = fields[3].Split('_');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 冲级王
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryLevelKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////排名最低等级要求列表，依次为第一名的最小等级，第二名的最小等级......
                //string[] minYuanBaoArr = fields[3].Split('_');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.LevelKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 装备王
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryEquipKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////排名最低经脉要求列表，依次为第一名的最小经脉，第二名的最小经脉......
                //string[] minYuanBaoArr = fields[3].Split('_');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.EquipKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 坐骑王
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryHorseKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////排名最低坐骑实力要求列表，依次为第一名的最小坐骑实力，第二名的最小坐骑实力......
                //string[] minYuanBaoArr = fields[3].Split('_');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HorseKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 经脉王
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryJingMaiKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                ////排名最低经脉要求列表，依次为第一名的最小经脉，第二名的最小经脉......
                //string[] minYuanBaoArr = fields[3].Split('_');

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JingMaiKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 查询活动奖励领取记录
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryAwardHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int activityType = Global.SafeConvertToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Activity instActivity = Global.GetActivity((ActivityTypes)activityType);
                if (null == instActivity)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据activityType定位活动对象失败, CMD={0}, Client={1}, RoleID={2}, activityType={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, activityType));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString((ActivityTypes)activityType, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 活动奖励领取
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprFetchActivityAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int activityType = Global.SafeConvertToInt32(fields[1]);
                int extTag = Global.SafeConvertToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                if ((int)ActivityTypes.JieriGive == activityType
                     || (int)ActivityTypes.JieriGiveKing == activityType
                      || (int)ActivityTypes.JieriRecvKing == activityType)
                {
                    // 单独开消息，不要再混在一起了
                    Debug.Assert(false);
                }

                Activity instActivity = Global.GetActivity((ActivityTypes)activityType);

                if (null == instActivity)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //是否在领取奖励期限内
                if (!instActivity.CanGiveAward())
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //[bing] 检查条件 不满足会返回
                if (!instActivity.CheckCondition(client, extTag))
                {
                    if ((int)ActivityTypes.JieriInputPointsExchg == activityType)
                    {
                        // 积分不够、兑换次数不够
                        strcmd = string.Format("{0}:{1}:{2}", -10888, roleID, activityType);
                    }
                    else
                    {
                        //todo..  暂时返回 -2
                        strcmd = string.Format("{0}:{1}:{2}", -10007, roleID, activityType);
                    }
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断背包是否够用,
                if ((int)ActivityTypes.JieriDengLuHaoLi == activityType
                    || (int)ActivityTypes.JieriCZSong == activityType
                    || (int)ActivityTypes.JieriLeiJiCZ == activityType
                    || (int)ActivityTypes.JieriInputPointsExchg == activityType
                    || (int)ActivityTypes.JieriTotalConsume == activityType)
                {
                    // 节日累计登陆的奖励要根据领取奖励来判断背包是否够用
                    if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, extTag))
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activityType);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }
                else
                {
                    if (!instActivity.HasEnoughBagSpaceForAwardGoods(client))
                    {
                        strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activityType);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                ///如果是兑换字卡的操作，则截获
                if ((int)ActivityTypes.JieriZiKa == activityType)
                {
                    strcmd = HuodongCachingMgr.MergeZiKa(client, extTag);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string[] dbFields = null;
                Int32 nDBExecuteID = Global.GetDBServerExecuteActivityAwardCmdID((ActivityTypes)activityType);
                string dbCmds = Global.GetActivityRequestCmdString((ActivityTypes)activityType, client, extTag);

                if (nDBExecuteID <= 0 || string.IsNullOrEmpty(dbCmds))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -4, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //通知gamedbserver  领取奖励，gamedbserver 判断如果可以领取，设置数据库领取标志,同时计算奖励额度条件，比如排名，充值额度
                Global.RequestToDBServer(tcpClientPool, pool, nDBExecuteID, dbCmds, out dbFields, client.ServerId);

                if (null == dbFields || dbFields.Length != 3)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -5, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int result = Global.SafeConvertToInt32(dbFields[0]);
                //gamedbserver 设置相关领取标志出错，不能领取
                if (result <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", result, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //开始发放奖励，奖励分 为元宝奖励 和 物品奖励,根据不同的活动给予不同的奖励
                if (!instActivity.GiveAward(client, Global.SafeConvertToInt32(dbFields[2])))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -7, roleID, activityType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if ((ActivityTypes)activityType == ActivityTypes.InputJiaSong)
                {
                    //充值加送公告
                    Global.BroadcastJiaSongOk(client);
                }

                if (client._IconStateMgr.CheckJieRiActivity(client, false))
                    client._IconStateMgr.SendIconStateToClient(client);

                // 节日积分兑换活动特殊处理
                if ((ActivityTypes)activityType == ActivityTypes.JieriInputPointsExchg)
                {
                    JieriIPointsExchgActivity act = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                    if (null != act)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", result, roleID,
                            activityType, act.GetIPointsLeftMergeNum(client, extTag), extTag);
                    }
                }
                else
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", result, roleID, activityType, extTag);
                }
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }
        #endregion

        /// <summary>
        /// 精灵获取从商城用阵旗购买物品事件 == 》幻境阵旗购买 换成 绑定金币购买
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMallZhenQiBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int malID = Convert.ToInt32(fields[1]);
                int goodsNum = Convert.ToInt32(fields[2]);

                if (goodsNum <= 0 || goodsNum >= 10000)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsNum));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                SystemXmlItem systemMallItem = null;

                //判断请求购买的交易是否合法
                if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
                {
                    strcmd = string.Format("{0}::", -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int price = systemMallItem.GetIntValue("ZhenQi");
                if (price <= 0)
                {
                    strcmd = string.Format("{0}::", -100);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int goodsID = systemMallItem.GetIntValue("GoodsID");
                if (goodsID <= 0)
                {
                    strcmd = string.Format("{0}::", -101);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //是否有时间段限制????
                string pubStartTime = systemMallItem.GetStringValue("PubStartTime");
                string pubEndTime = systemMallItem.GetStringValue("PubEndTime");
                if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
                {
                    long startTime = Global.SafeConvertToTicks(pubStartTime);
                    long endTime = Global.SafeConvertToTicks(pubEndTime);
                    long nowTicks = TimeUtil.NOW();
                    if (nowTicks < startTime || nowTicks > endTime)
                    {
                        strcmd = string.Format("{0}::", -105);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
                if (null == mallGoodsCacheItem)
                {
                    strcmd = string.Format("{0}::", -1101);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断用户阵旗是否不足==>判断金币是否足够
                if (client.Gold < (price * goodsNum))
                {
                    strcmd = string.Format("{0}::", -30001);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int toBinding = 1; //绑定元宝购买的强制绑定

                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);

                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }

                    //判断背包是否够用
                    if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0))
                    {
                        strcmd = string.Format("{0}::", -3);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //bool usedBinding = false;
                    //bool usedTimeLimited = false;

                    //扣除金币
                    if (!GameManager.ClientMgr.SubUserGold(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城购买_绑定元宝"))
                    {
                        strcmd = string.Format("{0}::", -444);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //想DBServer请求加入某个新的物品到背包中
                    int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, toBinding, 0, "", true, 1, "商城购买_绑定元宝", Global.ConstGoodsEndTime, 0, 0, mallGoodsCacheItem.Lucky, 0, mallGoodsCacheItem.ExcellenceInfo, mallGoodsCacheItem.AppendPropLev);
                    if (dbRet < 0)
                    {
                        strcmd = string.Format("{0}::", -5);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //写入角色绑定元宝购买的行为日志
                    Global.AddRoleBuyWithGlodEvent(client, goodsID, thisTimeNum, (price * thisTimeNum));

                    strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 使用vip每次特权【对于100，101，102 这三个特权id需要特殊处理，那是角色一生只能领取一次的标志,领取方式采用别的指令
        /// 其实也可以重用当前指令拦截领取，不过不清晰，这儿只进行拦截过滤】
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUseVipDailyPriorityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int priority = Convert.ToInt32(fields[1]);

                string strcmd = "";

                int dayID = TimeUtil.NowDateTime().DayOfYear;

            
                int needBagSpaceNum = Global.GetGoodsCountForVipPriority(priority);

                //判断背包空间是否足够【假如有物品奖励】
                if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -125, roleID, priority);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

            

                //给玩家每日vip奖励
                if (!Global.GiveVipDailyAwardForPriority(client, priority))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -145, roleID, priority);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                strcmd = string.Format("1:{0}:{1}", roleID, priority);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 查询vip每日数据
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryVipDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

            

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 查询杨公宝库每日积分和奖励数据
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryYangGongBKDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 领取每日杨公宝库积分对应的物品奖励
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteFetchYangGongBKJiFenAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int awardNo = Convert.ToInt32(fields[1]);

                string strcmd = "";

                int dayID = TimeUtil.NowDateTime().DayOfYear;

           
                int ret = -1;

                if (ret < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", ret, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needBagSpaceNum = Global.GetYangGongBkAwardGoodsNum(awardNo);

                //判断背包空间是否足够
                if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -125, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

           

                //给玩家每日vip奖励
                if (!Global.GiveYangGongBKAwardForDailyJiFen(client, awardNo))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -145, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                strcmd = string.Format("1:{0}:{1}", roleID, awardNo);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 查询试练塔奖励数据
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryShiLianTaAwardDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<ShiLianTaAwardsInfoData>(Global.GetShiLianTaFuBenAwardsInfoData(client), Global._TCPManager.TcpOutPacketPool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                // {
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                // });
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 领取试炼塔奖励
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteFetchShiLianTaAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Boolean leave = Convert.ToInt32(fields[1]) == 1 ? true : false; //领取完奖励后是否离开
                Boolean allowAutoBuy = Convert.ToInt32(fields[2]) == 1 ? true : false;//是否允许自动购买

                string strcmd = "";

                //给予奖励
                if (!Global.ProcessFuBenMapGetAward(client))
                {
                    //判断如果本层地图的怪物还没有被杀光，这儿直接返回，这会导致只要怪物没被杀光，就没法离开试练塔
                    //如果怪没被杀光，也能离开试练塔，玩家错误操作会离开地图
                    if (Global.GetLeftMonsterByCopyMapID(client.CopyMapID) > 0)
                    {
                        strcmd = string.Format("{0}:{1}", -6, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    //如果领取完不离开地图,直接返回错误
                    //if (!leave)
                    //{
                    //    strcmd = string.Format("{0}:{1}", -88, roleID);
                    //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    //    return TCPProcessCmdResults.RESULT_DATA;
                    // }
                }

                //离开地图
                if (leave)
                {
                    //回城【地图编号2的主城】
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, 2, -1, -1, -1);
                    strcmd = string.Format("{0}:{1}", 9, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果要进行下一层，先扣除物品，再进入
                //扣除进入下一层需要的物品
                int ret = Global.DeductShiLianTaNextFloorGateGoods(client, allowAutoBuy);

                if (ret <= 0)
                {
                    strcmd = string.Format("{0}:{1}", ret, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //进入下一层
                Global.ProcessGoToNextFuBenMap(client);

                strcmd = string.Format("{0}:{1}", 1, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #region 生肖运程竞猜相关

        /// 精灵从服务器端获取生肖运程竞猜历史记录
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryShengXiaoGuessHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                int param = Convert.ToInt32(fields[1]);
                //参数2可能是roleid，也可能是-1

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //只能查询所有玩家的或者自己的竞猜信息
                if (param >= 0 && param != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的竞猜历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// 精灵添加生肖运程竞猜注码
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAddShengXiaoMortgageCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                //注码信息
                string[] mortgageArr = fields[1].Split('|');

                //是否自动购买
                bool allowAutoBuy = (1 == Convert.ToInt32(fields[2])) ? true : false;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //如果不是不允许提取附件，则返回
                if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("hasshengxiaoguess", "1"))
                {
                    strcmd = string.Format("{0}:{1}", -30, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int ret = 0;

                //计算总的需要的注码，统一扣除, 同时进行简单的合法性验证，理论上客户端传输过来的数据一般都是合法的
                int totalMortgage = 0;
                for (int n = 0; n < mortgageArr.Length; n++)
                {
                    string[] mortgage = mortgageArr[n].Split('_');

                    if (2 != mortgage.Length)
                    {
                        //直接返回错误
                        strcmd = string.Format("{0}:{1}", -60, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    //竞猜关键字和注码非法
                    ret = GameManager.ShengXiaoGuessMgr.IsMortgageLegal(int.Parse(mortgage[0]), int.Parse(mortgage[1]));

                    if (ret < 0)
                    {
                        //直接返回错误
                        strcmd = string.Format("{0}:{1}", ret, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    totalMortgage += int.Parse(mortgage[1]);
                }

                //统一扣除消耗物品
                if (totalMortgage > 0)
                {
                    ret = GameManager.ShengXiaoGuessMgr.SubNeedGoods(client, totalMortgage, allowAutoBuy);
                    if (ret < 0)
                    {
                        //直接返回错误
                        strcmd = string.Format("{0}:{1}", ret, roleID);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                //针对每一个竞猜注码进行添加
                for (int n = 0; n < mortgageArr.Length; n++)
                {
                    string[] mortgage = mortgageArr[n].Split('_');

                    //理论上是不会出错的
                    ret = GameManager.ShengXiaoGuessMgr.AddGuess(client, int.Parse(mortgage[0]), int.Parse(mortgage[1]));

                    if (ret < 0)
                    {
                        //不在竞猜时间内下注，的确会出错，不过这时注码都扣除了，咋办？
                        LogManager.WriteLog(LogTypes.Error, string.Format("添加竞猜注码时出错, CMD={0}, Client={1}, RoleID={2}, ret={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, ret));
                    }
                }

                //返回给客户端一个已经下注的辞典对象
                //将对象转为TCP协议流
                //tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.ShengXiaoGuessDict, pool, nID);
                strcmd = string.Format("{0}:{1}", 1, roleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵查询自己的生肖运程竞猜注码列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQuerySelfShengXiaoGuessListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //返回给客户端一个已经下注的辞典对象
                //将对象转为TCP协议流
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(GameManager.ShengXiaoGuessMgr.GetRoleGuessDictionay(roleID), pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵查询生肖运程竞猜结果列表,主要用于最近的竞猜结果
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryShengXiaoGuessRecentResultListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                strcmd = string.Format("{0}", GameManager.ShengXiaoGuessMgr.GetGuessResultHistory());

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion 生肖运程竞猜相关

        #region 腾讯防沉迷

        /// 更新腾讯平台防沉迷参数
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUpdateTengXunFcmRateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                double rate = 1.0;

                try
                {
                    rate = Convert.ToDouble(fields[1]);
                }
                catch
                {
                }

                //非法数据就给定为成人，有经验
                if (rate > 1.0 || rate < 0)
                {
                    rate = 1.0;
                }

                //这个设置要生效，GameServer必须配置 pingtainame = TengXun  且 anti-addiction = 1;
                client.TengXunFCMRate = rate;

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion

        #region 移动仓库 和 任务背包 扩展

        /// 元宝扩展移动仓库
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExtGridByYuanBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3 && fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 包裹格子开启改造 [3/13/2014 LiaoWei]

                int roleID = Convert.ToInt32(fields[0]);
                int addGridNum = Convert.ToInt32(fields[1]);   // 开启数量
                int nType = Convert.ToInt32(fields[2]);   // 1 自动开启 2 用户开启

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nUseZuanShi = -1;
                if (client.CodeRevision >= 2)
                {
                    nUseZuanShi = Convert.ToInt32(fields[3]);   // 花费钻石数(验证用,如果不一致,则不允许开启)
                }

                int bagCapacity = Global.GetPortableBagCapacity(client);
                if (nType == 2 && bagCapacity >= Global.MaxPortableGridNum)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 你的最大格子数已满"), Global.MaxPortableGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                // 钻石消耗公式 Min[(开启的格子数-60),20] * 50-在线时间*2
                int nCurrent = client.MyPortableBagData.ExtGridNum;
                int nOpenGridIndex = nCurrent - Global.DefaultBagGridNum + 1;

                if (nType == 1 && addGridNum == 1 && nCurrent < Global.MaxPortableGridNum)
                {
                    // 取得开启格子需要的时间
                    int nNeedTime = nOpenGridIndex * (int)OPENBAGGRID.OPENBAGGRID_ONEGRIDNEEDTIME2;

                    if (client.OpenPortableGridTime < nNeedTime)
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("客户端自动推送开启背包消息 但服务器认为时间没到 客-服时间有误差, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    client.OpenPortableGridTime = 0;

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.OpenPortableGridTick, client.OpenPortableGridTime, true);

                    ++client.MyPortableBagData.ExtGridNum;

                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEPBINFO, string.Format("{0}:{1}", client.RoleID, client.MyPortableBagData.ExtGridNum), null, client.ServerId);

                    GameManager.ClientMgr.NotifyPortableBagData(client);
                }
                else if (nType == 2)
                {
                    Global.ExtGridPortableBagWithYuanBao(pool, client, addGridNum, nUseZuanShi);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 请求扣除 元宝或铜钱操作,用于打开随身仓库等需要扣钱，然后再客户端完成的功能
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteRequestSubMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int subType = Convert.ToInt32(fields[1]);
                int _params = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int result = -1;

                //扩展单个格子需要的金币数量 * 扩展数量
                int needYuanBao = 20;

                //扣除元宝打开移动仓库
                if (1 == subType)
                {
                    needYuanBao = 20;
                }
                else
                {
                    //-100表示扣除类型错误,可能是外挂发送的数据
                    result = -100;
                }

                //扣除元宝
                if (needYuanBao > 0)
                {
                    //自动扣除元宝
                    //先DBServer请求扣费
                    //扣除用户点卷
                    if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "打开移动仓库"))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("剩余钻石不足")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                        result = -101;
                    }
                    else
                    {
                        result = 1;
                    }
                }

                //将操作结果告诉客户端
                String strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, subType, _params, result);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 元宝扩展随身背包
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExtBagNumByYuanBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3 && fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 包裹格子开启改造 [3/12/2014 LiaoWei]

                int roleID = Convert.ToInt32(fields[0]);
                int addGridNum = Convert.ToInt32(fields[1]);   // 开启的数量
                int nType = Convert.ToInt32(fields[2]);   // 1 自动开启 2 用户开启

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nUseZuanShi = -1;
                if (client.CodeRevision >= 2)
                {
                    nUseZuanShi = Convert.ToInt32(fields[3]);   // 花费钻石数(验证用,如果不一致,则不允许开启)
                }

                int bagCapacity = Global.GetSelfBagCapacity(client);
                if (nType == 2 && bagCapacity >= Global.MaxBagGridNum)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 你的最大格子数已满"), Global.MaxBagGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                // 钻石消耗公式 Min[(开启的格子数-50),10] * 100 - 在线时间(分钟)*2
                int result = 0;
                int nCurrent = client.BagNum;
                int nOpenGridIndex = nCurrent - Global.DefaultBagGridNum + 1;

                if (nType == 1 && addGridNum == 1 && nCurrent < Global.MaxBagGridNum)
                {
                    // 取得开启格子需要的时间
                    int nNeedTime = nOpenGridIndex * (int)OPENBAGGRID.OPENBAGGRID_ONEGRIDNEEDTIME1;

                    if (client.OpenGridTime < nNeedTime)
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("客户端自动推送开启背包消息 但服务器认为时间没到 客-服时间有误差, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    ++client.BagNum;

                    // 时间重置
                    client.OpenGridTime = 0;

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.OpenGridTick, client.OpenGridTime, true);

                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEBAGNUM, string.Format("{0}:{1}", client.RoleID, client.BagNum), null, client.ServerId);
                }
                else if (nType == 2)
                {
                    result = Global.ExtRoleBagNumWithYuanBao(pool, client, addGridNum, nUseZuanShi);
                }

                //不管上面执行结果如何，都通知客户端
                string strCmd = String.Format("{0}:{1}:{2}", client.RoleID, client.BagNum, result);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(Global._TCPManager.TcpOutPacketPool, strCmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion 移动仓库 和 任务背包 扩展

        #region lua 脚本相关

        /// 精灵通知服务器端执行与npc 的 lua脚本对话函数
        /// 这个函数执行的具体脚本由服务器端由配置文件读取并执行
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExcuteNpcLuaTalkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mapCode = Convert.ToInt32(fields[1]);
                int npcID = Convert.ToInt32(fields[2]);
                int extensionID = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Global.ExecNpcTalkText(client, mapCode, npcID, extensionID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵通知服务器端执行lua脚本函数
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExcuteNpcLuaFunctionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int mapCode = Convert.ToInt32(fields[1]);
                int npcID = Convert.ToInt32(fields[2]);
                int extensionID = Convert.ToInt32(fields[3]);
                int tag = Convert.ToInt32(fields[4]);
                String luaFunction = fields[5];//lua 脚本函数

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                LuaCallResultData luaCallResultData = new LuaCallResultData()
                {
                    RoleID = roleID,
                    MapCode = mapCode,
                    NPCID = npcID,
                    ExtensionID = extensionID,
                    IsSuccess = -1,//执行结果先设置成失败
                    Tag = tag,
                };

                //对于地图传输npc，使用物品，互换出同样的npc窗口，这时npc根本不在身边，
                //对于使用物品互换出窗口这类操作，客户端始终很好使用外挂模拟指令，只要依赖客户端，就不怎么好办
                /*
                //如果玩家离npc比较远，则不执行
                NPC myNpc = NPCGeneralManager.FindNPC(client.MapCode, extensionID);

                if (null == myNpc)
                {
                    luaCallResultData.Result = Global.GetLang(String.Format("地图{0}找不到 npc{1}", client.MapCode, extensionID));
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;//估计是外挂,简单返回
                }

                //8个格子的差距差不多够远了
                if (Math.Abs(myNpc.CurrentGrid.X - client.CurrentGrid.X) > 8 ||
                    Math.Abs(myNpc.CurrentGrid.Y - client.CurrentGrid.Y) > 8)
                {
                    luaCallResultData.Result = Global.GetLang(String.Format("地图{0}中你离开npc{1}太远", client.MapCode, extensionID));
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;//距离太远,简单返回
                }
                */

                //这个协议被扩展，NPCID 小于0， 则ExtensionID 就是文件ID
                //生成脚本文件路径
                String scriptFile = "";
                if (npcID > 0)
                {
                    scriptFile = Global.GetNpcLuaScriptFile(extensionID);
                }
                else
                {
                    scriptFile = Global.GetRunLuaScriptFile(extensionID);
                }

                Object[] myParams = new Object[2];
                myParams[0] = client;
                /**/
                myParams[1] = " 配置 ";

                //执行对话脚本
                Global.ExcuteLuaFunction(client, scriptFile, luaFunction, myParams, luaCallResultData);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion lua 脚本相关

        #region 成就相关

        /// 精灵查询成就数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryChengJiuDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //long ticks = TimeUtil.NOW();
                ChengJiuManager.NotifyClientChengJiuData(client);
                //System.Diagnostics.Debug.WriteLine(string.Format("NotifyClientChengJiuData消耗时间:{0}", (TimeUtil.NOW()) - ticks));

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// 精灵领取成就奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFetchChengJiuAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int chengJiuID = Convert.ToInt32(fields[1]);

                String strcmd = "";

                int ret = ChengJiuManager.GiveChengJiuAward(client, chengJiuID, "领取成就奖励:" + chengJiuID);

                //内部会进行一系列的合法性判断
                if (0 == ret)
                {
                    //如果执行成功，通知客户端，客户端会重新刷新界面数据
                    ChengJiuManager.NotifyClientChengJiuData(client);
                }

                strcmd = string.Format("{0}:{1}:{2}", ret, roleID, chengJiuID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 成就相关

        #region 精元兑换 徽章兑换

        /// 精元兑换
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprJingYuanExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

          
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "", nID);
        
           

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精元兑换 
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprHuiZhangExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) 
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }


            // RETURN TOANG
            string strcmd = "-1";

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
         
        }

        #endregion

        #region 采用真气激活的 经脉系统

        /// 激活下一级经脉
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprActivateNextLevelJingMaiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                 * 读取配置文件 Config/JingMai.xml 并进行相关处理
                 */
                string strcmd = "";

                int curJingMaiLevel = GameManager.ClientMgr.GetJingMaiLevelValue(client);
                int nextJingMaiLevel = curJingMaiLevel + 1;

                //判断能否升级，采用是否存在下一等级buffer物品进行判断
                int[] jingMaiBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("JingMaiBufferGoodsIDs");

                //下一等级buffer不存在
                if (nextJingMaiLevel > jingMaiBufferGoods.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem jingMailXmlItem = null;
                if (!GameManager.SystemJingMaiLevel.SystemXmlItemDict.TryGetValue(nextJingMaiLevel, out jingMailXmlItem) || null == jingMailXmlItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needRoleLevel = jingMailXmlItem.GetIntValue("LevelLimit");
                int needZhenQi = jingMailXmlItem.GetIntValue("ZhenQi");
                int needBindMoney = jingMailXmlItem.GetIntValue("BindMoney");
                int needGoodsID = -1;
                int needGoodsNum = 0;

                int[] needGoods = jingMailXmlItem.GetIntArrayValue("NeedGoods");
                if (null != needGoods && 2 == needGoods.Length)
                {
                    needGoodsID = needGoods[0];
                    needGoodsNum = needGoods[1];
                }

                //角色等级判断
                if (needRoleLevel > client.m_Level)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //真气值判断
                int curRoleZhenQi = GameManager.ClientMgr.GetZhenQiValue(client);
                if (curRoleZhenQi < needZhenQi)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //绑定铜钱判断
                if (client.Money1 < needBindMoney)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -5, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断物品数量 ===>没有配置就不用判断
                if (needGoodsID > 0 && needGoodsNum > 0 && Global.GetTotalGoodsCountByID(client, needGoodsID) < needGoodsNum)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -6, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量====>需要扣才扣，不需要扣就不扣，根据配置文件来
                if (needGoodsID > 0 && needGoodsNum > 0 && !GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGoodsID, needGoodsNum, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -7, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除绑定铜钱
                if (!GameManager.ClientMgr.SubMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, needBindMoney, "激活经脉"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -8, roleID, curJingMaiLevel, nextJingMaiLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除真气值===>同时通知客户端，第四个参数true
                GameManager.ClientMgr.ModifyZhenQiValue(client, -needZhenQi, true, true);

                //设置经脉等级加1,经脉等级不是经常变化，立即更新到数据库
                //GameManager.ClientMgr.ModifyJingMaiLevelValue(client, 1, true, true);

                //升级成功
                strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, curJingMaiLevel, nextJingMaiLevel);

                //传奇经脉播报
                Global.BroadcastClientChuanQiJingMai(client, nextJingMaiLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion

        #region 采用悟性激活的 武学系统
        /// 激活下一级经脉
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprActivateNextLevelWuXueCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                 * 读取配置文件 Config/WuXue.xml 并进行相关处理
                 */
                string strcmd = "";

                int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
                int nextWuXueLevel = curWuXueLevel + 1;

                //判断能否升级，采用是否存在下一等级buffer物品进行判断
                int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs");

                //下一等级buffer不存在
                if (nextWuXueLevel > wuXueBufferGoods.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem wuXueXmlItem = null;
                if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(nextWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit");
                int needWuXing = wuXueXmlItem.GetIntValue("WuXing");
                int needYinLiang = wuXueXmlItem.GetIntValue("NeedMoney");

                Boolean autoActivate = 0 == wuXueXmlItem.GetIntValue("Select");//Select 为0表示自动激活项
                double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");//每日消耗百分比

                //角色等级判断
                if (needRoleLevel > client.m_Level)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //悟性值判断
                int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
                if (curRoleWuXing < needWuXing)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //银两判断
                if (client.YinLiang < needYinLiang)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -5, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除银两
                if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "激活经脉"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -8, roleID, curWuXueLevel, nextWuXueLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除悟性值===>同时通知客户端，第四个参数true
                GameManager.ClientMgr.ModifyWuXingValue(client, -needWuXing, true, true);

                //设置武学等级加1,武学等级不是经常变化，立即更新到数据库
                //GameManager.ClientMgr.ModifyWuXueLevelValue(client, 1, true, true);

                //升级成功
                strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, curWuXueLevel, nextWuXueLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion

        /*
        /// <summary>
        /// 废弃的物品采集
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprCaiJiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int caiJiRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Monster monster = GameManager.MonsterMgr.FindMonster(client.MapCode, caiJiRoleID);
                if (null != monster && monster.MonsterType == (int)MonsterTypes.CaiJi)
                {
                    //首先判断背包是否已经满了，如果是则提示用户采集失败
                    if (monster.MonsterInfo.FallGoodsPackID <= 0)
                    {
                        if (!Global.CanAddGoodsNum(client, 1))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, StringUtil.substitute(Global.GetLang("背包已满，无法将进行采集")),
                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }
                    }

                    //杀死怪物并处理任务
                    Global.SystemKillMonster(client, monster);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        */

        /// <summary>
        /// 请求开始进行物品采集
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprCaiJiStartCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int caiJiRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                int GatherTime = 0;
                int result;
                string strcmd;
                SceneUIClasses sceneType = Global.GetMapSceneType(client.MapCode);
                if (sceneType == SceneUIClasses.HuanYingSiYuan)
                {
                    result = CaiJiLogic.ReqStartCaiJi(client, caiJiRoleID, out GatherTime);
                    strcmd = string.Format("{0}:{1}:{2}:{3}", result, roleID, caiJiRoleID, GatherTime);
                }
                else
                {
                    result = CaiJiLogic.ReqStartCaiJi(client, caiJiRoleID, out GatherTime);
                    strcmd = string.Format("{0}:{1}:{2}:{3}", result, roleID, caiJiRoleID, GatherTime);
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求完成物品采集
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprCaiJiFinishCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int caiJiRoleID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int result = CaiJiLogic.ReqFinishCaiJi(client, caiJiRoleID);
                string strcmd = string.Format("{0}:{1}:{2}", result, roleID, caiJiRoleID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求采集剩余次数
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprCaiJiLastNumCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int huodongType = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int lastnum = 0;
                int result = CaiJiLogic.ReqCaiJiLastNum(client, huodongType, out lastnum);
                string strcmd = string.Format("{0}:{1}:{2}", result, huodongType, lastnum);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// 执行过场动画带的lua脚本
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprRunTaskPlotLuaCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskPlotID = Convert.ToInt32(fields[1]);
                int startOrEnd = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //获取过场动画的脚本(固定放在 程序目录/scripts/taskplot 目录下 文件名称为 配置名称.lua)
                string luaFileName = Global.GetTaskPlotLuaScriptFile(taskPlotID, startOrEnd);
                if (!string.IsNullOrEmpty(luaFileName))
                {
                    //执行对话脚本
                    Global.ExcuteLuaFunction(client, luaFileName, "run", null, null);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 执行给NPC的交付任务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprTransferSomethingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                TaskData taskData = Global.GetTaskData(client, taskID);
                if (null == taskData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务没有在列表中找到, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                SystemXmlItem systemTask = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID));
                //    return TCPProcessCmdResults.RESULT_OK;
                //}

                int mapCode = -1;
                int npcType = -1;
                int npcID = -1;
                if (!Global.JugeTaskTargetComplete(systemTask, 1, taskData.DoingTaskVal1))
                {
                    int targetType1 = systemTask.GetIntValue(StringUtil.substitute("TargetType{0}", 1));
                    if ((int)TaskTypes.TransferSomething == targetType1)
                    {
                        Global.GetTaskTargetID(systemTask, 1, out mapCode, out npcType, out npcID);
                        int extensionID = npcID;
                        npcID = SpriteBaseIds.NpcBaseId + extensionID;

                        // 处理任务
                        ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.TransferSomething);
                    }
                }
                else if (!Global.JugeTaskTargetComplete(systemTask, 2, taskData.DoingTaskVal2))
                {
                    int targetType2 = systemTask.GetIntValue(StringUtil.substitute("TargetType{0}", 2));
                    if ((int)TaskTypes.TransferSomething == targetType2)
                    {
                        Global.GetTaskTargetID(systemTask, 2, out mapCode, out npcType, out npcID);
                        int extensionID = npcID;
                        npcID = SpriteBaseIds.NpcBaseId + extensionID;

                        // 处理任务
                        ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.TransferSomething);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #region 龙权商城相关
        /// 返回商城数据列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprFetchMallDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //需要的商城数据类型，默认返回全部，用于扩展，将来这儿可以单独返回某项
                int mallDataType = Convert.ToInt32(fields[1]);

                MallSaleData mallData = Global.GetMallSaleData(client);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<MallSaleData>(mallData, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵获取从商城用元宝购买物品事件【抢购商品】
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteMallQiangGouBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 5)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int qiangGouID = Convert.ToInt32(fields[1]);
                int goodsNum = Convert.ToInt32(fields[2]);
                //bool autoUseGold = (1 == Convert.ToInt32(fields[3]));
                bool autoUseGold = false;//抢购不允许使用金币，就是绑定元宝===>字段保留
                int goodsID = Convert.ToInt32(fields[4]);

                if (goodsNum <= 0 || goodsNum >= 10000)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, goodsNum));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //gm停止了限时抢购
                if (Global.IsGmStopQiangGou())
                {
                    strcmd = string.Format("{0}:0:", -106);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                QiangGouItemData itemData = Global.GetQiangGouItemData(client, qiangGouID, goodsID);
                if (null == itemData)
                {
                    strcmd = string.Format("{0}:0:", -20002);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int actStartDay = 0;
                switch (itemData.Type)
                {
                    case 1:
                        actStartDay = Global.GetOffsetDay(Global.GetHefuStartDay());
                        break;
                    case 2:
                        actStartDay = Global.GetOffsetDay(Global.GetJieriStartDay());
                        break;
                    default:
                        actStartDay = 0;
                        break;
                }

                int singleHasPurchase = 0;
                int fullHasPurchase = 0;
                if (!Global.QueryQiangGouItemInfo(roleID, qiangGouID, goodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
                {
                    strcmd = string.Format("{0}:0:", -1106);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int price = 100000;

                //判断请求购买的交易是否合法
                int nResult = Global.CheckQiangGou(client, singleHasPurchase, fullHasPurchase, qiangGouID, goodsNum, goodsID, out price);
                if (nResult <= 0)
                {
                    strcmd = string.Format("{0}:0:", nResult);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (price <= 0)
                {
                    strcmd = string.Format("{0}:0:", -100);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (goodsID <= 0)
                {
                    strcmd = string.Format("{0}:0:", -101);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //判断用户点卷额是否不足
                //if (GameManager.ClientMgr.GetCanUseUserMoneyAndGold(client) < (price * goodsNum))
                if (client.UserMoney < (price * goodsNum))
                {
                    strcmd = string.Format("{0}:0:", -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //总的判断一下背包是否够用 物品绝对是强制绑定的
                if (!Global.CanAddGoods(client, goodsID, goodsNum, 1))
                {
                    strcmd = string.Format("{0}:0:", -3);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //先通知gamedb扣除购买限额
                //提交给gamedb
                string toDbCmd = String.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", client.RoleID, goodsID, goodsNum, goodsNum * price,
                    client.UserMoney - goodsNum * price, qiangGouID, actStartDay);

                string[] dbCmds = null;
                Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_DB_ADDQIANGGOUBUYITEM, toDbCmd, out dbCmds, client.ServerId);

                if (null == dbCmds || 2 != dbCmds.Length)
                {
                    strcmd = string.Format("{0}:0:", -4);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int ret = int.Parse(dbCmds[1]);
                if (ret < 0)
                {
                    strcmd = string.Format("{0}:0:", ret);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int toBinding = 1; //商城抢购的强制绑定

                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);

                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }

                    //判断背包是否够用
                    if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0))
                    {
                        strcmd = string.Format("{0}:0:", -3);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //优先扣除金币
                    //扣除的金币
                    //int hasSubGold = 0;

                    //扣除的元宝
                    //int hasSubYuanBao = 0;

                    //先DBServer请求扣费
                    //扣除用户点卷
                    if (autoUseGold)
                    {
                        //if (!GameManager.ClientMgr.SubUserMoney2(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), out hasSubYuanBao, out hasSubGold))
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "商城抢购自动扣除"))
                        {
                            strcmd = string.Format("{0}:0:", -4);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }

                        //金子参与购买的强制绑定
                        //if (hasSubGold > 0)
                        //{
                        //    toBinding = 1;
                        //}
                    }
                    else
                    {
                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, (price * thisTimeNum), "商城抢购"))
                        {
                            strcmd = string.Format("{0}:0:", -4);
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                            break;
                        }
                    }

                    client.TotalUsedMoney += (price * thisTimeNum);

                    //想DBServer请求加入某个新的物品到背包中
                    int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, toBinding, 0, "", true, 1, "商城购买_限时抢购");
                    if (dbRet < 0)
                    {
                        strcmd = string.Format("{0}:0:", -5);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                        break;
                    }

                    //写入角色抢购日志行为
                    Global.AddRoleQiangGouBuyWithYuanBaoEvent(client, goodsID, thisTimeNum, (price * thisTimeNum), qiangGouID);

                    // 处理每日活跃中商城购买项 [2/26/2014 LiaoWei]
                    DailyActiveManager.ProcessBuyItemInMallForDailyActive(client, price * thisTimeNum);

                    if (!Global.QueryQiangGouItemInfo(roleID, qiangGouID, goodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
                    {
                        //strcmd = string.Format("{0}:0:", -1106);
                        //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        //return TCPProcessCmdResults.RESULT_DATA;
                    }

                    strcmd = string.Format("{0}:{1}:{2}:{3}", dbRet, qiangGouID, thisTimeNum, fullHasPurchase);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    tcpMgr.MySocketListener.SendData(socket, tcpOutPacket);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 龙权商城相关

        #region 龙权礼品码相关
        /// 返回礼品码数据列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprFetchActivitiesDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //需要的商城数据类型，默认返回全部，用于扩展，将来这儿可以单独返回某项
                int mallDataType = Convert.ToInt32(fields[1]);

                ActivitiesData activitiesData = Global.GetActivitiesData(client);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<ActivitiesData>(activitiesData, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 龙权礼品码相关
        #region 钻皇相关
        /// <summary>
        /// 钻皇每周奖励领取
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteFetchZuanHuangAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                bool isJustCheck = Convert.ToInt32(fields[1]) != 0;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                long totalInputYuanBao = Global.GetUserInputAllYuanBao(client);
                int ret = Global.TryToGiveZuanHuangWeekAward(client, isJustCheck);

                if (isJustCheck)
                {
                    if (ret >= 0)
                    {
                        ret = 6000;//可以领取
                    }
                    else
                    {
                        ret = 7000;//不可以领取 
                    }
                }
                string strcmd = "";
                strcmd = string.Format("{0}:{1}:{2}", ret, roleID, totalInputYuanBao);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }
        #endregion 钻皇相关

        #region 系统激活项相关

        /// <summary>
        /// 记录系统激活项，比如经脉等，只简单为客户端提供记录，包括简单的等级验证,采用一个整数存放并记录各激活项
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteSystemOpenParamsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int activateIndex = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                SystemXmlItem xmlItem = null;
                if (!GameManager.SystemSystemOpen.SystemXmlItemDict.TryGetValue(activateIndex, out xmlItem))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, activateIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //验证等级
                if (client.m_Level < xmlItem.GetIntValue("MinLevel"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, activateIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (activateIndex < 0 || activateIndex > 31)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activateIndex);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //可以激活，记录激活项
                GameManager.ClientMgr.ModifySystemOpenValue(client, activateIndex, true, true);

                strcmd = string.Format("{0}:{1}:{2}", 1, roleID, activateIndex);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #endregion 系统激活项相关

        /// <summary>
        /// 任务目标可能在副本中，执行进入副本的操作
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEnterTaskFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                TaskData taskData = Global.GetTaskData(client, taskID);
                if (null == taskData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务没有在列表中找到, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                SystemXmlItem systemTask = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID));
                //    return TCPProcessCmdResults.RESULT_OK;
                //}

                bool enterFuBen = false;
                int mapCode = -1;
                int npcType = -1;
                int npcID = -1;
                if (!Global.JugeTaskTargetComplete(systemTask, 1, taskData.DoingTaskVal1))
                {
                    Global.GetTaskTargetID(systemTask, 1, out mapCode, out npcType, out npcID, false);
                    if (MapTypes.TaskCopy == Global.GetMapType(mapCode))
                    {
                        enterFuBen = true;
                    }
                }
                else if (!Global.JugeTaskTargetComplete(systemTask, 2, taskData.DoingTaskVal2))
                {
                    Global.GetTaskTargetID(systemTask, 2, out mapCode, out npcType, out npcID, false);
                    if (MapTypes.TaskCopy == Global.GetMapType(mapCode))
                    {
                        enterFuBen = true;
                    }
                }

                if (enterFuBen)
                {
                    /// 进入任务目标所在的副本
                    Global.EnterTaskTargetFuBen(client, mapCode);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 单独获取任务奖励信息
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetTaskAwardsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int taskID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SystemXmlItem systemTask = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("获取任务奖励时任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID));
                //    return TCPProcessCmdResults.RESULT_OK;
                //}

                ///将任务数据发送给用户前, 进行预先处理
                TaskAwardsData taskAwardsData = Global.GetTaskAwardsData(client, taskID, systemTask);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskAwardsData>(taskAwardsData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 通知获取掉落的包裹
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteNotifyGetGoodsPackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //移动停止时拾取包裹
                GameManager.GoodsPackMgr.ProcessClickGoodsPackWhenMovingEnd(client);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 获取达到60级的奖励
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetTo60AwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int awardID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                HuodongCachingMgr.ProcessGetUpLevelAward4_60Level_100Level(client, awardID);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 获取开服在线信息
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetKaiFuOnlineInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int zoneID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                List<int> onlineSecsList = new List<int>();
                for (int i = 1; i <= 7; i++)
                {
                    int onlineSecs = Global.GetRoleParamsInt32FromDB(client, string.Format("{0}{1}", RoleParamName.KaiFuOnlineDayTimes, i));
                    if (onlineSecsList.Count > 0)
                    {
                        onlineSecs = Math.Max(onlineSecs, onlineSecsList[onlineSecsList.Count - 1]);
                    }

                    onlineSecsList.Add(onlineSecs);
                }

                /// 处理角色的在线累计
                int totalOnlineSecs = 0;
                int dayID = 0;
                if (HuodongCachingMgr.GetCurrentDayKaiFuOnlineSecs(client, out totalOnlineSecs, out dayID))
                {
                    dayID = dayID - 1;
                    if (dayID >= 0 && dayID < onlineSecsList.Count)
                    {
                        onlineSecsList[dayID] = totalOnlineSecs;

                        for (int i = dayID + 1; i < onlineSecsList.Count; i++)
                        {
                            onlineSecsList[i] = Math.Max(onlineSecsList[i - 1], onlineSecsList[i]);
                        }
                    }
                }

                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, (int)TCPGameServerCmds.CMD_DB_QUERYKAIFUONLINEAWARDLIST, data, count, out bytesData, client.ServerId))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);

                /// 将字节数据转为对象
                List<KaiFuOnlineAwardData> list = DataHelper.BytesToObject<List<KaiFuOnlineAwardData>>(bytesData, 6, length - 2);
                KaiFuOnlineInfoData kaiFuOnlineInfoData = new KaiFuOnlineInfoData()
                {
                    SelfDayBit = Global.GetRoleParamsInt32FromDB(client, RoleParamName.KaiFuOnlineDayBit),
                    SelfDayOnlineSecsList = onlineSecsList,
                    KaiFuOnlineAwardDataList = list,
                };

                //int totalRoleNum = 0;

                int elapsedDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), Global.GetKaiFuTime());
                elapsedDays += 1; //加1才和配置文件中一致
                if (elapsedDays >= 1 && elapsedDays <= 7)
                {
                    ///如果指定的天不存在，则从数据库中获取
                    if (elapsedDays > 1)
                    {
                        HuodongCachingMgr.FixKaiFuOnlineAwardDataList(kaiFuOnlineInfoData.KaiFuOnlineAwardDataList, dayID - 1, client.ServerId);
                    }

                    HuodongCachingMgr.FixKaiFuOnlineAwardDataList(kaiFuOnlineInfoData.KaiFuOnlineAwardDataList, dayID, client.ServerId);

                    //处理获奖
                    //从DBServer获取副本顺序ID
                    /*string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYKAIFUONLINEAWARDROLEID, string.Format("{0}", elapsedDays));
                    if (null == dbFields || dbFields.Length < 4)
                    {
                        return TCPProcessCmdResults.RESULT_FAILED;
                    }

                    totalRoleNum = Global.SafeConvertToInt32(dbFields[3]);
                    if (null != kaiFuOnlineInfoData.KaiFuOnlineAwardDataList)
                    {
                        bool founded = false;
                        for (int i = 0; i < kaiFuOnlineInfoData.KaiFuOnlineAwardDataList.Count; i++)
                        {
                            if (kaiFuOnlineInfoData.KaiFuOnlineAwardDataList[i].DayID == elapsedDays)
                            {
                                founded = true;
                            }
                        }

                        if (!founded)
                        {
                            kaiFuOnlineInfoData.KaiFuOnlineAwardDataList.Add(new KaiFuOnlineAwardData()
                            {
                                DayID = elapsedDays,
                                TotalRoleNum = totalRoleNum,
                            });
                        }
                    }*/
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<KaiFuOnlineInfoData>(kaiFuOnlineInfoData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 获取专属活动xml数据
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetSpecialActXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int clientVersion = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriXmlData jieriXmlData = Global.LoadSpecActXmlData();
                if (jieriXmlData.Version == clientVersion)
                {
                    // 客户端的配置版本号和服务器的配置版本号一致，那么就不在推送配置文件信息了
                    JieriXmlData tmpXml = new JieriXmlData();
                    tmpXml.XmlList = null;
                    tmpXml.Version = jieriXmlData.Version;
                    jieriXmlData = tmpXml;
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 查询专属活动数据
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetSpecActDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SpecialActivityData SpecActData = null;
                SpecialActivity act = HuodongCachingMgr.GetSpecialActivity();
                if (null != act)
                {
                    SpecActData = act.GetSpecialActivityDataForClient(client);
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SpecialActivityData>(SpecActData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 领取专属活动奖励
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFetchSpecActAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int actID = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                SpecialActivity act = HuodongCachingMgr.GetSpecialActivity();
                if (null == act)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", StdErrorCode.Error_Config_Fault, roleID, actID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检查各种条件
                int ErrCode = act.SpecActCheckCondition(client, actID);
                if (ErrCode != StdErrorCode.Error_Success_No_Info)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", ErrCode, roleID, actID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检查背包空间
                if (!act.HasEnoughBagSpaceForAwardGoods(client, actID))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", StdErrorCode.Error_BagNum_Not_Enough, roleID, actID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 给奖励
                ErrCode = act.SpecActGiveAward(client, actID);
                if (ErrCode != StdErrorCode.Error_Success_No_Info)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", ErrCode, roleID, actID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                strcmd = act.BuildFetchSpecActAwardCmd(client, ErrCode, actID);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }


        /// <summary>
        /// 获取节日开服活动xml数据
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetJieriXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int clientVersion = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriXmlData jieriXmlData = Global.LoadJieriXmlData();
                if (jieriXmlData.Version == clientVersion)
                {
                    // 客户端的配置版本号和服务器的配置版本号一致，那么就不在推送配置文件信息了
                    JieriXmlData tmpXml = new JieriXmlData();
                    tmpXml.XmlList = null;
                    tmpXml.Version = jieriXmlData.Version;
                    jieriXmlData = tmpXml;
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #region 节日赠送王排行
        private static TCPProcessCmdResults ProcessQueryJieriGiveKingInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieRiGiveKingActivity gkActivity = HuodongCachingMgr.GetJieriGiveKingActivity();
                byte[] rspData = gkActivity != null ? gkActivity.QueryActivityInfo(client) : null;
                if (rspData == null)
                {
                    // 如果活动未开启，客户端强行来查，那么查不到，就先创建一个假数据
                    // 其实应该在JieriRecvKingData里面加一个errorcode字段
                    JieriGiveKingData phonyData = new JieriGiveKingData();
                    phonyData.MyData = new JieriGiveKingItemData()
                    {
                        RoleID = client.RoleID,
                        Rolename = client.RoleName,
                        TotalGive = 0,
                        Rank = -1,
                        GetAwardTimes = 0,
                        ZoneID = client.ZoneID
                    };
                    rspData = DataHelper.ObjectToBytes(phonyData);
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rspData, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        private static TCPProcessCmdResults ProcessGetJieriGiveKingAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int awardid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieRiGiveKingActivity gkActivity = HuodongCachingMgr.GetJieriGiveKingActivity();
                if (gkActivity == null)
                {
                    // 找不到活动，认为不是领奖时间
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", (int)JieriGiveErrorCode.NotAwardTime, awardid), nID);
                }
                else
                {
                    string rsp = gkActivity.ProcRoleGetAward(client, awardid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion

        #region 节日收取排行
        private static TCPProcessCmdResults ProcessQueryJieriRecvKingInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieRiRecvKingActivity rkActivity = HuodongCachingMgr.GetJieriRecvKingActivity();
                byte[] rspData = rkActivity != null ? rkActivity.QueryActivityInfo(client) : null;
                if (rspData == null)
                {
                    // 如果活动未开启，客户端强行来查，那么查不到，就先创建一个假数据
                    // 其实应该在JieriRecvKingData里面加一个errorcode字段
                    JieriRecvKingData phonyData = new JieriRecvKingData();
                    phonyData.MyData = new JieriRecvKingItemData()
                    {
                        RoleID = client.RoleID,
                        Rolename = client.RoleName,
                        TotalRecv = 0,
                        Rank = -1,
                        GetAwardTimes = 0,
                        ZoneID = client.ZoneID
                    };
                    rspData = DataHelper.ObjectToBytes(phonyData);
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rspData, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        private static TCPProcessCmdResults ProcessGetJieriRecvKingAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int awardid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieRiRecvKingActivity gkActivity = HuodongCachingMgr.GetJieriRecvKingActivity();
                if (gkActivity == null)
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", (int)JieriGiveErrorCode.NotAwardTime, awardid), nID);
                }
                else
                {
                    string rsp = gkActivity.ProcRoleGetAward(client, awardid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                }
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion

        // 查询节日赠送信息
        private static TCPProcessCmdResults ProcessQueryRoleJieriGiveInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
                string cmd = string.Empty;
                if (act == null)
                {
                    cmd = "0:0:0";
                }
                else
                {
                    cmd = act.QueryActInfo(client);
                }
                client.sendCmd(nID, cmd);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 领取节日赠送奖励
        /// </summary>
        private static TCPProcessCmdResults ProcessRoleGetJieriGiveAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleid = Convert.ToInt32(fields[0]);
                int awardid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleid)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleid));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
                if (act == null)
                {
                    // 找不到这个活动，认为活动未开启
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", (int)JieriGiveErrorCode.ActivityNotOpen, awardid), nID);
                }
                else
                {
                    string rsp = act.ProcRoleGetAward(client, awardid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 赠送物品给别人
        /// </summary>
        private static TCPProcessCmdResults ProcessRoleJieriGiveToOther(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string receiverRolename = fields[1];
                int goodsID = Convert.ToInt32(fields[2]);
                int goodsCnt = Convert.ToInt32(fields[3]);
                int receiverRoleID = -1;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
                if (act == null)
                {
                    // 找不到活动的这种情况，先认为是活动未开启
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}:{3}", (int)JieriGiveErrorCode.ActivityNotOpen, 0, 0, 0), nID);
                }
                else
                {
                    string rsp = act.ProcRoleGiveToOther(client, receiverRolename, goodsID, goodsCnt);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        // 领取节日收取奖励
        private static TCPProcessCmdResults ProcessRoleGetJieriRecvAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleid = Convert.ToInt32(fields[0]);
                int awardid = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleid)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleid));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriRecvActivity act = HuodongCachingMgr.GetJieriRecvActivity();
                if (act == null)
                {
                    // 找不到这个活动，认为活动未开启
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", (int)JieriGiveErrorCode.ActivityNotOpen, awardid), nID);
                }
                else
                {
                    string rsp = act.ProcRoleGetAward(client, awardid);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        // 查询节日收取信息
        private static TCPProcessCmdResults ProcessQueryRoleJieriRecvInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriRecvActivity act = HuodongCachingMgr.GetJieriRecvActivity();
                string cmd = string.Empty;
                if (act == null)
                {
                    cmd = "0:0";
                }
                else
                {
                    cmd = act.QueryActInfo(client);
                }
                client.sendCmd(nID, cmd);
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        // 领取连续充值奖励
        private static TCPProcessCmdResults ProcessSetFunctionOpen(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int bitIndex = Convert.ToInt32(fields[1]); // ESettingBitFlag
                int open = (Convert.ToInt32(fields[2]) == 1) ? 1 : 0; // 1：开启， 0：关闭

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (bitIndex >= 0 && bitIndex <= (int)ESettingBitFlag.TopLimit)
                {
                    long oldSettings = Global.GetRoleParamsInt64FromDB(client, RoleParamName.SettingBitFlags);
                    long oldSettings_bak = oldSettings;
                    long newSettings = (open == 1)
                        ? (oldSettings |= (1L << bitIndex))
                        : (oldSettings &= (long)/**/((~(1UL << bitIndex)) & (ulong)(long.MaxValue))/**/); // 去除最高位的符号位的影响
                    if (newSettings != oldSettings_bak)
                    {
                        // 新旧不一样，有更新,存数据库
                        Global.SaveRoleParamsInt64ValueToDB(client, RoleParamName.SettingBitFlags, newSettings, true);
                    }
                }

                string rsp = string.Format("{0}", Global.GetRoleParamsInt64FromDB(client, RoleParamName.SettingBitFlags));
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        // 领取连续充值奖励
        private static TCPProcessCmdResults ProcessGetJieriLianXuChargeAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int awardId = Convert.ToInt32(fields[1]); // 档次id
                int lianXuDay = Convert.ToInt32(fields[2]); // 连续天数

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriLianXuChargeActivity act = HuodongCachingMgr.GetJieriLianXuChargeActivity();
                int ec = (act == null) ? (int)JieriLianXuChargeErrorCode.ActivityNotOpen : (int)act.HandleGetAward(client, awardId, lianXuDay);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}", ec, awardId, lianXuDay), nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        // 查询连续充值活动信息
        private static TCPProcessCmdResults ProcessQueryJieriLianXuChargeInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieriLianXuChargeActivity act = HuodongCachingMgr.GetJieriLianXuChargeActivity();
                if (act == null)
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}", (int)JieriLianXuChargeErrorCode.ActivityNotOpen), nID);
                }
                else
                {
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, act.QueryMyActInfo(client), nID);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "", false);
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #region 大型节日活动命令

        /// <summary>
        /// 节日礼包查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriDaLiBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriDaLiBao, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日登录查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriDengLuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriDengLuHaoLi, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日VIP查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriVIPCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriVIP, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日充值加送查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriCZSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriCZSong, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日充值累计查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriCZLeiJiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriLeiJiCZ, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日消费累计查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriTotalConsumeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriTotalConsume, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日字卡换礼盒查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriCZZiKaCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int type = Convert.ToInt32(fields[1]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                JieRiZiKaLiaBaoActivity activity = HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity();
                if (null == activity)
                {
                    LogManager.WriteLog(LogTypes.Error, "HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity()失败");
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                List<int> IndexList = activity.GetIndexByType(type);
                if (null == IndexList)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("activity.GetIndexByType失败 type=", type));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string result = "";// type.ToString();
                //result += "|";
                //result += IndexList.Count.ToString();
                foreach (var item in IndexList)
                {
                    result += item.ToString();
                    result += ",";
                    result += HuodongCachingMgr.GetZiKaTodayLeftMergeNum(client, item).ToString();
                    result += "|";
                }

                //流水号1,count1|流水号2,count2……
                string strcmd = string.Format("{0}:{1}:{2}", 1, roleID, result);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日消费王查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriXiaoFeiKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriPTXiaoFeiKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 节日充值王查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriCZKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriPTCZKing, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #endregion 大型节日活动命令

        /// <summary>
        /// 元宝快速接受并完成任务
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryYuanBaoCompleteTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int npcID = Convert.ToInt32(fields[1]);
                int taskID = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /// 角色接受新的任务
                if (TCPProcessCmdResults.RESULT_OK == Global.TakeNewTask(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, (int)TCPGameServerCmds.CMD_SPR_NEWTASK, client, roleID, taskID, npcID, out tcpOutPacket))
                {
                    //进行快速元宝完成任务的处理
                    TaskData taskData = Global.GetTaskData(client, taskID);
                    if (null == taskData)
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }


                    int needYuanBao = Math.Max(0, (int)GameManager.systemParamsList.GetParamValueIntByName("YuanBaoCompleteTask"));
                    if (needYuanBao > 0) //配置了元宝才能执行元宝完成操作
                    {
                        SystemXmlItem systemTask = null;
                        //if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                        //{
                        //    int targetNum1 = systemTask.GetIntValue("TargetNum1");
                        //    int targetNum2 = systemTask.GetIntValue("TargetNum2");
                        //    if (taskData.DoingTaskVal1 >= targetNum1 &&
                        //        taskData.DoingTaskVal2 >= targetNum2)
                        //    {
                        //        return TCPProcessCmdResults.RESULT_OK; //防止重复扣除元宝
                        //    }

                        //    //预先判断是否是要奖励物品的任务
                        //    //如果任务有物品奖励，判断是背包已经满了，如果是，则返回失败，提示用户先清空背包
                        //    if (!Global.CanCompleteTaskByGridNum(tcpMgr.MySocketListener, pool, client, taskID))
                        //    {
                        //        tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -2), pool, (int)TCPGameServerCmds.CMD_SPR_COMPTASK);
                        //        return TCPProcessCmdResults.RESULT_DATA;
                        //    }

                        //    //判断任务是否有祝福点奖励，有的话判断是否在坐骑骑乘状态
                        //    if (!Global.CanCompleteTaskByBlessPoint(client, systemTask))
                        //    {
                        //        tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -300), pool, (int)TCPGameServerCmds.CMD_SPR_COMPTASK);
                        //        return TCPProcessCmdResults.RESULT_DATA;
                        //    }

                        //    //判断用户点卷额是否不足
                        //    if (client.UserMoney < needYuanBao)
                        //    {
                        //        /// 通知在线的对方(不限制地图)个人紧要消息
                        //        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, Global.GetLang("钻石不足，无法快速完成任务"), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                        //    }
                        //    else
                        //    {
                        //        //先DBServer请求扣费
                        //        //扣除用户点卷
                        //        if (GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "快速完成任务2"))
                        //        {
                        //            string taskName = systemTask.GetStringValue("Title");

                        //            //直接修改任务的数值
                        //            ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        //                    client, taskName, 1, targetNum1);

                        //            //直接修改任务的数值
                        //            ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        //                client, taskName, 2, targetNum2);

                        //            int isMainTask = ((int)TaskClasses.MainTask == systemTask.GetIntValue("TaskClass")) ? 1 : 0;
                        //            byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", roleID, npcID, taskID, taskData.DbID, isMainTask));
                        //            byte[] bytesData = null;
                        //            if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, (int)TCPGameServerCmds.CMD_SPR_COMPTASK, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                        //            {
                        //                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)(int)TCPGameServerCmds.CMD_SPR_COMPTASK));

                        //                tcpOutPacket = DataHelper.ObjectToTCPOutPacket(new SCCompTask(roleID, npcID, taskID, -3), pool, (int)TCPGameServerCmds.CMD_SPR_COMPTASK);
                        //                return TCPProcessCmdResults.RESULT_DATA;
                        //            }

                        //            Int32 length = BitConverter.ToInt32(bytesData, 0);
                        //            string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                        //            //解析客户端的指令
                        //            string[] fieldsData = strData.Split(':');

                        //            SCCompTask sCCompTask = null;
                        //            if (fieldsData.Length < 3 || fieldsData[2] == "-1") //添加出错
                        //            {
                        //                sCCompTask = new SCCompTask(roleID, npcID, taskID, -1);
                        //            }
                        //            else
                        //            {
                        //                //如果任务已经顺利完成，则根据任务的奖励给予用户
                        //                if (ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, npcID, -1, taskID, taskData.DbID, false, 3.0))
                        //                {
                        //                    //更新主线任务ID
                        //                    if (isMainTask > 0 && taskID > client.MainTaskID)
                        //                    {
                        //                        client.MainTaskID = taskID;
                        //                        //刷新那些需要根据任务开启的功能  add by tanglong 14/11/27
                        //                        GlobalNew.RefreshGongNeng(client);
                        //                    }
                        //                    sCCompTask = new SCCompTask(roleID, npcID, taskID, -0);
                        //                }
                        //                else
                        //                {
                        //                    sCCompTask = new SCCompTask(roleID, npcID, taskID, -1);
                        //                }
                        //            }

                        //            tcpOutPacket = DataHelper.ObjectToTCPOutPacket(sCCompTask, pool, (int)TCPGameServerCmds.CMD_SPR_COMPTASK);
                        //            return TCPProcessCmdResults.RESULT_DATA;
                        //        }
                        //    }
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #region 合服活动及新加的充值返利命令

        /// <summary>
        /// 合服礼包查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuDaLiBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuDaLiBao, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 合服VIP查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuVIPCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuVIP, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 合服充值加送查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuCZSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuCZSong, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }


        /// <summary>
        /// 合服PK王查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuPKKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuPKKing, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 合服王城霸主查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuWCKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuWanChengKing, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 合服充值返利查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryHeFuCZFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HeFuCZFanLi, client), out tcpOutPacket);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);*/
            return TCPProcessCmdResults.RESULT_DATA;
        }

        /// <summary>
        /// 新区充值返利查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryXinCZFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //string fromDate = fields[1];
                //string toDate = fields[2];
                //double addPercent = Convert.ToDouble(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.XinCZFanLi, client), out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #endregion 合服活动及新加的充值返利命令

        /// <summary>
        /// 一键出售或者回收命令
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessOneKeyQuickSaleOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int oType = Convert.ToInt32(fields[1]);
                string goodsDbIds = fields[2];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

               if (oType == (int)OneKeyOTypes.BatchSaleOut)
                {
                    // 这里对应客户端的出售
                    int totalYinLiangPrice = 0;
                    int totalTongQianPrice = 0;
                    int totalZaiZao = 0;
                    int totalJingYuan = 0;

                    string[] idsList = goodsDbIds.Split(',');
                    for (int i = 0; i < idsList.Length; i++)
                    {
                        int goodsDbID = Global.SafeConvertToInt32(idsList[i]);
                        GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
                        if (null != goodsData && goodsData.Site == 0 && goodsData.Using <= 0) //必须在背包中
                        {
                            int goodsPrice = Global.GetGoodsDataPrice(goodsData);
                            int zaiZao = Global.GetGoodsDataZaiZao(goodsData);
                            int jingYuan = Global.GetGoodsDataJingYuan(goodsData);

                            string modGoodsCmd = String.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.RoleID, (int)ModGoodsTypes.Destroy,
                                goodsData.Id, goodsData.GoodsID, 0, goodsData.Site, goodsData.GCount, goodsData.BagIndex, "");
                            if (TCPProcessCmdResults.RESULT_OK != Global.ModifyGoodsByCmdParams(client, modGoodsCmd))
                                continue;

                            if (goodsData.Binding > 0)
                                totalTongQianPrice += goodsPrice;
                            else
                                totalYinLiangPrice += goodsPrice;

                            if (zaiZao > 0)
                                totalZaiZao += zaiZao;

                            if (jingYuan > 0)
                                totalJingYuan += jingYuan;
                        }
                    }

                    if (totalZaiZao > 0)
                        GameManager.ClientMgr.ModifyZaiZaoValue(client, totalZaiZao, "一键出售或者回收", true, true);

                    if (totalJingYuan > 0)
                    {
                        // 七日活动
                        SevenDayGoalEventObject evSale = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverMoJing);
                        evSale.Arg1 = totalJingYuan;
                        GlobalEventSource.getInstance().fireEvent(evSale);

                        GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, totalJingYuan, "一键出售或者回收", true, true);
                    }

                    GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalYinLiangPrice, "一键出售或者回收");
                    GameManager.ClientMgr.AddMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalTongQianPrice, "一键出售或者回收");

                    if (totalYinLiangPrice > 0 && totalTongQianPrice > 0)
                        GameManager.LuaMgr.Hot(client, StringUtil.substitute(Global.GetLang("您获得了：金币+ {0},绑定金币+ {1}"), totalYinLiangPrice, totalTongQianPrice));
                    else if (totalYinLiangPrice > 0)
                        GameManager.LuaMgr.Hot(client, StringUtil.substitute(Global.GetLang("您获得了：金币+ {0}"), totalYinLiangPrice));
                    else if (totalTongQianPrice > 0)
                        GameManager.LuaMgr.Hot(client, StringUtil.substitute(Global.GetLang("您获得了：绑定金币+ {0}"), totalTongQianPrice));
                }
                else if (oType == (int)OneKeyOTypes.BatchSaleBack)
                {
                    // 这里对应客户端的一键回收

                   
                }
              

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #region 采用战魂激活的 战魂系统

        /// 激活下一级战魂
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprActivateNextLevelZhanHunCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                 * 读取配置文件 Config/ZhanHun.xml 并进行相关处理
                 */
                string strcmd = "";

                int curZhanHunLevel = GameManager.ClientMgr.GetZhanHunLevelValue(client);
                int nextZhanHunLevel = curZhanHunLevel + 1;

                //判断能否升级，采用是否存在下一等级buffer物品进行判断
                int[] ZhanHunBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanhunBufferGoodsIDs");

                //下一等级buffer不存在
                if (nextZhanHunLevel > ZhanHunBufferGoods.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, curZhanHunLevel, nextZhanHunLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem ZhanHunlXmlItem = null;
                if (!GameManager.SystemZhanHunLevel.SystemXmlItemDict.TryGetValue(nextZhanHunLevel, out ZhanHunlXmlItem) || null == ZhanHunlXmlItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, curZhanHunLevel, nextZhanHunLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needRoleLevel = ZhanHunlXmlItem.GetIntValue("LevelLimit");
                int needZhanHun = ZhanHunlXmlItem.GetIntValue("ZhanHun");

                //角色等级判断
                if (needRoleLevel > client.m_Level)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, curZhanHunLevel, nextZhanHunLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //真气值判断
                int curRoleZhanHun = GameManager.ClientMgr.GetZhanHunValue(client);
                if (curRoleZhanHun < needZhanHun)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, curZhanHunLevel, nextZhanHunLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除战魂值===>同时通知客户端，第四个参数true
                GameManager.ClientMgr.ModifyZhanHunValue(client, -needZhanHun, true, true);

                //设置战魂等级加1,战魂等级不是经常变化，立即更新到数据库
                GameManager.ClientMgr.ModifyZhanHunLevelValue(client, 1, true, true);

                //升级成功
                strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, curZhanHunLevel, nextZhanHunLevel);

                //传奇战魂等级播报
                Global.BroadcastClientChuanQiZhanHun(client, nextZhanHunLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion

        #region 采用荣誉激活的 荣誉系统

        /// 激活下一级荣誉
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprActivateNextLevelRongYuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                 * 读取配置文件 Config/RongYu.xml 并进行相关处理
                 */
                string strcmd = "";

                int curRongYuLevel = GameManager.ClientMgr.GetRongYuLevelValue(client);
                int nextRongYuLevel = curRongYuLevel + 1;

                //判断能否升级，采用是否存在下一等级buffer物品进行判断
                int[] RongYuBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("RongyaoBufferGoodsIDs");

                //下一等级buffer不存在
                if (nextRongYuLevel > RongYuBufferGoods.Length)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, curRongYuLevel, nextRongYuLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem RongYulXmlItem = null;
                if (!GameManager.SystemRongYuLevel.SystemXmlItemDict.TryGetValue(nextRongYuLevel, out RongYulXmlItem) || null == RongYulXmlItem)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, curRongYuLevel, nextRongYuLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needRoleLevel = RongYulXmlItem.GetIntValue("LevelLimit");
                int needRongYu = RongYulXmlItem.GetIntValue("RongYu");

                //角色等级判断
                if (needRoleLevel > client.m_Level)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, curRongYuLevel, nextRongYuLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //荣誉值判断
                int curRoleRongYu = GameManager.ClientMgr.GetRongYuValue(client);
                if (curRoleRongYu < needRongYu)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, curRongYuLevel, nextRongYuLevel);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除荣誉值===>同时通知客户端，第四个参数true
                GameManager.ClientMgr.ModifyRongYuValue(client, -needRongYu, true, true);

                //设置荣誉等级加1,荣誉等级不是经常变化，立即更新到数据库
                GameManager.ClientMgr.ModifyRongYuLevelValue(client, 1, true, true);

                //升级成功
                strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, curRongYuLevel, nextRongYuLevel);

                //传奇荣誉播报
                Global.BroadcastClientChuanQiRongYu(client, nextRongYuLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 激活荣誉Buffer
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprActivateRongYuBufferCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                /*
                 * 读取配置文件 Config/RongYu.xml 并进行相关处理
                 */
                string strcmd = "";

                int curRongYuLevel = GameManager.ClientMgr.GetRongYuLevelValue(client);

                if (curRongYuLevel < 1)
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem RongYulXmlItem = null;
                if (!GameManager.SystemRongYuLevel.SystemXmlItemDict.TryGetValue(curRongYuLevel, out RongYulXmlItem) || null == RongYulXmlItem)
                {
                    strcmd = string.Format("{0}:{1}", -2, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needRongYu = RongYulXmlItem.GetIntValue("KaiQiXiaoHao");

                //荣誉值判断
                int curRoleRongYu = GameManager.ClientMgr.GetRongYuValue(client);
                if (curRoleRongYu < needRongYu)
                {
                    strcmd = string.Format("{0}:{1}", -4, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除荣誉值===>同时通知客户端，第四个参数true
                GameManager.ClientMgr.ModifyRongYuValue(client, -needRongYu, true, true);

                //激活buffer
                //荣誉等级变化 激活新的荣誉buffer 这个是永久buffer
                Global.ActiveRongYuBuffer(client, true);

                //升级成功
                strcmd = string.Format("{0}:{1}", 1, roleID);

                //传奇荣誉播报
                Global.BroadcastClientChuanQiRongYu(client, curRongYuLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        #endregion

        /// <summary>
        /// 炼炉精炼
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        //private static TCPProcessCmdResults ProcessSprLianLuJingLianCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        //{
        //    tcpOutPacket = null;
        //    string cmdData = null;

        //    try
        //    {
        //        cmdData = new UTF8Encoding().GetString(data, 0, count);
        //    }
        //    catch (Exception) //解析错误
        //    {
        //        LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
        //        return TCPProcessCmdResults.RESULT_FAILED;
        //    }

        //    try
        //    {
        //        //解析用户名称和用户密码
        //        string[] fields = cmdData.Split(':');
        //        if (fields.Length != 5)
        //        {
        //            LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
        //                (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
        //            return TCPProcessCmdResults.RESULT_FAILED;
        //        }

        //        int roleID = Convert.ToInt32(fields[0]);
        //        int id1 = Convert.ToInt32(fields[1]);//需要合成的主物品id
        //        int id2 = Convert.ToInt32(fields[2]);//需要合成的辅助物品id
        //        int id3 = Convert.ToInt32(fields[3]);//需要合成的辅助物品id
        //        int luckyGoodsID = Convert.ToInt32(fields[4]);//幸运符

        //        KPlayer client = GameManager.ClientMgr.FindClient(socket);
        //        if (null == client || client.RoleID != roleID)
        //        {
        //            LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
        //            return TCPProcessCmdResults.RESULT_FAILED;
        //        }

        //        string strcmd = "";

        //        //从物品包中获取要精炼的主装备
        //        GoodsData goodsData1 = Global.GetGoodsByDbID(client, id1);
        //        if (null == goodsData1) //没有找到物品
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //从物品包中获取要精炼的辅助装备
        //        GoodsData goodsData2 = Global.GetGoodsByDbID(client, id2);
        //        if (null == goodsData2) //没有找到物品
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -11, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //从物品包中获取要精炼的辅助装备
        //        GoodsData goodsData3 = Global.GetGoodsByDbID(client, id3);
        //        if (null == goodsData3) //没有找到物品
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -111, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //判断3个装备是否在同一个编组里面
        //        int shouShiSuitID1 = Global.GetGoodsShouShiSuitID(goodsData1.GoodsID);
        //        int shouShiSuitID2 = Global.GetGoodsShouShiSuitID(goodsData2.GoodsID);
        //        int shouShiSuitID3 = Global.GetGoodsShouShiSuitID(goodsData3.GoodsID);
        //        if (!(shouShiSuitID1 == shouShiSuitID2 && shouShiSuitID2 == shouShiSuitID3))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -222, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //判断3个装备qualityID全部>=0 and <=3
        //        int qualityID1 = Global.GetGoodsQualityID(goodsData1.GoodsID);
        //        int qualityID2 = Global.GetGoodsQualityID(goodsData2.GoodsID);
        //        int qualityID3 = Global.GetGoodsQualityID(goodsData3.GoodsID);
        //        if (!(qualityID1 == qualityID2 && qualityID2 == qualityID3))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -333, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        if (qualityID1 < 0 || qualityID1 > 3) //低于0，大于3的都不处理
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -444, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //如果使用幸运符，判断物品是否幸运符
        //        if (luckyGoodsID > 0 && Global.GetLuckyGoodsIndex(luckyGoodsID) < 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -555, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

             

        //        SystemXmlItem qualityUpXmlNode = Global.GetQualityUpXmlNode(systemGoodsItem.GetIntValue("Categoriy"), systemGoodsItem.GetIntValue("ShouShiSuitID"), systemGoodsItem.GetIntValue("QualityID") + 1);
        //        if (null == qualityUpXmlNode)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -777, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        int jingLianRockGoodsID = qualityUpXmlNode.GetIntValue("NeedGoodsID");
        //        int jingLianRockGoodsNum = qualityUpXmlNode.GetIntValue("GoodsNum");
        //        int money = qualityUpXmlNode.GetIntValue("Money");
        //        int jingYuan = qualityUpXmlNode.GetIntValue("JingYuan");
        //        int succeed = qualityUpXmlNode.GetIntValue("Succeed");

        //        //如果物品不在背包中，拒绝操作
        //        if (goodsData1.Site != 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -888, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //如果物品不在背包中，拒绝操作
        //        if (goodsData2.Site != 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -999, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //如果物品不在背包中，拒绝操作
        //        if (goodsData3.Site != 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1111, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //如果物品被佩戴在身上, 拒绝操作
        //        if (goodsData1.Using > 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2222, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        if (goodsData2.Using > 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3333, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        if (goodsData3.Using > 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -4444, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //默认是一个
        //        int totalNum = Global.GetTotalGoodsCountByID(client, jingLianRockGoodsID);
        //        if (totalNum < jingLianRockGoodsNum)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //读取所需铜钱
        //        if (money > Global.GetTotalBindTongQianAndTongQianVal(client))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //读取所需精元
        //        if (jingYuan > 0)
        //        {
        //            if (jingYuan > GameManager.ClientMgr.GetTianDiJingYuanValue(client))
        //            {
        //                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -33, roleID, id1, 0, 0);
        //                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //                return TCPProcessCmdResults.RESULT_DATA;
        //            }
        //        }

        //        ///根据Quality中的xml取得对应Goods.xml中的节点
        //        SystemXmlItem goodsXmlNodeByQualityUp = Global.GetGoodsXmlNodeByQualityUp(systemGoodsItem.GetIntValue("Categoriy"), systemGoodsItem.GetIntValue("ShouShiSuitID"),
        //            systemGoodsItem.GetIntValue("QualityID") + 1, Global.GetMainOccupationByGoodsID(goodsData1.GoodsID));

        //        if (null == goodsXmlNodeByQualityUp)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -34, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //扣除铜钱
        //        if (!Global.SubBindTongQianAndTongQian(client, money, "炼炉精炼"))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //扣除天地精元
        //        if (jingYuan > 0)
        //        {
        //            GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, jingYuan, "炼炉精炼", true, true);
        //        }

        //        bool usedBinding = false;
        //        bool usedTimeLimited = false;

        //        //从用户物品中扣除消耗的数量
        //        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, jingLianRockGoodsID, jingLianRockGoodsNum, false, out usedBinding, out usedTimeLimited))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -100, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        int luckValue = 0;
        //        if (luckyGoodsID > 0)
        //        {
        //            totalNum = Global.GetTotalGoodsCountByID(client, luckyGoodsID);
        //            usedBinding = false;
        //            if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyGoodsID, 1, false, out usedBinding, out usedTimeLimited))
        //            {
        //                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -102, roleID, id1, 0, 0);
        //                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //                return TCPProcessCmdResults.RESULT_DATA;
        //            }

        //            luckValue = Global.GetLuckyValue(luckyGoodsID);//设置幸运值
        //        }

        //        succeed += luckValue;
        //        int rndNum = Global.GetRandomNumber(0, 101);
        //        if (rndNum > succeed)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5555, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //从用户物品中扣除消耗的数量
        //        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData1.Id, false, false))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -5555, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //从用户物品中扣除消耗的数量
        //        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData2.Id, false, false))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6666, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //从用户物品中扣除消耗的数量
        //        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData3.Id, false, false))
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -7777, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        int newGoodsID = goodsXmlNodeByQualityUp.GetIntValue("ID");
        //        if (Global.AddGoodsDBCommand(pool, client, newGoodsID, 1, 0, "", goodsData1.Forge_level, 0, 0, "", false, 1, "传奇精炼合成", Global.ConstGoodsEndTime, 0,1) < 0)
        //        {
        //            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6666, roleID, id1, 0, 0);
        //            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //            return TCPProcessCmdResults.RESULT_DATA;
        //        }

        //        //锻造成功(完美以上提示)
        //        if (systemGoodsItem.GetIntValue("QualityID") >= 1)
        //        {
        //            Global.BroadcastJingLianOk(client, newGoodsID);
        //        }

        //        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, id1, 0, 0);
        //        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
        //        return TCPProcessCmdResults.RESULT_DATA;
        //    }
        //    catch (Exception ex)
        //    {
        //        //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
        //        //{
        //        // 格式化异常错误信息
        //        DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
        //        //throw ex;
        //        //});
        //    }

        //    return TCPProcessCmdResults.RESULT_FAILED;
        //}

        #region 砸金蛋积分领取

        /// <summary>
        /// 领取每日砸金蛋积分
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprZJDJiFenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //将新的砸金蛋积分奖励日常数据通知自己
                GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 领取每日砸金蛋积分对应的物品奖励
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprFetchZJDJiFenAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int awardNo = Convert.ToInt32(fields[1]);

                string strcmd = "";

                //判断是否可以给予某个奖励编号的奖励
                int ret = Global.CanGiveAwardForZaJinDanJifen(client, awardNo);

                if (ret < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}", ret, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int needBagSpaceNum = Global.GetZaJinDanAwardGoodsNum(awardNo);

                //判断背包空间是否足够
                if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -125, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //更新每日奖励信息【更改缓存，并提交给gamedbserver，同时验证dbserver的处理结果】
                if (!Global.UpdateZaJinDanDailyJiFenData(client, awardNo))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -135, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //给玩家每日vip奖励
                if (!Global.GiveZaJinDanAwardForDailyJiFen(client, awardNo))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -145, roleID, awardNo);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                strcmd = string.Format("1:{0}:{1}", roleID, awardNo);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 砸金蛋积分领取

        /// <summary>
        /// 客户端请求活动的相关信息 -- 比如冲级豪礼名额 神装领取名额 幸运抽奖次数[7/18/2013 LiaoWei]
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprQueryActivityInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string strcmd = "";
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 幸运抽奖的条件--充值元宝额度
                int nXingYunChouJiangYB = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByXinyunDazhuanpan");
                if (nXingYunChouJiangYB <= 0)
                {
                    strcmd = string.Format("{0}:{1}", -110, roleID);//策划填错了表
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string[] dbFields = Global.ExecuteDBCmd(nID, string.Format("{0}", roleID), client.ServerId);

                JiQingHuiKuiData JiQingHuiKuiRetData = new JiQingHuiKuiData();
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota = new List<int>();

                // 1.冲级领取神装剩余名额
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift1)));
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift2)));
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift3)));
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift4)));
                JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift5)));

                // 2.神装激情回馈剩余名额
                JiQingHuiKuiRetData.ShenZhuangHuiZengQuoto = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ShenZhuangHuiKuiGift));

                int nIputYuanBao = Global.SafeConvertToInt32(dbFields[0]);
                int nCanPlayCount = nIputYuanBao / nXingYunChouJiangYB;

                int nhasPlaytimes = Global.SafeConvertToInt32(dbFields[1]);
                JiQingHuiKuiRetData.XingYunChouJiangCount = nCanPlayCount - nhasPlaytimes;

                JiQingHuiKuiRetData.TodayYuanBao = Global.SafeConvertToInt32(dbFields[2]);
                JiQingHuiKuiRetData.TodayYuanBaoState = 0;

                for (int i = (int)GiftBtnIndex.BTN1; i <= (int)GiftBtnIndex.BTN3; i++)
                {
                    if (!Global.CanGetDayChongZhiDaLi(client, (int)i))
                    {
                        JiQingHuiKuiRetData.TodayYuanBaoState |= Global.GetBitValue((int)i);
                    }
                }

                for (int i = (int)GiftBtnIndex.BTN1; i <= (int)GiftBtnIndex.BTN5; i++)
                {
                    if (!Global.CanGetChongJiLingQuShenZhuang(client, (int)i))
                        JiQingHuiKuiRetData.ChongJiLingQuShenZhuangState |= Global.GetBitValue((int)i);
                }

                JiQingHuiKuiRetData.XingYunChouJiangYuanBao = nIputYuanBao;

                if (Global.GetShenZhuangHuiKuiStatus(client) == 2)
                    JiQingHuiKuiRetData.ShenZhuangHuiZengState |= Global.GetBitValue(1);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JiQingHuiKuiData>(JiQingHuiKuiRetData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }


        #region 幸运抽奖相关
        /// <summary>
        /// 精灵执行幸运抽奖事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSprXingYunChouJiangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //long startTicks = TimeUtil.NOW();

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //先判断宝物仓库空间是否足够
                if (null != client.JinDanGoodsDataList && Global.GetJinDanBagCapacity(client) - client.JinDanGoodsDataList.Count < 1)
                {
                    strcmd = string.Format("{0}:{1}", -20, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检测幸运抽奖的剩余次数
                int nType = 1;
                int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByXinyunDazhuanpan");

                string sFrom = GameManager.GameConfigMgr.GetGameConifgItem("kaifutime");
                DateTime tStartTime = new DateTime(2000, 1, 1, 0, 0, 0);
                DateTime.TryParse(sFrom, out tStartTime);
                DateTime dEndTime = Global.GetAddDaysDataTime(tStartTime, 3, true);
                string sEnd = dEndTime.ToString("yyyy-MM-dd HH:mm:ss");


                string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, nType, nYuanBaoValue, sFrom.Replace(":", "$"), sEnd.Replace(":", "$"));
                int nTotalTime = Convert.ToInt32(sFields[1]);  // 总次数
                int nHasPlayTime = Convert.ToInt32(sFields[2]);  // 已经玩了几次
                int nYuanBao = Convert.ToInt32(sFields[3]);
                int nCount = nTotalTime - nHasPlayTime;
                if (nCount <= 0)
                {
                    strcmd = string.Format("{0}:{1}", -100, roleID);                // 当前抽奖次数为0，无法进行抽奖，请充值后再进行抽奖
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 给物品
                Dictionary<int, SystemXmlItem> SystemXmlItemDic = GameManager.systemXingYunChouJiangMgr.SystemXmlItemDict;
                String strRecord;
                String gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, SystemXmlItemDic, 2, out strRecord);

                //成功后...
                string[] sFields1 = Global.CompleteXingYunChouJiang(client, 1, nHasPlayTime, "", "");
                int nRet = Convert.ToInt32(sFields1[0]);
                if (nRet == 1)
                    strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, nCount - 1, nYuanBao);// 1.1代表成功  2.角色ID  3.玩家剩余抽奖次数(显示在面板上)  4.活动期间玩家充值的元宝数(显示在面板上) 
                else
                {
                    strcmd = string.Format("{0}:{1}::", -1, roleID);    //失败了 最好打一条log
                    LogManager.WriteLog(LogTypes.Error, string.Format("幸运抽奖失败--DB返回值为{0}, Client={1}", nRet, Global.GetSocketRemoteEndPoint(socket)));
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 幸运抽奖相关

        #region 月度抽奖相关

        /// <summary>
        /// 精灵执行月度抽奖的事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteExecuteCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //long startTicks = TimeUtil.NOW();

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                //int times = Convert.ToInt32(fields[1]);//砸金蛋次数 客户端传递过来，1 10 50 三种数字，不是这三个，则是外挂

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //先判断宝物仓库空间是否足够
                if (null != client.JinDanGoodsDataList && Global.GetJinDanBagCapacity(client) - client.JinDanGoodsDataList.Count < 1)
                {
                    strcmd = string.Format("{0}:{1}", -20, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //是否还有抽奖次数
                Activity instActivity = Global.GetActivity(ActivityTypes.YuDuZhuanPanChouJiang);
                int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByYueduDazhuanpan");
                string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, 2, nYuanBaoValue, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
                int nTotalTime = Convert.ToInt32(sFields[1]);  // 总次数
                int nHasPlayTime = Convert.ToInt32(sFields[2]);  // 已经玩了几次
                int nYuanBao = Convert.ToInt32(sFields[3]);
                int nCount = nTotalTime - nHasPlayTime;
                if (nCount <= 0)
                {
                    strcmd = string.Format("{0}:{1}", -100, roleID);                // 当前抽奖次数为0，无法进行抽奖，请充值后再进行抽奖
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                // 给物品
                String preString = String.Format("{0}_{1}_{2}", roleID, client.RoleName, client.ZoneID);//前缀信息字符串
                StringBuilder strBuilder = new StringBuilder();
                String strRecord;
                String gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, GameManager.systemYueDuZhuanPanChouJiangMgr.SystemXmlItemDict, 3, out strRecord);

                if (strRecord.Length > 0)
                {
                    if (strBuilder.Length > 0)
                        strBuilder.Append(";");//多条记录用分号隔开

                    //添加一条记录
                    strBuilder.Append(String.Format("{0}_{1}", preString, strRecord));
                }

                if (strBuilder.Length > 0)
                {
                    //通知gamedbserver记录竞猜历史 每个角色的通知一次,这儿应该综合考虑一下数据包大小问题，每次不要太大，也不要太小，保证次数不要太多
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDYUEDUCHOUJIANGHISTORY,
                    string.Format("{0}", strBuilder.ToString()),
                    null, client.ServerId);
                }

                //成功后...
                string[] sFields1 = Global.CompleteXingYunChouJiang(client, 2, nHasPlayTime, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
                int nRet = Convert.ToInt32(sFields1[0]);
                if (nRet == 1)
                    strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, nCount - 1, nYuanBao);// 1.1代表成功  2.角色ID  3.玩家剩余抽奖次数(显示在面板上)  4.活动期间玩家充值的元宝数(显示在面板上) 
                else
                {
                    strcmd = string.Format("{0}:{1}::", -1, roleID);    //失败了 最好打一条log
                    LogManager.WriteLog(LogTypes.Error, string.Format("月度抽奖失败--DB返回值为{0}, Client={1}", nRet, Global.GetSocketRemoteEndPoint(socket)));
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                //long usedTicks = TimeUtil.NOW() - startTicks;

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        /// <summary>
        /// 精灵从服务器端获取月度抽奖历史记录
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryYueDuChouJiangHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int param = Convert.ToInt32(fields[1]); //参数2如果是roleid 代表查询的是个人的记录   如果是-1 代表查询的是全服的记录

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (param >= 0 && param != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的砸金蛋历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵从服务器端获取月度抽奖相关信息--还能玩几次、活动期间充值的元宝数量
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryYueDuChouJiangInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //向DB查询
                Activity instActivity = Global.GetActivity(ActivityTypes.YuDuZhuanPanChouJiang);
                int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByYueduDazhuanpan");
                string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, 2, nYuanBaoValue, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
                int nTotalTime = Convert.ToInt32(sFields[1]);  // 总次数
                int nHasPlayTime = Convert.ToInt32(sFields[2]);  // 已经玩了几次
                int nYuanBao = Convert.ToInt32(sFields[3]);
                int nCount = nTotalTime - nHasPlayTime;
                if (nCount < 0)
                    nCount = 0;

                strcmd = string.Format("{0}:{1}:{2}", roleID, nCount, nYuanBao); // 1.roleID 2.还能玩几次 3.充值的元宝数量
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 月度抽奖相关

        #region 魂器兑换相关

        /// 魂器兑换 
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecuteHunQiExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //从物品包中获取要置换的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品不在背包中，拒绝操作
                if (goodsData.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品被佩戴在身上, 拒绝操作
                if (goodsData.Using > 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是魂器
                /*if (category != (int)ItemCategories.Pet)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                //魂器能兑换到的最低百分比为 90%-100%
                int minPercent = (int)GameManager.systemParamsList.GetParamValueIntByName("HuiZhangExchange");
                if (minPercent <= 0 || minPercent > 100)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -41, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem xmlItem = null;
             

                //装备的战魂价格
                int nZhanHunPrice = xmlItem.GetIntValue("ZhanHunPrice");
                if (nZhanHunPrice <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -6, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //扣除物品
                if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsData, 1, false))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -8, roleID, goodsData.Id, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //可兑换值
                int nCanExchangedZhanHunZhi = nZhanHunPrice * Global.GetRandomNumber(minPercent, 101) / 100;

                //起码给个1的战魂值
                nCanExchangedZhanHunZhi = Math.Max(1, nCanExchangedZhanHunZhi);

                //1.DB操作 2.通知客户端战魂值修改
                GameManager.ClientMgr.ModifyZhanHunValue(client, nCanExchangedZhanHunZhi, true, true);

                //置换成功
                strcmd = string.Format("{0}:{1}:{2}:{3}", 1, roleID, goodsData.Id, nCanExchangedZhanHunZhi);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 魂器兑换相关


        #region 转生

        /// 转生操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecuteChangeLifeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {

                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                // 检测职业编号
                int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChangeLifeMaxValue");
                if (client.ChangeLifeCount >= nValue)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -12, roleID, 0);                   // 已达到最高转生等级
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 转生计数
                int nChangeCount = client.ChangeLifeCount + 1; //Global.GetRoleParamsInt32FromDB(client, RoleParamName.sChangeLifeCount) + 1;

                Dictionary<int, ChangeLifeDataInfo> tmpDic = new Dictionary<int, ChangeLifeDataInfo>();

                if (!GameManager.ChangeLifeMgr.m_ChangeLifeInfoList.TryGetValue(client.m_cPlayerFaction.GetFactionId(), out tmpDic) || tmpDic == null)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -30, roleID, 0);              // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                ChangeLifeDataInfo temChagLifeInfo = new ChangeLifeDataInfo();

                if (!tmpDic.TryGetValue(nChangeCount, out temChagLifeInfo) || temChagLifeInfo == null)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -30, roleID, 0);              // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                // 检测级别需求
                int nLev = client.m_Level;
                if (nLev < temChagLifeInfo.NeedLevel)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);                      // 等级未达到
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检测金币数量--非绑定金币
                //int nMoney = client.YinLiang;
                //if (nMoney < temChagLifeInfo.NeedMoney)
                //if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,  
                //                                            client, temChagLifeInfo.NeedMoney))

                // 判断金币
                if (client.Money1 + client.YinLiang < temChagLifeInfo.NeedMoney)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (!Global.SubBindTongQianAndTongQian(client, temChagLifeInfo.NeedMoney, "转生"))
                {
                    strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);                      // 金币不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 消耗魔晶
                int nHaveMoJing = 0;
                nHaveMoJing = GameManager.ClientMgr.GetTianDiJingYuanValue(client);

                if (nHaveMoJing < temChagLifeInfo.NeedMoJing)
                {
                    strcmd = string.Format("{0}:{1}:{2}", -20, roleID, 0);                      // 魔晶不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -temChagLifeInfo.NeedMoJing, "转生", true, true);

                if (null != temChagLifeInfo.NeedGoodsDataList)
                {
                    // 检测需求道具
                    for (int i = 0; i < temChagLifeInfo.NeedGoodsDataList.Count; ++i)
                    {
                        GoodsData goodsData = Global.GetGoodsByID(client, temChagLifeInfo.NeedGoodsDataList[i].GoodsID);

                        if (null == goodsData) //没有找到物品
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -3, roleID, 0);                  // 没有所需物品
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        if (goodsData.GCount < temChagLifeInfo.NeedGoodsDataList[i].GCount)
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -4, roleID, 0);                  // 需物品数量不够
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                    // 扣除物品
                    for (int i = 0; i < temChagLifeInfo.NeedGoodsDataList.Count; ++i)
                    {
                        bool usedBinding = false;
                        bool usedTimeLimited = false;
                        if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                client, temChagLifeInfo.NeedGoodsDataList[i].GoodsID, temChagLifeInfo.NeedGoodsDataList[i].GCount, false, out usedBinding, out usedTimeLimited, true))
                        {
                            strcmd = string.Format("{0}:{1}:{2}", -3, roleID, 0);                  // 所需物品不足
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                }

                // 通知DB
                byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}", roleID, nChangeCount));
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));

                    strcmd = string.Format("{0}:{1}:{2}", -100, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                //解析指令
                string[] fieldsData = strData.Split(':');

                strcmd = "";
                if (fieldsData[1] == "-1")
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("转生时 DBServer发生错误, CMD={0}", (TCPGameServerCmds)nID));
                    strcmd = string.Format("{0}:{1}", -100, roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                ++client.ChangeLifeCount;
                //long nExperience = 0;

                // 保存经验
                long nExperienceNow = client.m_Experience;
#if false
                // 根据当前转生计数 以及当前的等级 计算出经验值
                long nExperience = 0;
                int nLevelNow = client.m_Level;
                int nLevelNeed = temChagLifeInfo.NeedLevel;

                if (nLevelNow > nLevelNeed)
                {
                    for (int i = nLevelNeed; i < nLevelNow; ++i)
                        nExperience += Data.LevelUpExperienceList[i];
                }

                // 加上现有的经验值
                nExperience += nExperienceNow;

                // 设置等级
                //client.m_Level = 1;
                client.m_Level = 80;

                // 设置 "升级获得的属性点" 因为它在转生时要扣除
                int nPropPointForLevelUp = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AddProPointForLevelUp);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AddProPointForLevelUp, 0);

                // 转生成功 -- DB保存住转生计数
                //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sChangeLifeCount, nChangeCount, true);

                // 奖励属性点
                int nOldPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint);
                int nNewPoint = nOldPoint + temChagLifeInfo.AwardPropPoint - nPropPointForLevelUp;  // 注意 - 扣除升级获得的属性点

                // 清空分配出去的属性点
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, nNewPoint);

                client.TotalPropPoint    = nNewPoint;
                client.PropStrength      = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrengthChangeless);
                client.PropIntelligence  = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligenceChangeless);
                client.PropDexterity     = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterityChangeless);
                client.PropConstitution  = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitutionChangeless);

                // 转生后 等级直接变成80级 增加属性点
                {
                    ChangeLifeAddPointInfo tmpChangeAddPointInfo = new ChangeLifeAddPointInfo();
                    tmpChangeAddPointInfo = Data.ChangeLifeAddPointInfoList[client.ChangeLifeCount];

                    // 奖励属性点
                    int nOldPoint1 = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint);
                    int nNewPoint1 = 0;
                    nNewPoint1 = 79 * tmpChangeAddPointInfo.AddPoint + nOldPoint1;
                    client.TotalPropPoint = nNewPoint1;

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, nNewPoint1, true);

                    int nPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AddProPointForLevelUp);
                    nNewPoint1 = 0;
                    nNewPoint1 = 79 * tmpChangeAddPointInfo.AddPoint + nPoint;
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AddProPointForLevelUp, nNewPoint1, true);
                }

                // 根据经验值 重新计数等级
                client.Experience = 0; // 注意--清零操作 用刚才取得的经验值nExperience去做重新升级的计算
                if (nExperience <= 0)
                {
                    GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, nExperience);
                }
                else
                {
                    GameManager.ClientMgr.ProcessRoleExperience(client, nExperience, false);
                }

                // 奖励属性点
                int nOldPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint);
                int nNewPoint = nOldPoint + temChagLifeInfo.AwardPropPoint;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, nNewPoint, true);
                client.TotalPropPoint = nNewPoint;

                nOldPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AddProPointForLevelUp);
                nNewPoint = nOldPoint * temChagLifeInfo.AwardPropPoint;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AddProPointForLevelUp, nNewPoint, true);
#else
                client.m_Level = 1;
                client.m_Experience = 0; // 注意--清零操作 用刚才取得的经验值nExperience去做重新升级的计算
                HuodongCachingMgr.ProcessGetUpLevelGift(client);
                if (nExperienceNow <= 0)
                {
                    GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, nExperienceNow);
                }
                else
                {
                    GameManager.ClientMgr.ProcessRoleExperience(client, nExperienceNow, false);
                }
#endif
                GameManager.ChangeLifeMgr.InitPlayerChangeLifePorperty(client);

                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                //通知组队中的其他队员自己的级别发生了变化
                GameManager.ClientMgr.NotifyTeamUpLevel(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, true);


                // 广播
                if (nChangeCount >= 2)
                    Global.BroadcastChangeLifeSuccess(client, nChangeCount);

                // 奖励物品
                if (temChagLifeInfo.AwardGoodsDataList != null)
                {
                    for (int i = 0; i < temChagLifeInfo.AwardGoodsDataList.Count; ++i)
                    {
                        Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, temChagLifeInfo.AwardGoodsDataList[i].GoodsID, temChagLifeInfo.AwardGoodsDataList[i].GCount,
                                                        0, "", 0, 1, 0, "", true, 1, /**/"转生奖励物品");
                    }
                }

                // 成就
                ChengJiuManager.OnRoleChangeLife(client);

                EventLogManager.AddRoleEvent(client, OpTypes.Trace, OpTags.ExecuteChangeLifeCount, LogRecordType.IntValue, nChangeCount);

               

                FundManager.FundChangeLife(client);

                // 每日活跃 [2/26/2014 LiaoWei]
                DailyActiveManager.ProcessDailyActiveChangeLife(client);

                //若视频聊天室开启 推送玩家
                VideoLogic.GetOrSendPlayerVideoStatus(client, client.RoleCommonUseIntPamams);

                strcmd = string.Format("{0}:{1}:{2}", 1, roleID, nChangeCount); // 1.1代表成功 2.roleid 3.转生计数
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        #endregion 转生

        #region 支持选择角色页获取角色的使用物品信息

        /// <summary>
        /// 获取角色的使用物品信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetUsingGoodsDataListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            try
            {
                return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 支持选择角色页获取角色的使用物品信息

        #region 属性加点

        /// Thực hiện việc cộng điểm cho nhân vật
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecutePropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //ENCODE DATA VỀ STRING
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {

                //GÓI TIN KHÔNG HỢP LỆ CHIM CÚT LUÔN
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nPropIndex = Convert.ToInt32(fields[1]);   //CHỈ SỐ J 
                int nPoint = Convert.ToInt32(fields[2]); // BAO NHIÊU ĐIỂM

                KPlayer client = GameManager.ClientMgr.FindClient(socket);

                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Không tìm thấy thông tin người chơi, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (nPoint <= 0)
                {
                    strcmd = string.Format("{0}:{1}", 1, roleID); // 1.1代表成功 2.roleid
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /// Điểm tiềm năng hiện tại
                int nRemainPoint = client.GetRemainPotential();
                

                if (nRemainPoint < nPoint) // THÔNG BÁO CHO NGƯỜI CHƠI KO ĐỦ ĐIỂM ĐỂ CỘNG
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);                     
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                switch (nPropIndex)
                {
                    case (int)UnitPropIndexes.Str:
                        {
                            client.AssignPotential(nPoint, 0, 0, 0, true);
                            
                        }
                        break;
                    case (int)UnitPropIndexes.Int:
                        {
                            client.AssignPotential(0, 0, 0, nPoint, true);
                        }
                        break;
                    case (int)UnitPropIndexes.Dex:
                        {
                            client.AssignPotential(0, nPoint, 0, 0, true);
                        }
                        break;
                    case (int)UnitPropIndexes.Sta:
                        {
                            client.AssignPotential(0, 0, nPoint, 0, true);
                        }
                        break;
                }
                // NOTIFY LẠI TRANG BỊ NẾU YÊU CẦU CÁC CHỈ SỐ STR ,DEV,CON cái này cần xem xét khả năng sau sẽ bỏ

                GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

          
                strcmd = string.Format("{0}:{1}", 1, roleID); // 1.1代表成功 2.roleid
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 属性加点

        #region 推荐属性加点

        /// Hàm khuyến nghị cộng điểm chưa rõ ở CLIENT sẽ khuyến nghị kiểu gì
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecuteRecommendPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            CSPropAddPoint cmdData = null;
         

            try
            {


                ProtoChecker.Instance().Check<CSPropAddPoint>(data, 0, count, socket.m_Socket);

                if (!CheckHelper.CheckTCPCmdHandle<CSPropAddPoint>(socket, nID, data, count, out cmdData))
                    return TCPProcessCmdResults.RESULT_FAILED;

                int roleID = cmdData.RoleID;
                int nStrengthPoint = cmdData.Strength;
                int nIntelligencePoint = cmdData.Intelligence;
                int nDexterityPoint = cmdData.Dexterity;
                int nConstitutionPoint = cmdData.Constitution;

                long nPoint = (long)nStrengthPoint + (long)nIntelligencePoint + (long)nDexterityPoint + (long)nConstitutionPoint;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";
                if (nStrengthPoint < 0 || nIntelligencePoint < 0 || nDexterityPoint < 0 || nConstitutionPoint < 0 || nPoint <= 0)
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);                      
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

            
                /// Điểm tiềm năng hiện có
                int nRemainPoint = client.GetRemainPotential();
                

           
                if (nRemainPoint < nPoint)
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);                     
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


          


                client.AssignPotential(nStrengthPoint, nDexterityPoint, nConstitutionPoint, nIntelligencePoint, true);
             

               


                GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                strcmd = string.Format("{0}:{1}", 1, roleID); // 1.1代表成功 2.roleid
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

              
                KT_TCPHandler.NotifyAttribute(client);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 推荐属性加点

        #region 清除属性加点

        /// TẢY ĐIỂM TIỀM NĂNG | TẠM ĐÓNG PACKET NÀY CẦN REWORK SAU NÀY
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecuteCleanPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                return TCPProcessCmdResults.RESULT_FAILED;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 请求清除属性加点操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryCleanPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                /*int nPropStrength = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrength) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrengthChangeless);

                int nPropIntelligence = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligence) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligenceChangeless);

                int nPropDexterity = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterity) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterityChangeless);

                int nPropConstitution = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitution) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitutionChangeless);*/

                int nValue = 0;
                nValue = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint)
                            - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrengthChangeless) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligenceChangeless)
                            - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterityChangeless) - Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitutionChangeless);
                //- (int)DBRoleBufferManager.GetTimeAddProp(client, BufferItemTypes.ADDTEMPStrength)
                //- (int)DBRoleBufferManager.GetTimeAddProp(client, BufferItemTypes.ADDTEMPIntelligsence)
                //- (int)DBRoleBufferManager.GetTimeAddProp(client, BufferItemTypes.ADDTEMPDexterity)
                //- (int)DBRoleBufferManager.ProcessTimeAddProp(client, BufferItemTypes.ADDTEMPConstitution);

                // 1.roleid 2.可洗点数
                strcmd = string.Format("{0}:{1}", roleID, nValue);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 清除属性加点

        #region 副本扫荡

        /// 副本扫荡操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExecuteFuBenCleanOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nMapID = Convert.ToInt32(fields[1]);
                int nFuMapID = Convert.ToInt32(fields[2]);
                int nExchangeMojing = Convert.ToInt32(fields[3]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                MapTypes maptype = Global.GetMapType(client.MapCode);
                if (maptype != MapTypes.Normal || client.WaitingNotifyChangeMap)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("当前地图禁止执行扫荡！")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";

                if (nExchangeMojing < 0 || nExchangeMojing > 1)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -301); // 参数错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 金币副本不能扫荡 [6/12/2014 LiaoWei]
                if (nMapID == (int)GoldCopySceneEnum.GOLDCOPYSCENEMAPCODEID)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -300); // 金币副本不能扫荡
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 经验副本不能扫荡 [8/11/2014 LiaoWei]
                if (Global.IsInExperienceCopyScene(nMapID))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -302); // 经验副本不能扫荡
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // VIP处理--只有VIP可以副本扫荡 [3/29/2014 LiaoWei]
                int nVipLev = client.VipLevel;
                if (nVipLev <= 0 && nVipLev > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -3); // 您还不是VIP不能扫荡
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nVIPNeedLev = (int)GameManager.systemParamsList.GetParamValueIntByName("VIPSaoDang");
                if (nVIPNeedLev > nVipLev)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -4); // 您VIP等级没有达到要求不能扫荡
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //获取副本的数据
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(nFuMapID, out systemFuBenItem))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                        Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("副本扫荡时错误, 没有找到副本配置")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    LogManager.WriteLog(LogTypes.SQL, string.Format("外挂?副本扫荡时错误, 没有找到副本配置, CMD={0}, IP={1}, RoleID={2}, nFuMapID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, nFuMapID));

                    strcmd = string.Format("{0}:{1}", roleID, 0);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(nFuMapID, nMapID);
                if (null == fuBenMapItem)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                        Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("副本扫荡时错误, 没有找到副本配置")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    LogManager.WriteLog(LogTypes.SQL, string.Format("外挂?副本扫荡时错误, 没有找到副本配置, CMD={0}, IP={1}, RoleID={2}, nFuMapID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, nFuMapID));

                    strcmd = string.Format("{0}:{1}", roleID, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                FuBenData tmpfubdata = Global.GetFuBenData(client, nFuMapID);
                if (null == tmpfubdata || tmpfubdata.QuickPassTimer > fuBenMapItem.MinSaoDangTimer * 60)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1); // 您的最短通关时间没有达到扫荡条件            
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nClientSec = tmpfubdata.QuickPassTimer;

                // 必须有进入副本的次数限额
                int nEnterNum = tmpfubdata.EnterNum;
                int nFinishNum = tmpfubdata.FinishNum;
                int enterNumber = systemFuBenItem.GetIntValue("EnterNumber");
                int finishNumber = systemFuBenItem.GetIntValue("FinishNumber");

                if ((enterNumber >= 0 && nEnterNum >= enterNumber) || (finishNumber >= 0 && nFinishNum >= finishNumber))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -2);  // 次数不够了
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 给玩家物品
                //CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(nFuMapID);
                //FuBenInfoItem fubenInfoItem = new FuBenInfoItem();

                int nMaxTime = fuBenMapItem.MaxTime * 60;
                int nKillNum = 0;// systemFuBenItem.GetIntValue("MonsterTotalNum");
                List<int> goodsID = new List<int>();

                FuBenTongGuanData fuBenTongGuanData = null;

                fuBenTongGuanData = Global.GiveCopyMapGiftForScore(client, nFuMapID, nMapID, nMaxTime, nClientSec, nKillNum, 0, fuBenMapItem.Experience, fuBenMapItem.Money1, fuBenMapItem);

                if (fuBenTongGuanData != null)
                {
                    //发送奖励到客户端
                    //TCPOutPacket tcpOutPacket1 = DataHelper.ObjectToTCPOutPacket<FuBenTongGuanData>(fuBenTongGuanData, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_FUBENPASSNOTIFY);

                    //if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket1)) { ; }
                }

                // 增加BOSS掉落物品奖励
                int nBossGoodsPackID = -1;
                nBossGoodsPackID = systemFuBenItem.GetIntValue("BossGoodsList");

                if (nBossGoodsPackID > 0)
                {
                    int maxFallCountByID = GameManager.GoodsPackMgr.GetFallGoodsMaxCount(nBossGoodsPackID);
                    if (maxFallCountByID <= 0)
                    {
                        maxFallCountByID = GoodsPackManager.MaxFallCount;
                    }

                    // 根据物品掉落ID获取要掉落的物品
                    List<GoodsData> goodsDataList = GameManager.GoodsPackMgr.GetGoodsDataList(client, nBossGoodsPackID, maxFallCountByID, 0);

                    List<GoodsData> listReally = new List<GoodsData>();
                    foreach (var item in goodsDataList)
                    {
                        if (!GoodsPackManager.IsFallTongQianGoods(item.GoodsID))
                            listReally.Add(item);
                    }

                    if (nExchangeMojing == 1)
                    {
                        if (listReally.Count > 0)
                            Global.EquipExchangeToMoJing(client, listReally);
                    }

                    if (!Global.CanAddGoodsDataList(client, listReally))
                    {
                        int nTotalGroup = 0;
                        nTotalGroup = listReally.Count / 5;

                        int nRemain = 0;
                        nRemain = listReally.Count % 5;

                        int nIndex = 0;

                        if (nTotalGroup > 0)
                        {
                            for (int i = 0; i < nTotalGroup; ++i)
                            {
                                List<GoodsData> goods = new List<GoodsData>();

                                for (int n = 0; n < 5; ++n)
                                {
                                    goods.Add(listReally[nIndex]);
                                    ++nIndex;
                                }
                                Global.UseMailGivePlayerAward2(client, goods, Global.GetLang("副本通关奖励"), Global.GetLang("副本通关奖励"));
                            }
                        }

                        if (nRemain > 0)
                        {
                            List<GoodsData> goods1 = new List<GoodsData>();
                            for (int i = 0; i < nRemain; ++i)
                            {
                                goods1.Add(listReally[nIndex]);
                                ++nIndex;
                            }
                            Global.UseMailGivePlayerAward2(client, goods1, Global.GetLang("副本通关奖励"), Global.GetLang("副本通关奖励"));
                        }

                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("副本扫荡奖励已发放到邮件中，请您及时领取")),
                                                                        GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox);

                    }
                    else
                    {
                        foreach (var item in listReally)
                        {
                            GoodsData goodsData = new GoodsData()
                            {
                                Id = -1,
                                GoodsID = item.GoodsID,
                                Using = 0,
                                Forge_level = item.Forge_level,
                                Starttime = "1900-01-01 12:00:00",
                                Endtime = Global.ConstGoodsEndTime,
                                Site = 0,
                              
                                Props = item.Props,
                                GCount = item.GCount,
                                Binding = item.Binding,
                           
                                BagIndex = 0,
                             
                                Strong = item.Strong,
                            
                            };
    
                            // ADD ĐỒ VÀO DB
                        }
                    }
                }

                Global.UpdateFuBenData(client, nFuMapID, 1, 1);

                //更新每日的通关副本的数量
                int nLev = -1;

                nLev = systemFuBenItem.GetIntValue("FuBenLevel");

                bool bActiveChengJiu = true;
                if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(nFuMapID) && GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(nFuMapID))
                    bActiveChengJiu = false;

                GameManager.ClientMgr.UpdateRoleDailyData_FuBenNum(client, 1, nLev, bActiveChengJiu);

                strcmd = string.Format("{0}:{1}", roleID, 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 副本扫荡

        #region 请求副本数据

        /// 客户端请求副本数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryFuBenInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            /*
            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }*/

            try
            {
                /*
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));

                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nMapID = Convert.ToInt32(fields[1]);
                int nFuMapID = Convert.ToInt32(fields[2]);*/

                ProtoChecker.Instance().Check<CS_QueryFuBen>(data, 0, count, socket.m_Socket);

                CS_QueryFuBen _queryCopy = null;
                if (!CheckHelper.CheckTCPCmdHandle(socket, nID, data, count, out _queryCopy))
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = _queryCopy.RoleId;
                int nMapID = _queryCopy.MapId;
                int nFuMapID = _queryCopy.FuBenId;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";
                string strName;
                int nBestTimer;
                int nClientSec = -1;
                int nEnterNum = 0;
                int nFinishNum = 0;

                string strDbCmd = string.Format("{0}:{1}", roleID, nFuMapID);

                string[] strRet = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYFUBENHISINFO, strDbCmd, client.ServerId);

                if (null != strRet && strRet.Length == 3 && Convert.ToInt32(strRet[0]) != -1)
                {
                    strName = strRet[1];
                    nBestTimer = Convert.ToInt32(strRet[2]);
                }
                else
                {
                    strName = "";
                    nBestTimer = -1;
                }

                FuBenData tmpfubdata = Global.GetFuBenData(client, nFuMapID);
                if (null != tmpfubdata)
                {
                    if (tmpfubdata.DayID == TimeUtil.NowDateTime().DayOfYear)
                    {
                        nClientSec = tmpfubdata.QuickPassTimer;
                        nEnterNum = tmpfubdata.EnterNum;
                        nFinishNum = tmpfubdata.FinishNum;
                    }
                    else
                    {
                        nClientSec = tmpfubdata.QuickPassTimer;
                        nEnterNum = 0;
                        nFinishNum = 0;
                    }
                }

                // 如果是剧情副本 检测前个副本是否完成以确定当前副本是否被开启 [7/14/2014 LiaoWei]
                bool bIsOpen = true;

                int nUpCopyID = -1;
                int nFinishNumber = -1;
                SystemXmlItem systemFuBenItem = null;
                if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(nFuMapID, out systemFuBenItem))
                {
                    nUpCopyID = systemFuBenItem.GetIntValue("UpCopyID");
                    nFinishNumber = systemFuBenItem.GetIntValue("FinishNumber");

                    if (nUpCopyID > 0 && nFinishNumber > 0)
                    {
                        /*FuBenData tmpfuben = null;
                        tmpfuben = Global.GetFuBenData(client, nUpCopyID);
                        if (null == tmpfuben || (null != tmpfuben && tmpfuben.FinishNum <= 0))
                            bIsOpen = false;*/
                        if (!Global.FuBenPassed(client, nUpCopyID))
                            bIsOpen = false;
                    }
                }

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", nFuMapID, nClientSec, nEnterNum, strName, nBestTimer, nFinishNum, bIsOpen);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 请求副本数据

        #region 2号攻击请求
        /// <summary>
        /// 2号物理攻击敌人并计算和通知伤害
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteAttack2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 9)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int roleX = Convert.ToInt32(fields[1]);
                int roleY = Convert.ToInt32(fields[2]);
                int enemy = Convert.ToInt32(fields[3]);
                int enemyX = Convert.ToInt32(fields[4]);
                int enemyY = Convert.ToInt32(fields[5]);
                int realEnemyX = Convert.ToInt32(fields[6]);
                int realEnemyY = Convert.ToInt32(fields[7]);
                int magicCode = Convert.ToInt32(fields[8]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 增加武器判断 [3/8/2014 LiaoWei]
                SystemXmlItem xmlMagic = null;
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(magicCode, out xmlMagic))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("未找到技能静态数据: Cmd={0}, RoleID={1}, skillID{2}", (TCPGameServerCmds)nID, client.RoleID, magicCode));
                    return TCPProcessCmdResults.RESULT_OK;
                }

             
                client.MoveAndActionNum++;

                GameMap gameMap = GameManager.MapMgr.DictMaps[client.MapCode];

                GameManager.ClientMgr.StopClientStoryboard(client);

                roleX = gameMap.CorrectWidthPointToGridPoint(roleX);
                roleY = gameMap.CorrectHeightPointToGridPoint(roleY);

                int oldX = 0, oldY = 0;

                // 先锁定
                oldX = client.PosX;
                oldY = client.PosY;
                if (Math.Abs(roleX - oldX) > 500 || Math.Abs(roleY - oldY) > 500)
                {
                    //LogManager.WriteLog(LogTypes.RoleTrace, string.Format("Attack2:toMapX={0},toMapY={1}", roleX, roleY));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                client.PosX = roleX;
                client.PosY = roleY;
                client.ReportPosTicks = 0;

                //只有新旧位置不一样的时候，才需要格子变换
                if (oldX != roleX || oldY != roleY)
                {
                    //将精灵放入格子
                    if (!GameManager.MapGridMgr.DictGrids[client.MapCode].MoveObject(oldX, oldY, roleX, roleY, client))
                    {
                        //LogManager.WriteLog(LogTypes.Warning, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.RoleID));
                        return TCPProcessCmdResults.RESULT_OK;
                    }

                    // 玩家进行了移动
                    //Global.GameClientMoveGrid(client);
                }

                //如果是隐身或者GM隐身模式下，则拒绝执行                                  // 对魔剑士技能释放的检查 [XSea 2015/4/30]
                if (client.HideSelf > 0 || client.HideGM > 0 || !GameManager.MagicSwordMgr.CanUseMagicOfMagicSword(client, magicCode))
                    return TCPProcessCmdResults.RESULT_OK;

                //处理精灵攻击动作
                //SpriteAttack.ProcessAttack2(client, enemy, enemyX, enemyY, realEnemyX, realEnemyY, magicCode);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 2号攻击请求

        #region 新手场景
        /// <summary>
        /// 完成新手场景
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteCompleteFlashSceneCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, client.ServerId))
                    return TCPProcessCmdResults.RESULT_FAILED;

                if (bytesData.Length != 2)
                    return TCPProcessCmdResults.RESULT_FAILED;

                strcmd = string.Format("{0}:{1}", roleID, bytesData[1]);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 新手场景

        #region 日常任务

        /// <summary>
        /// 刷新任务星级
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteRefurbishTaskStarLevelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int TaskID = Convert.ToInt32(fields[1]);
                int dbID = Convert.ToInt32(fields[2]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                TaskData taskData = Global.GetTaskDataByDbID(client, dbID);
                if (null == taskData)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -1, 0, 0);                   // 如果任务不存在
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem systemTask = null;
                //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(TaskID, out systemTask))
                //{
                //    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -3, 0, 0);                   // 配置错误
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                int taskClass = systemTask.GetIntValue("TaskClass");
                if (taskClass != (int)TaskClasses.DailyTask)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -4, 0, 0);                   // 任务类型不对
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (Data.TaskStarInfo.Count <= 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -3, 0, 0);                   // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 消耗银两
                int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("TaskStarInfosNeedJinBi");
                if (!Global.SubBindTongQianAndTongQian(client, nValue, "刷新任务星级"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -4, 0, 0);                   // 金币不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int starLevel = 5;
#if false
                TaskStarDataInfo TaskStarInfoTmp = null;
                int randPercent = Global.GetRandomNumber(1, 10001);

                int nNum = 0;
                int[] nArrPercent = new int[Data.TaskStarInfo.Count];

                for (int i = 0; i < Data.TaskStarInfo.Count; ++i)
                {
                    nArrPercent[i] = Data.TaskStarInfo[i].Probability + nNum;
                    nNum = nArrPercent[i];
                }

                for (int j = 0; j < nArrPercent.Length; ++j)
                {
                    if (randPercent <= nArrPercent[j])
                    {
                        TaskStarInfoTmp = Data.TaskStarInfo[j];
                        break;
                    }
                }


                if (TaskStarInfoTmp == null)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -2, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_OK;
                }
                starLevel = TaskStarInfoTmp.ID;
#endif
                string[] dbCmds = null;
                string strDbCmd = String.Format("{0}:{1}:{2}", roleID, dbID, starLevel);
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_EXECUTECHANGETASKSTARLEVEL, strDbCmd, out dbCmds, client.ServerId);

                strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, -10, TaskID, 0);
                if (TCPProcessCmdResults.RESULT_FAILED == dbRequestResult)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("刷新失败 DB错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (dbCmds.Length != 2 || Global.SafeConvertToInt32(dbCmds[1]) == -1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("刷新失败 DB错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                taskData.StarLevel = starLevel;
                strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, 1, TaskID, starLevel);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 一键完成日常跑环任务
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteCompleteDailyCircleTaskForOnceClickCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nNpcID = Convert.ToInt32(fields[1]);
                int extensionID = Convert.ToInt32(fields[2]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂一键完成日常任务, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // VIP处理 达到等级之后才能一键完成日常活动 [3/29/2014 LiaoWei]
                int nVipLev = client.VipLevel;

                //多余的判断,remove by tanglong 14/11/27
                //if (nVipLev < 0 || nVipLev > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                //{
                //    strcmd = string.Format("{0}:{1}", roleID, -21);             // 您还不是VIP 不能一键完成
                //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //    return TCPProcessCmdResults.RESULT_DATA;
                //}

                int nNeedVIPLev = 0;
                nNeedVIPLev = (int)GameManager.systemParamsList.GetParamValueIntByName("VIPRiChangYiJianWanCheng");
                if (nVipLev < nNeedVIPLev)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -22);             // 您VIP等级没达到要求 不能一键完成
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                NPCData npcData = new NPCData()
                {
                    MapCode = client.MapCode,
                    RoleID = roleID,
                    NPCID = nNpcID,
                    NewTaskIDs = null,
                    OperationIDs = null,
                    ExtensionID = extensionID,
                };

                SystemXmlItem systemNPC = null;
                if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -11);             // 系统没有找到该NPC
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 查询任务
                List<int> tasksList = null;
                if (!GameManager.NPCTasksMgr.SourceNPCTasksDict.TryGetValue(extensionID, out tasksList))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -12);             // 该NPC没有找到任务
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                List<int> paoHuanTaskIDList8 = new List<int>();
                for (int i = 0; i < tasksList.Count; i++)
                {
                    SystemXmlItem systemTask1 = null;
                    //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(tasksList[i], out systemTask1))
                    //{
                    //    continue;
                    //}
                    int taskClass = systemTask1.GetIntValue("TaskClass");

                    if ((int)TaskClasses.DailyTask == taskClass)
                    {
                        paoHuanTaskIDList8.Add(tasksList[i]);
                        continue;
                    }
                }

                if (paoHuanTaskIDList8.Count <= 0)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -13);             // 该NPC没有找到8号跑环任务
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /*int oldPaoHuanTaskID8 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.RoleID, 8);
                if (oldPaoHuanTaskID8 >= 0)
                {
                    if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID8))
                        oldPaoHuanTaskID8 = -1;
                }*/

                int nEnterNum = Global.MaxDailyTaskNumForMU;
                DailyTaskData dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, (int)TaskClasses.DailyTask);
                if (dailyTaskData != null)
                {
                    int maxNum = Global.GetMaxDailyTaskNum(client, (int)TaskClasses.DailyTask, dailyTaskData);
                    nEnterNum = maxNum;
                    if (maxNum <= 0)
                    {
                        strcmd = string.Format("{0}:{1}", roleID, -2);                   // 配置错误
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                    if (dailyTaskData.RecTime == today)
                    {
                        if (dailyTaskData.RecNum >= maxNum)
                        {
                            strcmd = string.Format("{0}:{1}", roleID, -10);             // 没有次数了
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                        nEnterNum = maxNum - dailyTaskData.RecNum;
                    }
                }

                // 元宝消耗
                int nValue = (int)(GameManager.systemParamsList.GetParamValueIntByName("CompleteTaskNeedYuanBao")); //提升到5星并完成的消耗
                nValue += (int)(GameManager.systemParamsList.GetParamValueIntByName("DoubleExp")); //用钻石双倍领双倍经验的消耗
                int needYuanBao = nEnterNum * nValue;
                if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "一键完日常任务"))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -3);                   // 元宝不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                SystemXmlItem systemTask2 = null;
                for (int i = 0; i < client.TaskDataList.Count; ++i)
                {
                    // 注意 如果有跨天的8号任务 要先把它设置为完成状态(数据库isdel字段) 如果是当天已经接取了8号跑环任务 也先完成之 然后再随机区剩余的次数...
                    //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(client.TaskDataList[i].DoingTaskID, out systemTask2))
                    //{
                    //    LogManager.WriteLog(LogTypes.Error, string.Format("出错了!!!，任务不存在, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}",
                    //                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.RoleID, client.TaskDataList[i].DoingTaskID));
                    //    strcmd = string.Format("{0}:{1}", roleID, -20);
                    //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    //    return TCPProcessCmdResults.RESULT_DATA;
                    //}

                    int nID1 = 0;
                    nID1 = client.TaskDataList[i].DoingTaskID;

                    int taskClass = systemTask2.GetIntValue("TaskClass");
                    if (taskClass == (int)TaskClasses.DailyTask)
                    {
                        int nMsgID = (int)TCPGameServerCmds.CMD_SPR_COMPTASK;

                        //int isMainTask = ((int)TaskClasses.MainTask == systemTask2.GetIntValue("TaskClass")) ? 1 : 0;
                        byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", roleID, nNpcID, nID1, client.TaskDataList[i].DbID, 0));
                        byte[] bytesData = null;

                        if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nMsgID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                            continue;
                        }

                        if (ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, nNpcID, extensionID, client.TaskDataList[i].DoingTaskID, client.TaskDataList[i].DbID, false, 2, true))
                            --nEnterNum;

                        //++nIndex;

                        //SysConOut.WriteLine("一键完成任务1  任务ID{0}！！！", nID1);
                    }
                }

                // 随机出x个任务
                SystemXmlItem systemTask = null;
                for (int i = 0; i < nEnterNum; ++i)
                {
                    int nTaskID = Global.GetDailyCircleTaskIDBaseChangeLifeLev(client);
                    if (nTaskID != -1)
                    {
                        //if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(nTaskID, out systemTask))
                        //{
                        //    strcmd = string.Format("{0}:{1}", roleID, -1);                   // 如果任务不存在
                        //    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        //    return TCPProcessCmdResults.RESULT_DATA;
                        //}
                        if (systemTask.GetIntValue("TaskClass") != (int)TaskClasses.DailyTask)
                        {
                            strcmd = string.Format("{0}:{1}", roleID, -2);                   // 配置错误
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        // 给任务
                        TaskData tmpTask = Global.TakeNewTaskForDailyCircleTask(tcpMgr, socket, tcpClientPool, pool, client, nTaskID, nNpcID, (int)TCPGameServerCmds.CMD_SPR_NEWTASK);

                        // 完成任务
                        if (tmpTask.DbID < 0 || Global.GetTaskDataByDbID(client, tmpTask.DbID) == null)
                            continue;

                        int nMsgID = (int)TCPGameServerCmds.CMD_SPR_COMPTASK;
                        //int isMainTask = ((int)TaskClasses.MainTask == systemTask.GetIntValue("TaskClass")) ? 1 : 0;
                        byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", roleID, nNpcID, nTaskID, tmpTask.DbID, 0));
                        byte[] bytesData = null;
                        if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nMsgID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                            continue;
                        }

                        Int32 length = BitConverter.ToInt32(bytesData, 0);
                        string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                        //解析客户端的指令
                        string[] fieldsData = strData.Split(':');

                        strcmd = "";
                        if (fieldsData.Length < 3 || fieldsData[2] == "-1") //添加出错
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时 DBServer发生错误, CMD={0}", (TCPGameServerCmds)nID));
                            continue;
                        }
                        else
                        {
                            //if (isMainTask > 0 && nTaskID > client.MainTaskID) //这里肯定不是主线任务，remove by tanglong 14/11/27
                            //    client.MainTaskID = nTaskID;

                            //如果任务已经顺利完成，则根据任务的奖励给予用户
                            bool nRet = ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, nNpcID, extensionID, nTaskID, tmpTask.DbID, false, 2, true);

                            /*if (nRet) // 测试代码 保留
                            {
                                ++nIndex;
                                SysConOut.WriteLine("一键完成任务2  任务ID{0}！！！", nTaskID);
                            }*/
                        }

                    }
                }

                strcmd = string.Format("{0}:{1}", roleID, 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        #endregion 日常跑环任务

      

        #region 血色堡垒
        /// <summary>
        /// 请求血色堡垒基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryBloodCastleInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nDate = TimeUtil.NowDateTime().DayOfYear;                // 当前时间
                int nType = (int)SpecialActivityTypes.BloodCastle; // 血色堡垒

                int nCount = Global.QueryDayActivityEnterCountToDB(client, client.RoleID, nDate, nType);

                int nSelfValue = client.BloodCastleAwardTotalPoint;

                int nTotal = GameManager.BloodCastleCopySceneMgr.m_nTotalPointValue;//BloodCastleManager.m_nTotalPointValue;

                string sFinalName = null;
                string sName = GameManager.BloodCastleCopySceneMgr.m_sTotalPointName;//BloodCastleManager.m_sTotalPointName;

                if (!string.IsNullOrEmpty(sName))
                    sFinalName = sName;//Global.FormatRoleName(client, sName);

                // 1.成功 2.自己id 3.进入血色堡垒的次数 4.自己的积分 5.最高积分 6.名字 7.奖励分值
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", 1, roleAID, nCount, nSelfValue, nTotal, sFinalName, client.BloodCastleAwardPoint);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 领取血色堡垒奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetBloodCastleAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);
                int nValue = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nNeedMoney = 0;
                int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("BloodCastleExp");
                if (nValue == 1)
                {
                    nNeedMoney = 0;
                }
                else if (nValue == 2)
                {
                    nNeedMoney = nArry[0];
                }
                else if (nValue == 3)
                {
                    nNeedMoney = nArry[1];
                }
                else
                {
                    strcmd = string.Format("{0}:{1}", -2, roleAID);   // 客户端发的索引不对
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (nNeedMoney > 0)
                {
                    int nMoney = client.UserMoney;
                    if (nMoney < nNeedMoney)
                    {
                        strcmd = string.Format("{0}:{1}", -1, roleAID);   // 钱不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int FuBenSeqID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.BloodCastleFuBenSeqID);

                int nSceneID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.BloodCastleSceneid);
                int nFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.BloodCastleSceneFinishFlag);

                //如果已经获取过一次奖励，则不再提示奖励
                //查找角色的ID+副本顺序ID对应地图编号的奖励领取状态
                int awardState = GameManager.CopyMapMgr.FindAwardState(client.RoleID, FuBenSeqID, nSceneID);
                if (awardState > 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(
                        Global._TCPManager.MySocketListener,
                        Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("当前副本地图的奖励只能领取一次")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }
                else
                {
                    if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedMoney, "领取血色城堡奖励"))
                    {
                        strcmd = string.Format("{0}:{1}", -1, roleAID);   // 钱不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.BloodCastleCopySceneMgr.GiveAwardBloodCastCopyScene(client, nValue);
                }

                // 1.成功 2.自己id 
                strcmd = string.Format("{0}:{1}", 1, roleAID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 血色堡垒

        #region 装备追加
        /// <summary>
        /// 客户端执行装备追加操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEquipAppendPropCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 消息字段 1.roleid 2.需要追加的物品id 3.保护符    --  暂时不考虑 这个 以后可能加上 4.幸运宝石(策划文档里面没有 但是仍然保留它 防止以后要增加)

                int roleID = Convert.ToInt32(fields[0]);   // 角色ID
                int id = Convert.ToInt32(fields[1]);   // 需要强化的物品id
                int nProtectStone = Convert.ToInt32(fields[2]);  // 保护石头id, 追加是没有保护石的，所以不用考虑替换，chenjingui
                //int nLuckyStone = Convert.ToInt32(fields[3]);   // 幸运宝石id
                int nUseBindItemFirst = Convert.ToInt32(fields[3]);   // 是否先扣除绑定物品

                // 服务器执行检测有没有必须的物品 -- 生命宝石

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //功能是否开放
                bool isOpen = GlobalNew.IsGongNengOpened(client, GongNengIDs.EquipAppend);
                if (!isOpen)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                            StringUtil.substitute(Global.GetLang("功能未开放")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, id, 0, 0);        // 没有找到要追加的物品
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 从物品包中获取要追加的装备
                GoodsData goodsData = Global.GetGoodsByDbID(client, id);
                if (null == goodsData) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -1, roleID, id, 0, 0);        // 没有找到要追加的物品
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /*if (goodsData.Using > 0 )
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -10, roleID, id, 0, 0);        // 物品正在使用中 不能追加
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                // 类型检测
                int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                if (nCategories < (int)ItemCategories.TouKui || (nCategories > (int)ItemCategories.JieZhi && nCategories
                     < (int)ItemCategories.WuQi_Jian) || nCategories > (int)ItemCategories.WuQi_NuJianTong)  //只有0-6、11-21的道具可以被强化、追加、洗炼、传承
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -8, roleID, id, 0, 0);                        // 该物品不能追加
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 检测保护石
                if (nProtectStone > 0 && Global.GetProtectStoneGoodsIndexForEquipAppendProp(nProtectStone) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -2, roleID, id, 0, 0);        // 保护石错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nMaxLevel = 0;
                {
                    int nExcellenceNum = Global.GetEquipExcellencePropNum(goodsData);
                    if (nExcellenceNum == 0)
                        nMaxLevel = 20;
                    else if (nExcellenceNum >= 1 && nExcellenceNum <= 2)
                        nMaxLevel = 40;
                    else if (nExcellenceNum >= 3 && nExcellenceNum <= 4)
                        nMaxLevel = 60;
                    else if (nExcellenceNum >= 5 && nExcellenceNum <= 6)
                        nMaxLevel = 80;
                    else // 以后还会有新的条件的...
                        nMaxLevel = 80;
                }

                // 检测追加等级
               

                // 执行材料替换
                int useGoodsID = Global.GetEquipAppendPropNeedStoneGoodsList(goodsData);
                int needGoodsCnt = Global.GetEquipAppendPropNeedStoneGoodsNum(goodsData);
                if (useGoodsID < 0 || needGoodsCnt < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -6, roleID, id, 0, 0);        // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                client._ReplaceExtArg.Reset();
               
                if (GoodsReplaceManager.Instance().NeedCheckSuit(nCategories))
                {
                    client._ReplaceExtArg.CurrEquipSuit = Global.GetEquipGoodsSuitID(goodsData.GoodsID);
                }

                GoodsReplaceResult replaceRet = GoodsReplaceManager.Instance().GetReplaceResult(client, useGoodsID);
                if (replaceRet == null || replaceRet.TotalGoodsCnt() < needGoodsCnt)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -7, roleID, id, 0, 0);    // 所需物品数量不足
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //读取所需银两
                int needYinLiang = Global.GetEquipAppendPropNextLevelYinLiang(goodsData);
                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); // 判断银两是否折半
                if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "装备追加"))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -3, roleID, id, 0, 0);        // 钱不够
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                List<GoodsReplaceResult.ReplaceItem> realCostList = new List<GoodsReplaceResult.ReplaceItem>();
                if (nUseBindItemFirst >= 1)
                {
                    realCostList.AddRange(replaceRet.BindList);
                    realCostList.Add(replaceRet.OriginBindGoods);
                    realCostList.AddRange(replaceRet.UnBindList);
                    realCostList.Add(replaceRet.OriginUnBindGoods);
                }
                else
                {
                    realCostList.AddRange(replaceRet.UnBindList);
                    realCostList.Add(replaceRet.OriginUnBindGoods);
                    realCostList.AddRange(replaceRet.BindList);
                    realCostList.Add(replaceRet.OriginBindGoods);
                }

                int stillNeedCnt = needGoodsCnt;
                bool bRealUseBinding = false;
                foreach (var item in realCostList)
                {
                    if (item.GoodsCnt <= 0) continue;

                    int realCostCnt = Math.Min(stillNeedCnt, item.GoodsCnt);
                    if (realCostCnt <= 0) break;

                    bool usedBinding_just_placeholder = false;
                    bool usedTimeLimited_just_placeholder = false;
                    bool bFailed = false;
                    if (item.IsBind)
                    {
                        bRealUseBinding = true;
                        if (!GameManager.ClientMgr.NotifyUseBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt,
                            false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder))
                        {
                            bFailed = true;
                        }
                    }
                    else
                    {
                        if (!GameManager.ClientMgr.NotifyUseNotBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt,
                            false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder))
                        {
                            bFailed = true;
                        }
                    }

                    stillNeedCnt -= item.GoodsCnt;

                    if (bFailed)
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -200, roleID, id, 0, 0);        // 物品扣除失败
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                if (nProtectStone > 0)
                {
                    // 这个现在并没有使用，遗留的  chenjingui
                    bool usedBinding1 = false;
                    bool usedTimeLimited1 = false;

                    GoodsData goodsInfo = null;
                    goodsInfo = Global.GetGoodsByID(client, nProtectStone);

                    if (goodsInfo == null || !GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsInfo.GoodsID, 1, false, out usedBinding1, out usedTimeLimited1))
                    {
                        strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -200, roleID, id, 0, 0);        // 物品扣除失败
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int nBindProp = goodsData.Binding;
                if (nBindProp <= 0 && bRealUseBinding)
                {
                    // 以前非绑定，现在使用了绑定材料
                    nBindProp = 1;
                }

                int oldUsing = goodsData.Using;
                //如果是佩戴在身上，则先脱下来
                if (goodsData.Using > 0)
                {
                    //先强迫修改为不使用装备，记住后边改回去
                    goodsData.Using = 0;

                 
                }

                //开始追加
                //if (Global.StartEquipAppendProp(client, goodsData)) // 追加成功
                {
                
                    // 追加成功(6级以上提示)
                    Global.BroadcastEquipAppendPropOk(client, goodsData);

                    // 第一次追加成就
                    ChengJiuManager.OnFirstAppend(client);

                    // 成就
               

                    // 每日活跃 [2/26/2014 LiaoWei]
                    DailyActiveManager.ProcessDailyActiveEquipAppend(client);

                    //[bing] 刷新客户端活动叹号
                    if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAddon))
                    {
                        client._IconStateMgr.AddFlushIconState((ushort)ActivityTipTypes.JieRiActivity, client._IconStateMgr.IsAnyJieRiTipActived());
                        client._IconStateMgr.SendIconStateToClient(client);
                    }
                }
                /*else
                {
                    // 追加失败
                    // 如果有保护石 追加减1 否则就清0
                    
                    // 追加改造 [5/8/2014 LiaoWei]
                    if (bSubProStone)
                    {
                        //--goodsData.AppendPropLev;
                        //if (goodsData.AppendPropLev < 0)
                        //    goodsData.AppendPropLev = 0;
                    }
                    else
                    {
                        --goodsData.AppendPropLev;
                        if (goodsData.AppendPropLev < 0)
                            goodsData.AppendPropLev = 0;
                        //goodsData.AppendPropLev = 0;
                    }   

                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", 0, roleID, id, goodsData.AppendPropLev, nBindProp);
                }*/

                //修改装备的数据库
                //向DBServer请求修改物品
                string[] dbFields = null;
                string strDbCmd = Global.FormatUpdateDBGoodsStr(client.RoleID, goodsData.Id, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", nBindProp, "*", "*", "*", "*", "*", 1, "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED || null == dbFields)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -100, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", -100, roleID, id, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                Global.ModifyGoodsBindPorp(client, id, nBindProp);

                if (oldUsing != goodsData.Using)
                {
                    goodsData.Using = oldUsing;

                  
                }

                if (goodsData.Using > 0)
                {
                    // 七日活动 佩戴[1]个追[0]装备
                    SevenDayGoalEventObject evObj_peidai_append = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiAppendEquip);
                    GlobalEventSource.getInstance().fireEvent(evObj_peidai_append);
                }

                // 七日活动，最高追加等级
                SevenDayGoalEventObject evObj_append_lvl = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.AppendEquipLevel);
            
                GlobalEventSource.getInstance().fireEvent(evObj_append_lvl);

                // 七日活动，追加次数
                SevenDayGoalEventObject evObj_append_times = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.AppendEquipTimes);
                GlobalEventSource.getInstance().fireEvent(evObj_append_times);

                //写入角色物品的得失行为日志(扩展)
                Global.ModRoleGoodsEvent(client, goodsData, 0, "追加");
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "追加");

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 精灵装备追加传承
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        

        /// <summary>
        /// 精灵装备追加传承
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryCopyTeamDamageInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (Global.IsInTeamCopyScene(client.MapCode) && client.CopyMapID >= 0)
                {
                    CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.CopyMapID);
                    if (null != copyMap)
                    {
                        GameManager.CopyMapMgr.BroadcastCopyMapDamageInfo(copyMap);
                    }
                }
                if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(client.MapCode))
                {
                    CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.CopyMapID);
                    if (null != copyMap)
                    {
                        GameManager.CopyMapMgr.SendCopyMapMaxDamageInfo(client, copyMap, GameManager.GuildCopyMapMgr.MaxDamageSendCount);
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 装备追加

        #region  阵营战场

        /// <summary>
        /// 请求阵营战场基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryCampBattleInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //int nDate = TimeUtil.NowDateTime().DayOfYear;                // 当前时间
                //int nCount = Global.QueryBloodCastleEnterCountToDB(client, client.RoleID, nDate, nType);

                //int nSelfValue = Global.QueryBloodCastleTotalPointInfoToDB(3);
                int nSelfValue = client.CampBattleTotalPoint;

                int nTotal = BattleManager.BattleMaxPoint;

                string sFinalName = null;

                string sName = BattleManager.BattleMaxPointName;

                if (!string.IsNullOrEmpty(sName))
                    sFinalName = Global.FormatRoleName(client, sName);

                // 1.自己id 2.自己的积分 3.最高积分 4.名字
                strcmd = string.Format("{0}:{1}:{2}:{3}", roleAID, nSelfValue, nTotal, sFinalName);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 阵营战场

        #region 恶魔广场

        /// <summary>
        /// 请求恶魔广场基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryDaimoSquareInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nDate = TimeUtil.NowDateTime().DayOfYear;                // 当前时间
                int nCount = Global.QueryDayActivityEnterCountToDB(client, client.RoleID, nDate, (int)SpecialActivityTypes.DemoSque);

                //int nSelfValue = Global.QueryBloodCastleTotalPointInfoToDB(3);
                int nSelfValue = client.DaimonSquarePointTotalPoint;

                //int nTotal = DaimonSquareSceneManager.m_nDaimonSquareMaxPoint;
                int nTotal = GameManager.DaimonSquareCopySceneMgr.m_nDaimonSquareMaxPoint;

                string sFinalName = null;

                //string sName = DaimonSquareSceneManager.m_sDaimonSquareMaxPointName;
                string sName = GameManager.DaimonSquareCopySceneMgr.m_nDaimonSquareMaxName;

                if (!string.IsNullOrEmpty(sName))
                    sFinalName = sName;// Global.FormatRoleName(client, sName);

                // 1.自己id 2.自己的积分 3.进入次数 4.最高积分 5.名字 6.奖励分值
                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", roleAID, nSelfValue, nCount, nTotal, sFinalName, client.DaimonSquarePoint);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 领取恶魔广场奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetDaimonsquareAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);
                int nValue = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nNeedMoney = 0;
                int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("BloodCastleExp"); ;
                if (nValue == 1)
                {
                    nNeedMoney = 0;
                }
                else if (nValue == 2)
                {
                    nNeedMoney = nArry[0];
                }
                else if (nValue == 3)
                {
                    nNeedMoney = nArry[1];
                }
                else
                {
                    strcmd = string.Format("{0}:{1}", -2, roleAID);   // 客户端发的索引不对
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (nNeedMoney > 0)
                {
                    int nMoney = client.UserMoney;
                    if (nMoney < nNeedMoney)
                    {
                        strcmd = string.Format("{0}:{1}", -1, roleAID);   // 钱不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                int FuBenSeqID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DaimonSquareFuBenSeqID);

                int nSceneID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DaimonSquareSceneid);
                int nFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DaimonSquareSceneFinishFlag);
                int nTimer = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DaimonSquareSceneTimer);

                //如果已经获取过一次奖励，则不再提示奖励
                //查找角色的ID+副本顺序ID对应地图编号的奖励领取状态
                int awardState = GameManager.CopyMapMgr.FindAwardState(client.RoleID, FuBenSeqID, nSceneID);
                if (awardState > 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(
                        Global._TCPManager.MySocketListener,
                        Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("当前副本地图的奖励只能领取一次")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }
                else
                {
                    if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedMoney, "领取恶魔广场奖励"))
                    {
                        strcmd = string.Format("{0}:{1}", -1, roleAID);   // 钱不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.DaimonSquareCopySceneMgr.GiveAwardDaimonSquareCopyScene(client, nValue);
                }

                // 1.成功 2.自己id 
                strcmd = string.Format("{0}:{1}", 1, roleAID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 恶魔广场

        #region 每日在线奖励相关

        /// <summary>
        /// 更新玩家的每日在线信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUpdateEverydayOnlineAwardGiftInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 0.roleid 1.每日在线时间 2.每日在线奖励到了第几步 3.抽中的物品
                strcmd = string.Format("{0}:{1}:{2}:{3}", client.RoleID, client.DayOnlineSecond, client.MyHuodongData.EveryDayOnLineAwardStep, client.MyHuodongData.EveryDayOnLineAwardGoodsID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 取得每日在线奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetEveryDayOnLineAwardGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                // 说明 --  客户端抽奖后 有转盘的动画 要停下来 必须依靠服务器回抽到将的物品 所以改成2条消息 [3/27/2014 LiaoWei]
                //          第一条消息 nTimer为1 服务器把抽中的奖品ID发给客户端 第二天消息 nTimer为2 服务器把物品给玩家 并且置抽奖的状态

                int roleID = Convert.ToInt32(fields[0]);
                int nTimer = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int[] nGoodsID = { -1, -1, -1, -1, -1, -1, -1 };

                int nRet = -1;
                int nStep = -1;

                int nDate = TimeUtil.NowDateTime().DayOfYear;

                List<GoodsData> goodsDataList = new List<GoodsData>();
                if (nTimer == 1)
                {
                    nStep = HuodongCachingMgr.ProcessGetEveryDayOnLineAwardGift2(client, goodsDataList, out nRet);

                    client.DailyOnLineAwardGift = goodsDataList;

                    int nCount = 0;
                    nCount = goodsDataList.Count;

                    if (goodsDataList != null && goodsDataList.Count != 0)
                    {
                        for (int n = 0; n < goodsDataList.Count; ++n)
                        {
                            if (goodsDataList[n].GoodsID > 0)
                                nGoodsID[n] = goodsDataList[n].GoodsID;
                        }
                    }

                    // 0.roleid 1.成功与否 2.抽奖到了第几步 3.在线时间 4.goodsid1 5.goodsid2 6.goodsid3 7.goodsid4 8.goodsid5 9.goodsid6 10.goodsid7
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", roleID, nRet, nStep, client.DayOnlineSecond, nGoodsID[0],
                                            nGoodsID[1], nGoodsID[2], nGoodsID[3], nGoodsID[4], nGoodsID[5], nGoodsID[6]);


                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else if (nTimer == 2)
                {
                    goodsDataList = client.DailyOnLineAwardGift;
                    if (goodsDataList != null && goodsDataList.Count > 0)
                    {
                        for (int i = 0; i < goodsDataList.Count; i++)
                        {
                            //ADD ĐỒ VÀO DB
                           

                            // 如果已经跨天了 则从第一个奖励开始检测
                            if (client.MyHuodongData.GetEveryDayOnLineAwardDayID != nDate)
                            {
                                client.MyHuodongData.EveryDayOnLineAwardStep = 0;
                                client.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;
                            }

                            nGoodsID[i] = goodsDataList[i].GoodsID;

                            //设置领取标志
                            client.MyHuodongData.EveryDayOnLineAwardStep += 1;
                        }
                    }

                    bool bGoOn = true;
                    string strAwardID = "";
                    string[] strOldId = null;

                    // 这里其实是没用的 ChenXiaojun
                    if (client.MyHuodongData.EveryDayOnLineAwardGoodsID != null && client.MyHuodongData.EveryDayOnLineAwardGoodsID.Length > 0)
                    {
                        strOldId = client.MyHuodongData.EveryDayOnLineAwardGoodsID.Split(',');

                        if (strOldId != null && strOldId.Length > 0)
                        {
                            for (int n = 0; n < strOldId.Length; n++)
                            {
                                if (Global.SafeConvertToInt32(strOldId[n]) > 0)
                                {
                                    strAwardID += strOldId[n];
                                    strAwardID += ',';
                                    bGoOn = false;
                                }
                                else
                                    break;
                            }

                            for (int i = 0; i < goodsDataList.Count; ++i)
                            {
                                strAwardID += goodsDataList[i].GoodsID;
                                strAwardID += ',';
                                bGoOn = false;
                            }
                        }
                    }

                    if (bGoOn)
                        strAwardID = string.Format("{0},{1},{2},{3},{4},{5},{6}", nGoodsID[0], nGoodsID[1], nGoodsID[2], nGoodsID[3], nGoodsID[4], nGoodsID[5], nGoodsID[6]);

                    client.MyHuodongData.EveryDayOnLineAwardGoodsID = strAwardID;

                    client.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;

                    //数据库命令更新活动数据事件
                    GameDb.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);

                    // 发送活动数据给客户端
                    GameManager.ClientMgr.NotifyHuodongData(client);

                    // 刷新“每日在线”图标感叹号状态
                    if (client._IconStateMgr.CheckFuMeiRiZaiXian(client))
                    {
                        client._IconStateMgr.SendIconStateToClient(client);
                    }

                    nRet = 1;
                }

                //nRet = HuodongCachingMgr.ProcessGetEveryDayOnLineAwardGift(client, goodsDataList, index);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 更新玩家的连续登陆信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUpdateEverydaySeriesLoginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 0.roleid 1.连续登陆的天数 2.连续登陆奖励到了第几步
                strcmd = string.Format("{0}:{1}:{2}:{3}", client.RoleID, Global.GMin(client.SeriesLoginNum, 7), client.MyHuodongData.SeriesLoginGetAwardStep, client.MyHuodongData.SeriesLoginAwardGoodsID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// Nhần quà đăng nhập
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetSeriesLoginAwardGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

            
                int roleID = Convert.ToInt32(fields[0]);
                int nTimer = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nDay = TimeUtil.NowDateTime().DayOfYear;
                if (client.MyHuodongData.SeriesLoginAwardDayID == nDay && client.MyHuodongData.SeriesLoginGetAwardStep == client.SeriesLoginNum)
                {
                    // 今天没有抽奖次数了
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("今天已经抽过奖了")),
                                                                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int[] nGoodsID = { -1, -1, -1, -1, -1, -1, -1 };

                int nRet = -1;
                int nStep = -1;

                List<GoodsData> goodsDataList = new List<GoodsData>();

                if (nTimer == 1)
                {
                    nStep = HuodongCachingMgr.ProcessGetSeriesLoginGift2(client, goodsDataList);

                    client.SeriesLoginAwardGift = goodsDataList;

                    if (goodsDataList != null && goodsDataList.Count != 0)
                    {
                        for (int n = 0; n < goodsDataList.Count; ++n)
                        {
                            if (goodsDataList[n].GoodsID > 0)
                                nGoodsID[n] = goodsDataList[n].GoodsID;
                        }
                    }

             
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", roleID, nRet, nStep, client.SeriesLoginNum,
                                                                                        nGoodsID[0], nGoodsID[1], nGoodsID[2], nGoodsID[3], nGoodsID[4], nGoodsID[5], nGoodsID[6]);

               

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else if (nTimer == 2)
                {
                    goodsDataList = client.SeriesLoginAwardGift;
                    if (goodsDataList != null && goodsDataList.Count > 0)
                    {
                        for (int i = 0; i < goodsDataList.Count; i++)
                        {
                             // ADD ĐỒ VÀO DB
                        
                            int nDate = TimeUtil.NowDateTime().DayOfYear;
                            nGoodsID[i] = goodsDataList[i].GoodsID;
                            if (client.MyHuodongData.GetEveryDayOnLineAwardDayID != nDate)
                            {
                                client.MyHuodongData.EveryDayOnLineAwardStep = 0;
                                client.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;
                            }

                            ++client.MyHuodongData.SeriesLoginGetAwardStep;
                        }

                        bool bGoOn = true;
                        string strAwardID = "";
                        string[] strOldId = null;

                        // 这里其实是没用的 ChenXiaojun
                        if (client.MyHuodongData.SeriesLoginAwardGoodsID != null && client.MyHuodongData.SeriesLoginAwardGoodsID.Length > 0)
                        {
                            strOldId = client.MyHuodongData.SeriesLoginAwardGoodsID.Split(',');

                            if (strOldId != null && strOldId.Length > 0)
                            {
                                for (int n = 0; n < strOldId.Length; n++)
                                {
                                    if (Global.SafeConvertToInt32(strOldId[n]) > 0)
                                    {
                                        strAwardID += strOldId[n];
                                        strAwardID += ',';
                                        bGoOn = false;
                                    }
                                    else
                                        break;
                                }

                                for (int i = 0; i < goodsDataList.Count; ++i)
                                {
                                    strAwardID += goodsDataList[i].GoodsID;
                                    strAwardID += ',';
                                    bGoOn = false;
                                }
                            }
                        }

                        if (bGoOn)
                            strAwardID = string.Format("{0},{1},{2},{3},{4},{5},{6}", nGoodsID[0], nGoodsID[1], nGoodsID[2], nGoodsID[3], nGoodsID[4], nGoodsID[5], nGoodsID[6]);

                        client.MyHuodongData.SeriesLoginAwardGoodsID = strAwardID;
                    }

                    client.MyHuodongData.SeriesLoginAwardDayID = nDay;

                    
                    GameDb.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);


                    //发送活动数据给客户端
                    GameManager.ClientMgr.NotifyHuodongData(client);

                    // 刷新“连续登陆”图标感叹号状态
                    if (client._IconStateMgr.CheckFuLiLianXuDengLu(client))
                    {
                        client._IconStateMgr.SendIconStateToClient(client);
                    }

                    nRet = 1;
                }

                //nRet = HuodongCachingMgr.ProcessGetSeriesLoginGift(client, goodsDataList, index);

                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }


        #endregion 每日在线奖励相关

        #region 单独更新拾取设置

        /// <summary>
        /// 单独更新的拾取设置
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteUpdateGetThingsFlagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int flag = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //自动挂机时拾取的设置
                client.AutoFightGetThings = flag;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.FightGetThings, flag, true);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 单独更新的拾取设置
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteEffectHideFlagsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            int[] cmdData = null;

            try
            {
                cmdData = DataHelper.BytesToObject<int[]>(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                if (cmdData != null && cmdData.Length > 0)
                {
                    KPlayer client = GameManager.ClientMgr.FindClient(socket);
                    if (null != client)
                    {
                        client.ClientEffectHideFlag1 = cmdData[0];
                    }
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 单独更新拾取设置

        #region 魔晶兑换

        /// <summary>
        /// 请求魔晶兑换信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults PorcessMoJingExchangeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Global.QueryToDBRoleMoJingExchangeInfo(client);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.MoJingExchangeInfo, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 魔晶兑换
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteExchangeMoJingAndQiFuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nId = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SystemXmlItem systemExChangeItem = null;
                if (!GameManager.SystemExchangeMoJingAndQiFu.SystemXmlItemDict.TryGetValue(nId, out systemExChangeItem))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("根据id定位魔晶和祈福兑换配置项失败, id={0}", nId));

                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";

                // 兑换次数是否已达上限
                int nMax = systemExChangeItem.GetIntValue("DayDuiHuanNum");
                int nMoJingExchangeCount = 0;

                if (nMax > 0)
                {
                    //if (!client.MoJingExchangeInfo.TryGetValue(nId, out nMoJingExchangeCount))
                    //    client.MoJingExchangeInfo.Add(nId, 1);

                    Global.QueryToDBRoleMoJingExchangeInfo(client);

                    if (client.MoJingExchangeInfo == null)
                        client.MoJingExchangeInfo = new Dictionary<int, int>();

                    // 只需要读，不需要额外加1 ChenXiaojun
                    client.MoJingExchangeInfo.TryGetValue(nId, out nMoJingExchangeCount);

                    if (nMax > 0 && nMoJingExchangeCount >= nMax)
                    {
                        strcmd = string.Format("{0}:{1}", roleID, -10);  // 今日没有次数了
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                bool nRet = true;
                int nNeedMoJing = systemExChangeItem.GetIntValue("MoJing");
                int nNeedQiFuJiFen = systemExChangeItem.GetIntValue("QiFuJiFen");
                int nNeedZhanGong = systemExChangeItem.GetIntValue("ZhanGong");
                int nNeedZhanMengLevel = systemExChangeItem.GetIntValue("NeedZhanMengLevel");
                int nNeedPetJiFen = systemExChangeItem.GetIntValue("PetJiFen");
                int nNeedTianTiRongYao = systemExChangeItem.GetIntValue("RongYao");
                int[] nNeedGoods = systemExChangeItem.GetIntArrayValue("NeedGoods");
                int[] nNewGoods = systemExChangeItem.GetIntArrayValue("NewGoods");
                int nNeedTreasureJiFen = systemExChangeItem.GetIntValue("TreasureJiFen");
                int nNeedTreasureXueZuan = systemExChangeItem.GetIntValue("TreasureXueZuan");
                int nNeedZhengBaPoint = systemExChangeItem.GetIntValue("ZhengBaDianShu");

                int nMoJingPoint = 0;
                int nQiFuJiFen = 0;
                int nZhanGong = 0;
                int nPetJiFen = 0;
                int nTreasureJiFen = 0;
                int nTreasureXueZuan = 0;
                int nZhengBaPoint = 0;

                // 魔晶和祈福积分 不会同时需求
                if (nNeedMoJing > 0)
                {
                    nMoJingPoint = GameManager.ClientMgr.GetTianDiJingYuanValue(client);

                    if (nMoJingPoint < nNeedMoJing)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -1);  // 魔晶不够
                    }

                }

                if (nNeedQiFuJiFen > 0)
                {
                    nQiFuJiFen = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFen);

                    if (nQiFuJiFen < nNeedQiFuJiFen)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -2);  // 祈福积分不够
                    }
                }

                BangHuiDetailData banghuiDetaiData = null;
                if (nNeedZhanGong > 0)
                {
                    banghuiDetaiData = Global.GetBangHuiDetailData(client.RoleID, client.GuildID);
                    if (null == banghuiDetaiData)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -6);  // 战功不够
                    }
                    else
                    {
                        nZhanGong = client.BangGong;

                        if (nZhanGong < nNeedZhanGong)
                        {
                            nRet = false;
                            strcmd = string.Format("{0}:{1}", roleID, -7);  // 战功不够
                        }
                    }
                }

                if (nNeedPetJiFen > 0)
                {
                    nPetJiFen = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PetJiFen);

                    if (nPetJiFen < nNeedPetJiFen)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -9);  // 祈福积分不够
                    }
                }

                if (nNeedTianTiRongYao > 0)
                {
                    if (client.TianTiData.RongYao < nNeedTianTiRongYao)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -12);  // (天梯)荣耀不够
                    }
                }

                if (nNeedTreasureJiFen > 0)
                {
                    nTreasureJiFen = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TreasureJiFen);

                    if (nTreasureJiFen < nNeedTreasureJiFen)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -13);  // 藏宝积分不够
                    }
                }

                if (nNeedTreasureXueZuan > 0)
                {
                    nTreasureXueZuan = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TreasureXueZuan);

                    if (nTreasureXueZuan < nNeedTreasureXueZuan)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -14);  // 藏宝血钻不够
                    }
                }

                if (nNeedZhanMengLevel > 0)
                {
                    if (null == banghuiDetaiData)
                    {
                        banghuiDetaiData = Global.GetBangHuiDetailData(client.RoleID, client.GuildID);
                    }
                    if (null == banghuiDetaiData)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -8);  // 战旗等级不够
                    }
                    else
                    {
                        if (banghuiDetaiData.QiLevel < nNeedZhanMengLevel)
                        {
                            nRet = false;
                            strcmd = string.Format("{0}:{1}", roleID, -8);  // 战旗等级不够
                        }
                    }
                }

                if (nNeedZhengBaPoint > 0)
                {
                    nZhengBaPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZhengBaPoint);
                    if (nZhengBaPoint < nNeedZhengBaPoint)
                    {
                        nRet = false;
                        strcmd = string.Format("{0}:{1}", roleID, -15); // 争霸点不足
                    }
                }

                if (!Global.CanAddGoodsNum(client, 1))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -5);        // 背包空格不足
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                GoodsData goodsdatainfo = null;

                if (nNeedGoods != null && nRet != false)
                {
                    //goodsdatainfo = Global.GetGoodsByID(client, nNeedGoods[0], nNeedGoods[1], nNeedGoods[2], nNeedGoods[3], nNeedGoods[4], nNeedGoods[5], nNeedGoods[6]);

                    //if (goodsdatainfo == null)
                    //{
                    //    nRet = false;
                    //    strcmd = string.Format("{0}:{1}", roleID, -3);  // 所需物品不足
                    //}
                }

                if (nRet == true)
                {
                    if (nNeedGoods != null)
                    {
                        int nGoodID = goodsdatainfo.GoodsID;
                        int nForgeLev = goodsdatainfo.Forge_level;
                        int nBinding = goodsdatainfo.Binding;
                       

                        bool usedBinding = false;
                        bool usedTimeLimited = false;

                        if (goodsdatainfo == null || !GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsdatainfo, 1, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}", roleID, -4);        // 物品扣除失败
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }

                    if (nNeedMoJing > 0)
                    {
                        GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "魔晶兑换物品", false, true);
                        Global.AddRoleBuyWithTianDiJingYuanEvent(client, nNewGoods[0], 1, nNeedMoJing);

                        // 七日活动
                        SevenDayGoalEventObject evObj_MoJingExchange = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ExchangeJinHuaJingShiByMoJing);
                        evObj_MoJingExchange.Arg1 = nNewGoods[0];
                        GlobalEventSource.getInstance().fireEvent(evObj_MoJingExchange);
                    }

                    if (nNeedQiFuJiFen > 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ZJDJiFen, nQiFuJiFen - nNeedQiFuJiFen, true);
                        Global.AddRoleBuyWithImpetratePointEvent(client, nNewGoods[0], 1, nNeedQiFuJiFen);

                        // 七日活动
                        SevenDayGoalEventObject evObj_QiFuExchange = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ExchangeJinHuaJingShiByQiFuScore);
                        evObj_QiFuExchange.Arg1 = nNewGoods[0];
                        GlobalEventSource.getInstance().fireEvent(evObj_QiFuExchange);
                    }

                    if (nNeedTreasureJiFen > 0)
                    {
                        GameManager.ClientMgr.ModifyTreasureJiFenValue(client, -nNeedTreasureJiFen, true);
                        Global.AddRoleBuyWithTreasureJiFenEvent(client, nNewGoods[0], 1, nNeedTreasureJiFen);
                    }

                    if (nNeedTreasureXueZuan > 0)
                    {
                        GameManager.ClientMgr.ModifyTreasureXueZuanValue(client, -nNeedTreasureXueZuan, true);
                        Global.AddRoleBuyWithTreasureXueZuanEvent(client, nNewGoods[0], 1, nNeedTreasureXueZuan);
                    }

                    if (nNeedZhengBaPoint > 0)
                    {
                        GameManager.ClientMgr.ModifyZhengBaPointValue(client, -nNeedZhengBaPoint, "兑换", true, true);
                        Global.AddRoleBuyWithZhengBaPointEvent(client, nNewGoods[0], 1, nNeedZhengBaPoint);
                    }

                    if (nNeedZhanGong > 0)
                    {
                        if (!GameManager.ClientMgr.SubUserBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedZhanGong))
                        {
                            nRet = false;
                            strcmd = string.Format("{0}:{1}", roleID, -7);  // 战功不够
                        }
                        else
                        {
                            //[bing] 记录战功减少流向log
                            GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "魔晶兑换", "系统", client.RoleName, "减少", nNeedZhanGong, client.ZoneID, client.strUserID, client.BangGong, client.ServerId);
                        }

                        Global.AddRoleBuyWithZhanGongEvent(client, nNewGoods[0], 1, nNeedZhanGong);
                    }
                    if (nNeedPetJiFen > 0)
                    {
                        GameManager.ClientMgr.ModifyPetJiFenValue(client, -nNeedPetJiFen, "商店兑换");
                        //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PetJiFen, nPetJiFen - nNeedPetJiFen, true);
                        Global.AddRoleBuyWithPetJiFenEvent(client, nNewGoods[0], 1, nNeedQiFuJiFen);
                    }
                    if (nNeedTianTiRongYao > 0)
                    {
                        GameManager.ClientMgr.ModifyTianTiRongYaoValue(client, -nNeedTianTiRongYao, "荣耀兑换", true);
                    }

                    if (nNewGoods != null && nNewGoods.Length == 7)
                    {
                        if (nMax > 0)
                        {
                            client.MoJingExchangeInfo[nId] = nMoJingExchangeCount + 1;

                            // 兑换次数更新DB
                            byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}", roleID, nId, Global.GetOffsetDayNow()/*TimeUtil.NowDateTime().DayOfYear*/, nMoJingExchangeCount + 1));
                            byte[] bytesData = null;
                            if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEMOJINGEXCHANGEINFO, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
                            {
                                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));

                                strcmd = string.Format("{0}:{1}", roleID, -11);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }

                        if (nNeedGoods == null)
                        {
                            Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nNewGoods[0], nNewGoods[1], 0, "", nNewGoods[3], 1, 0, "", true, 1, "魔晶和祈福兑换", Global.ConstGoodsEndTime, 0, 0, nNewGoods[5], 0, nNewGoods[6], nNewGoods[4]);
                        }
                        else
                        {
                           

                        }
                    }

                    strcmd = string.Format("{0}:{1}", roleID, 1);
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 魔晶兑换

        #region 冥想

        /// <summary>
        /// 开始进入冥想
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteStartMeditateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int meditateState = Convert.ToInt32(fields[1]);
                SystemXmlItem xmlItem;

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 设置冥想状态,重置时间
                if (meditateState == 0)
                {
                    Global.EndMeditate(client);
                }
                else if (GameManager.SystemSystemOpen.SystemXmlItemDict.TryGetValue(14, out xmlItem) && client.MainTaskID < xmlItem.GetIntValue("TimeParameters"))
                {
                    //未达到冥想功能开启等级
                }
                else
                {
                    Global.StartMeditate(client);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取冥想经验
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetMeditateExpCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nStep = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "0:0";

                long nowTime = TimeUtil.NOW();
                /*long msecs = Math.Max(nowTime - client.BiGuanTime, 0);
                msecs = Math.Min(msecs, 12 * 60 * 60 * 1000);                       // 12个小时*/

                int msecs = Global.GetRoleParamsInt32FromDB(client, RoleParamName.MeditateTime);
                int msecs_notsafe = Global.GetRoleParamsInt32FromDB(client, RoleParamName.NotSafeMeditateTime);

                int nChangeLifeLev = client.ChangeLifeCount;
                int nLev = client.m_Level;

                //int biguanExperience = (int)(((msecs / 1000) / 60.0) * minuteExperience);

                /*SystemXmlItem systemMeditateItem = null;
                if (!GameManager.SystemMeditateInfo.SystemXmlItemDict.TryGetValue(nChangeLifeLev, out systemMeditateItem))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("根据转生级别定位冥想配置项失败, id={0}", nChangeLifeLev));
                    
                    return TCPProcessCmdResults.RESULT_OK;
                }*/

                long nExp = -1;
                int nStarSoul = 0;
                int nBaseStarSoul = -1;
                long nBaseValue = Global.GetMingXiangExpr(nChangeLifeLev, nLev, out nBaseStarSoul);

                //这段代码为玩家返回整数分钟的时间,查询和领取经验的取整策略一致,在减少误差的前提下,处理显示值与领取值不一致,且保证达到最大时限时,数据的合理性
                int rem_secs, remsecs_unsafe;
                int mins, mins_unsafe;
                mins = Math.DivRem(msecs, 60 * 1000, out rem_secs);
                mins_unsafe = Math.DivRem(msecs_notsafe, 60 * 1000, out remsecs_unsafe);
                if (rem_secs + remsecs_unsafe >= 60 * 1000)
                {
                    if (rem_secs > remsecs_unsafe)
                        mins++;
                    else
                        mins_unsafe++;
                }

                nExp = mins * nBaseValue;
                nExp += mins_unsafe * nBaseValue; // 取消2倍 * 2

                nStarSoul = mins * nBaseStarSoul;
                nStarSoul += mins_unsafe * nBaseStarSoul; // 取消2倍 * 2

                //nExp = (int)(((msecs / 1000) / 60.0) * nBaseValue);
                //nExp += (int)(((msecs_notsafe / 1000) / 60.0) * nBaseValue * 2);

                bool bRet = true;
                if (nExp > 0 || nStarSoul > 0)
                {
                    int nNeedVip = 0;
                    double[] nModulus = GameManager.systemParamsList.GetParamValueDoubleArrayByName("MingXiangLingQu");

                    if (nStep == 1)
                    {
                        nNeedVip = (int)GameManager.systemParamsList.GetParamValueDoubleByName("VIPMingXiang2Times");

                        if (client.VipLevel < nNeedVip)
                        {
                            strcmd = string.Format("{0}:{1}", -10, 0);
                            bRet = false;
                        }
                        else
                        {
                            int nNeedMoney = -1;

                            nNeedMoney = (int)Math.Ceiling((mins + mins_unsafe) * nModulus[0]);

                            if (nNeedMoney > 0)
                            {
                                if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "获取冥想多倍经验"))
                                {
                                    strcmd = string.Format("{0}:{1}", -1, 0);
                                    bRet = false;
                                }
                                else
                                {
                                    nExp = nExp * 2;
                                    nStarSoul = nStarSoul * 2;
                                }
                            }
                        }
                    }
                    else if (nStep == 2)
                    {
                        nNeedVip = (int)GameManager.systemParamsList.GetParamValueDoubleByName("VIPMingXiang4Times");

                        if (client.VipLevel < nNeedVip)
                        {
                            strcmd = string.Format("{0}:{1}", -11, 0);
                            bRet = false;
                        }
                        else
                        {
                            int nNeedDiamond = -1;

                            nNeedDiamond = (int)Math.Ceiling((mins + mins_unsafe) * nModulus[1]);

                            if (nNeedDiamond > 0)
                            {
                                if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedDiamond, "领取冥想经验(钻石)"))
                                {
                                    strcmd = string.Format("{0}:{1}", -2, 0);
                                    bRet = false;
                                }
                                else
                                {
                                    nExp = nExp * 4;
                                    nStarSoul = nStarSoul * 4;
                                }
                            }
                        }
                    }
                }

                if (bRet && (nExp > 0 || nStarSoul > 0))
                {
                    client.BiGuanTime = nowTime;
                    client.MeditateTicks = nowTime;

                    client.MeditateTime = 0;
                    client.NotSafeMeditateTime = 0;

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.MeditateTime, client.MeditateTime, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.NotSafeMeditateTime, client.NotSafeMeditateTime, true);

                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_RESETBIGUAN, string.Format("{0}:{1}", client.RoleID, nowTime), null, client.ServerId);

                    strcmd = string.Format("{0}:{1}", 1, nExp); // 0.领取的经验 1.成功标记
                    GameManager.ClientMgr.ProcessRoleExperience(client, nExp, false);

                    GameManager.ClientMgr.ModifyStarSoulValue(client, nStarSoul, "领取冥想经验", true, true);

                    //client.StarSoul += nStarSoul;
                    //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.StarSoul, client.StarSoul, true);
                    //GameManager.ClientMgr.NotifySelfParamsValueChange(client, RoleCommonUseIntParamsIndexs.StarSoulValue, client.StarSoul);
                }

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取冥想时间信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetMeditateTimeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                //long nowTime = TimeUtil.NOW();
                //long msecs = Math.Max(nowTime - client.BiGuanTime, 0) / 1000;

                int msecs = Global.GetRoleParamsInt32FromDB(client, RoleParamName.MeditateTime);
                int msecs_notsafe = Global.GetRoleParamsInt32FromDB(client, RoleParamName.NotSafeMeditateTime);

                //这段代码为玩家返回整数分钟的时间,查询和领取经验的取整策略一致,在减少误差的前提下,处理显示值与领取值不一致,且保证达到最大时限时,数据的合理性
                int rem_secs, remsecs_unsafe;
                int mins, mins_unsafe;
                mins = Math.DivRem(msecs, 60 * 1000, out rem_secs);
                mins_unsafe = Math.DivRem(msecs_notsafe, 60 * 1000, out remsecs_unsafe);
                if (rem_secs + remsecs_unsafe >= 60 * 1000)
                {
                    if (rem_secs > remsecs_unsafe)
                        mins++;
                    else
                        mins_unsafe++;
                }

                //msecs = Math.Min(msecs, 12 * 60 * 60);                       // 12个小时

                strcmd = string.Format("{0}:{1}:{2}", roleID, mins * 60, mins_unsafe * 60);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 冥想

        #region 累计登陆

        /// <summary>
        /// 请求玩家累计登陆信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryTotalLoginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nFlag = 0;
                nFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalLoginAwardFlag);

                int nLoginNum = (int)ChengJiuManager.GetChengJiuExtraDataByField(client, ChengJiuExtraDataField.TotalDayLogin);

                // 0.roleid 1.累计登陆的天数 2.领取了奖励的标记
                strcmd = string.Format("{0}:{1}:{2}", client.RoleID, nLoginNum, nFlag);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求累计登陆奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteGetTotalLoginAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nIndex = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nRet = 0;

                int nMax = 0;
                nMax = /*Data.TotalLoginDataInfoList.Count; */ Data.GetTotalLoginInfoNum();

                if (nIndex < 0 || nIndex > nMax)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("数据错误, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int nLoginNum = (int)ChengJiuManager.GetChengJiuExtraDataByField(client, ChengJiuExtraDataField.TotalDayLogin);

                TotalLoginDataInfo totalLoginInfo = Data.GetTotalLoginDataInfo(nIndex);
                if (null == totalLoginInfo)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("得到累计登陆奖励信息数据失败,请检查配置文件, CMD={0}, Client={1}, Index={2}",
                                                    (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), nIndex));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }


                int nIndexLogin = 0;
                nIndexLogin = /*Data.TotalLoginDataInfoList[nIndex].TotalLoginDays;*/ totalLoginInfo.TotalLoginDays;

                if (nIndexLogin > nLoginNum)
                {
                    // 0.roleid 1.领取的哪一天的奖励 2.是否成功
                    strcmd = string.Format("{0}:{1}:{2}", client.RoleID, nIndex, -1);

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nFlag = 0;
                nFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalLoginAwardFlag);

                int nValue = 0;
                nValue = nFlag & Global.GetBitValue(nIndex + 1);

                if (nValue == 0)
                {
                    // 给奖励物品
                    List<GoodsData> gooddata = null;
                    gooddata = /*Data.TotalLoginDataInfoList[nIndex].NormalAward;*/ totalLoginInfo.NormalAward;

                    if (gooddata != null)
                    {
                        foreach (var key in gooddata)
                        {
                           // ADD QUÀ GÌ ĐÓ
                        }
                    }

                    int nOccupation = Global.CalcOriginalOccupationID(client);

                    if (nOccupation == (int)EOccupationType.EOT_Warrior)
                        gooddata = /*Data.TotalLoginDataInfoList[nIndex].Award0;*/totalLoginInfo.Award0;
                    else if (nOccupation == (int)EOccupationType.EOT_Magician)
                        gooddata = /*Data.TotalLoginDataInfoList[nIndex].Award1;*/totalLoginInfo.Award1;
                    else if (nOccupation == (int)EOccupationType.EOT_Bow)
                        gooddata = /*Data.TotalLoginDataInfoList[nIndex].Award2;*/totalLoginInfo.Award2;
                    else if (nOccupation == (int)EOccupationType.EOT_MagicSword) //增加魔剑士累计登陆奖励信息 [4/15/2015 chdeng]
                        gooddata = /*Data.TotalLoginDataInfoList[nIndex].Award3;*/totalLoginInfo.Award3;
#if 移植
                    else if (nOccupation == (int)EOccupationType.EOT_Summoner)
                        gooddata = /*Data.TotalLoginDataInfoList[nIndex].Award1;*/totalLoginInfo.Award5;
#endif
                    if (gooddata != null)
                    {
                        // 循环发放奖励
                        foreach (var key in gooddata)
                        {
                            // TODO  : ADD QUÀ KHI LOGIN
                        }
                    }

                    nFlag = nFlag | Global.GetBitValue(nIndex + 1);

                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalLoginAwardFlag, nFlag, true);

                    nRet = 1;

                    // 刷新“累计登陆”图标感叹号状态
                    if (client._IconStateMgr.CheckFuLiLeiJiDengLu(client))
                    {
                        client._IconStateMgr.SendIconStateToClient(client);
                    }
                }

                // 0.roleid 1.领取的哪一天的奖励 2.是否成功
                strcmd = string.Format("{0}:{1}:{2}", client.RoleID, nIndex, nRet);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 累计登陆

        #region 装备转生

        /// <summary>
        /// 装备转生操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessChangeLifeForEquipCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);       // 装备ID     -- DBID
                int rockID = Convert.ToInt32(fields[2]);       // 石头ID     -- GOODSID
                int luckyID = Convert.ToInt32(fields[3]);       // 幸运符ID   -- GOODSID

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                // 物品检测
                GoodsData goodsData1 = Global.GetGoodsByDbID(client, id);
                if (null == goodsData1) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品不在背包中，拒绝操作
                if (goodsData1.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品被佩戴在身上, 拒绝操作
                if (goodsData1.Using > 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 必须是装备
                int category = Global.GetGoodsCatetoriy(goodsData1.GoodsID);

                // 坐骑 守护宠物 跟随宠物不能转生
                if (category == (int)ItemCategories.ZuoJi || category == (int)ItemCategories.ShouHuChong || category == (int)ItemCategories.ChongWu)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -9, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, 0, 0);                              // 不是装备
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

             

                // 需要的物品
                int[] nNeedGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengNeedGoods");

                if (nNeedGoodsIDs.Length == 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -6, roleID, 0, 0);                      // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


               


                //从用户物品中扣除消耗的数量
                bool usedBinding = false;
                bool usedTimeLimited = false;

                if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockID, 1, false, out usedBinding, out usedTimeLimited))
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -100, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 幸运
                int luckValue = 0;
                if (luckyID >= 0)
                {
                    int nNumLuck = 0;
                    int luckyNum = 1;
                    nNumLuck = Global.GetTotalGoodsCountByID(client, luckyID);
                    luckyNum = Global.GMin(nNumLuck, luckyNum);

                    if (luckyNum > 0)
                    {
                        usedBinding = false;
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyID, luckyNum, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -102, roleID, 0, 0);      // 扣除物品失败
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        luckValue = Global.GetLuckyValue(luckyID);//设置幸运值
                    }
                }

                // 开始转生--注意 逻辑和锻造一样
                if (Global.EquipChangeLifeStart(client, goodsData1, luckValue)) //装备转生成功
                {
                  
                }
                else // 失败了
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -200, roleID, 0, 0); // 提示装备转生失败--概率没到

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 装备转生剥离操作
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFlakeOffChangeLifeForEquipCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 4)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int id = Convert.ToInt32(fields[1]);   // 装备ID     -- DBID
                int nIndex = Convert.ToInt32(fields[2]);   // 消耗金币还是钻石 1 金币 2 钻石
                int luckyID = Convert.ToInt32(fields[3]);   // 幸运符ID   -- GOODSID

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                // 物品检测
                GoodsData goodsData1 = Global.GetGoodsByDbID(client, id);
                if (null == goodsData1) //没有找到物品
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -1, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品不在背包中，拒绝操作
                if (goodsData1.Site != 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -2, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //如果物品被佩戴在身上, 拒绝操作
                if (goodsData1.Using > 0)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -3, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (nIndex < 1 || nIndex > 2)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, 0, 0);            // 参数错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 必须是装备
                int category = Global.GetGoodsCatetoriy(goodsData1.GoodsID);

                // 坐骑 守护宠物 跟随宠物不能转生剥离
                if (category == (int)ItemCategories.ZuoJi || category == (int)ItemCategories.ShouHuChong || category == (int)ItemCategories.ChongWu)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -9, roleID, 0, 0);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -4, roleID, 0, 0);                              // 不是装备
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

             

                // 检测背包能不能放进物品
                int[] nNeedGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengNeedGoods");
                int[] nArrayGoods = new int[nNeedGoodsIDs.Count()];

             

                int nNeedMoney = 0;
                if (nIndex == 1)
                {
                    // 需要的金币
                    int[] nJiBi = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiJinBi");

                   
                }
                else if (nIndex == 2)
                {
                    
                    int[] nZuanShi = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiZhuanShi");

                  
                }

                //从用户物品中扣除消耗的数量
                bool usedBinding = false;
                bool usedTimeLimited = false;

                // 幸运
                int luckValue = 0;
                if (luckyID >= 0)
                {
                    int nNumLuck = 0;
                    int luckyNum = 1;
                    nNumLuck = Global.GetTotalGoodsCountByID(client, luckyID);
                    luckyNum = Global.GMin(nNumLuck, luckyNum);

                    if (luckyNum > 0)
                    {
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyID, luckyNum, false, out usedBinding, out usedTimeLimited))
                        {
                            strcmd = string.Format("{0}:{1}:{2}:{3}", -102, roleID, 0, 0);      // 扣除物品失败
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        luckValue = Global.GetLuckyValue(luckyID);//设置幸运值
                    }
                }

                // 开始转生剥离--注意 逻辑和锻造一样
                if (Global.EquipChangeLifeStart(client, goodsData1, luckValue, 2)) //装备转生成功
                {
                 
                }
                else // 失败了
                    strcmd = string.Format("{0}:{1}:{2}:{3}", -200, roleID, 0, 0); // 提示装备转生失败--概率没到

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 装备转生

        #region 一键找朋友

        /// <summary>
        /// 一键找朋友
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessOneKeyFindFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //string strcmd = "";

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                List<OneKeyFindFriendData> listfrienddata = new List<OneKeyFindFriendData>();

                List<Object> objsList = null;
                objsList = GameManager.ClientMgr.GetPlayerByMap(client);

                int nCount = 0;
                FriendData friendData = null;

                List<FriendData> listfriend = client.FriendDataList;

                for (int n = 0; n < objsList.Count; ++n)
                {
                    bool bCanAdd = true;

                    Object player = null;

                    try
                    {
                        player = objsList[n];

                    }
                    catch (Exception)
                    {
                        continue;
                    }


                    if (player is KPlayer)
                    {
                        KPlayer gameclient = player as KPlayer;

                        if (gameclient != null && gameclient.RoleID == client.RoleID)
                            continue;

                        friendData = Global.FindFriendData(client, gameclient.RoleID);

                        if (null != friendData)
                        {
                            //if (friendData.FriendType == 0) // 不分类型
                            bCanAdd = false;
                        }

                        if (bCanAdd == true)
                        {
                            OneKeyFindFriendData tmpfrienddata = new OneKeyFindFriendData();

                            tmpfrienddata.m_nRoleID = gameclient.RoleID;
                            tmpfrienddata.m_nRoleName = gameclient.RoleName;
                            tmpfrienddata.m_nOccupation = gameclient.m_cPlayerFaction.GetFactionId();
                            tmpfrienddata.m_nChangeLifeLev = gameclient.ChangeLifeCount;
                            tmpfrienddata.m_nLevel = gameclient.m_Level;

                            listfrienddata.Add(tmpfrienddata);

                            ++nCount;
                        }

                        if (nCount == 10)
                            break;
                    }
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<OneKeyFindFriendData>>(listfrienddata, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 一键加朋友
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessOneKeyAddFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string strRoles = fields[1];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //string strcmd = "";
                bool bRet = false;

                int roleid = -1;
                string[] idsList = strRoles.Split(',');

                string strName = null;
                KPlayer gameclient = null;

                for (int i = 0; i < idsList.Length; i++)
                {
                    roleid = Global.SafeConvertToInt32(idsList[i]);

                    gameclient = GameManager.ClientMgr.FindClient(roleid);
                    if (gameclient != null)
                    {
                        strName = Global.FormatRoleName(gameclient, gameclient.RoleName);
                        bRet = GameManager.ClientMgr.AddFriend(tcpMgr, tcpClientPool, pool, client, -1, roleid, strName, 0);
                    }
                }

                //strcmd = string.Format("{0}:{1}", roleID, bRet);

                //tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                //return TCPProcessCmdResults.RESULT_DATA;
                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 一键找朋友

        #region VIP系统 和以前的VIP不一样 所以我重写

        /// <summary>
        /// VIP奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetVIPAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nIndex = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                VIPDataInfo tmpVipData = null;
                if (Data.VIPDataInfoList.ContainsKey(nIndex))
                    tmpVipData = Data.VIPDataInfoList[nIndex];

                if (tmpVipData == null)
                {
                    strcmd = string.Format("{0}:{1}", -100, roleID);                      // 配置文件出错了
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nVipLev = client.VipLevel;
                if (nVipLev < 1 && tmpVipData.VIPlev > 0)
                {
                    strcmd = string.Format("{0}:{1}", -1, roleID);                      // 还不是VIP
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (tmpVipData.VIPlev > nVipLev)
                {
                    strcmd = string.Format("{0}:{1}", -2, roleID);                      // VIP等级不够 不能领取该奖励
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int dayID = TimeUtil.NowDateTime().DayOfYear;
          

                if (tmpVipData.AwardGoods != null && tmpVipData.AwardGoods.Count > 0 && !Global.CanAddGoodsNum(client, tmpVipData.AwardGoods.Count))
                {

                    strcmd = string.Format("{0}:{1}", -4, roleID);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                //给玩家每日vip奖励
                int nRet = Global.GetVipDailyAward(client, tmpVipData, nIndex);
                if (nRet < 1)
                {
                    strcmd = string.Format("{0}:{1}", nRet, roleID);                      // 领取奖励失败
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }


                strcmd = string.Format("{0}:{1}", 1, roleID);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 玩家请求VIP信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetVIPInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                int nVipExp = Global.GetRoleParamsInt32FromDB(client, RoleParamName.VIPExp) + (int)Global.GetUserInputAllYuanBao(client) / Data.DiamondToVipExpValue;
                //int nVipAwardFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.VIPGetAwardFlag);

                Global.QueryVipAwardFlagToDB(client);

                strcmd = string.Format("{0}:{1}", nVipExp, client.VipAwardFlag);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 玩家领取VIP等级奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetVIPLevelAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                string strcmd = "";

                int nIndex = Convert.ToInt32(fields[1]);
                if (nIndex < 1 && nIndex > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                {
                    strcmd = string.Format("{0}:0", -4);                                // 客户端发的索引不对
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (client.VipLevel < 1 && client.VipLevel > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                {
                    strcmd = string.Format("{0}:0", -1);                                // VIP等级不够(或者超出了范围)
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (nIndex > client.VipLevel)
                {
                    strcmd = string.Format("{0}:0", -4);                                // 客户端发的索引大于当前VIP等级
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //int nVipAwardFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.VIPGetAwardFlag);

                Global.QueryVipAwardFlagToDB(client);

                int nFlag = client.VipAwardFlag & Global.GetBitValue(nIndex + 1);

                if (nFlag > 0)
                {
                    strcmd = string.Format("{0}:0", -2);                                // 当前等级奖励已经领取过了
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                List<GoodsData> lGoodsList = null;

                VIPLevAwardAndExpInfo tmpDic = null;
                if (!Data.VIPLevAwardAndExpInfoList.TryGetValue(nIndex, out tmpDic) || tmpDic == null)
                {
                    strcmd = string.Format("{0}:0", -3);                                // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                lGoodsList = tmpDic.AwardList;

                if (lGoodsList == null)
                {
                    strcmd = string.Format("{0}:0", -3);                                // 配置错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (!Global.CanAddGoodsDataList(client, lGoodsList))
                {
                    strcmd = string.Format("{0}:0", -4);                                // 背包已满
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (lGoodsList.Count > 0)
                {
                    for (int n = 0; n < lGoodsList.Count; ++n)
                    {
                      
                    }
                }

                client.VipAwardFlag |= Global.SetIntSomeBit(nIndex, nFlag, true);

                //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.VIPGetAwardFlag, nNewFlag, false);

                Global.UpdateVipAwardFlagToDB(client, client.VipAwardFlag);

                if (client._IconStateMgr.CheckVIPLevelAwardState(client))
                {
                    client._IconStateMgr.SendIconStateToClient(client);
                }

                //[bing] 刷新客户端活动叹号
                if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriVIPFanli))
                {
                    client._IconStateMgr.AddFlushIconState((ushort)ActivityTipTypes.JieRiActivity, client._IconStateMgr.IsAnyJieRiTipActived());
                    client._IconStateMgr.SendIconStateToClient(client);
                }

                strcmd = string.Format("{0}:{1}", 1, client.VipAwardFlag);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion VIP系统 和以前的VIP不一样 所以我重写

        #region 每日活跃相关

        /// 精灵获取每日活跃数据
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessDailyActiveDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                DailyActiveManager.NotifyClientDailyActiveData(client);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// 精灵领取每日活跃奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessFetchDailyActiveAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nid = Convert.ToInt32(fields[1]);

                String strcmd = "";

                int ret = DailyActiveManager.GiveDailyActiveAward(client, nid);

                strcmd = string.Format("{0}:{1}:{2}:{3}", ret, roleID, nid, client.DailyActiveValues);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                // 刷新“每日活跃”图标感叹号状态
                if (client._IconStateMgr.CheckFuLiMeiRiHuoYue(client))
                {
                    client._IconStateMgr.SendIconStateToClient(client);
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 每日活跃相关

        #region 自动分配属性点

        /// 精灵领取每日活跃奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSetAutoAssignPropertyPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nFlag = Convert.ToInt32(fields[1]);

                String strcmd = "";

                //先通知gamedb扣除购买限额
                //提交给gamedb
                string toDbCmd = String.Format("{0}:{1}", client.RoleID, nFlag);

                string[] dbCmds = null;
                Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, nID, toDbCmd, out dbCmds, client.ServerId);

                if (null == dbCmds || 2 != dbCmds.Length)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int ret = int.Parse(dbCmds[1]);

                if (ret == 1)
                    strcmd = string.Format("{0}:{1}", roleID, nFlag);
                else
                    strcmd = string.Format("{0}:{1}", roleID, -1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 自动分配属性点

        #region 副本奖励

        /// 精灵副本奖励
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetCopyMapAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                String strcmd = "";

                GoodsData Goods = null;
                Goods = client.CopyMapAwardTmpGoods;

                if (null == Goods && client.FuBenPingFenAwardMoJing <= 0)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);                  // 没有奖励
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                if (Goods != null)
                {
                    if (!Global.CanAddGoodsNum(client, 1))
                    {
                        Global.UseMailGivePlayerAward(client, Goods, Global.GetLang("副本通关奖励"), Global.GetLang("副本通关奖励"));
                    }
                    else
                    {
                        ////向DBServer请求加入某个新的物品到背包中
                        //Global.AddGoodsDBCommand_Hook(Global._TCPManager.TcpOutPacketPool, client, Goods.GoodsID, Goods.GCount, Goods.Quality, Goods.Props, Goods.Forge_level, Goods.Binding, 0, Goods.Jewellist, true, 1, /**/"副本通关获取物品",
                        //                                 true, Goods.Endtime, Goods.AddPropIndex, Goods.BornIndex, Goods.Lucky, Goods.Strong, Goods.ExcellenceInfo, Goods.AppendPropLev, Goods.ChangeLifeLevForEquip, true); // 卓越信息 [12/13/2013 LiaoWei]
                    }

                    client.CopyMapAwardTmpGoods = null;
                }

                if (client.FuBenPingFenAwardMoJing > 0)
                {
                    GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, client.FuBenPingFenAwardMoJing, "副本通关奖励", true, true);
                    client.FuBenPingFenAwardMoJing = 0;
                }

                strcmd = string.Format("{0}:{1}", roleID, 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        public static TCPProcessCmdResults ProcessGetBangHuiFuBenCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 先检查上次领奖是不是本周~~
                int nGuildCopyMapAwardDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuildCopyMapAwardDay);
                DateTime AwardTime = Global.GetRealDate(nGuildCopyMapAwardDay);
                if (Global.BeginOfWeek(AwardTime) != Global.BeginOfWeek(TimeUtil.NowDateTime()))
                {
                    // 不是这周领奖则重置玩家领奖记录
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuildCopyMapAwardFlag, 0, true);
                }

                string strcmd = "";

                GuildCopyMapDB MapData = GameManager.GuildCopyMapDBMgr.FindGuildCopyMapDB(client.GuildID, client.ServerId);
                if (null == MapData)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int mapid = -1;
                int seqid = -1;
                int mapcode = -1;
                GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, mapcode);

                strcmd = string.Format("{0}:{1}:{2}:{3}", roleID, mapid/*该打哪关了*/,
                    Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuildCopyMapAwardFlag),
                    MapData.Killers
                    );

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "ProcessGetBangHuiFuBenCMD", false);
            }
            return TCPProcessCmdResults.RESULT_DATA;
        }

        public static TCPProcessCmdResults ProcessGetBangHuiFuBenAwardCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int fubenID = Convert.ToInt32(fields[1]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (client.ClientSocket.IsKuaFuLogin)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strcmd = "";

                // 查找玩家帮会副本相关数据
                /*GuildCopyMapDB MapData = GameManager.GuildCopyMapDBMgr.FindGuildCopyMapDB(client.GuildID);
                if (null == MapData)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }*/

                if (!GameManager.GuildCopyMapMgr.IsGuildCopyMap(fubenID))
                {
                    strcmd = string.Format("{0}:{1}", roleID, -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 查找对应副本id
                //int MapOrder = GameManager.GuildCopyMapMgr.GetGuildCopyMapOrderByDay(day);
                int index = GameManager.GuildCopyMapMgr.GetGuildCopyMapIndex(fubenID);
                int mapid = -1;
                int seqid = -1;
                int mapcode = -1;
                // 查找本周副本通关情况，mapid返回打到第几个副本了
                GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, mapcode);
                if (mapid < 0)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
                // 不符合领取条件
                if (mapid > 0 && fubenID >= mapid)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -3);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 从配置里读取奖励
                int nZhanGong = 0;
                string strParam = GameManager.systemParamsList.GetParamValueByName("ZhanMengCodeAward");
                if (null == strParam)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -4);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                string[] temp = strParam.Split('|');
                for (int i = 0; i < temp.Length; i++)
                {
                    string[] str = temp[i].Split(',');
                    if (2 != str.Length)
                    {
                        SysConOut.WriteLine("        加载SpecialElementsHeart时出现异常!!!");
                    }
                    mapid = Convert.ToInt32(str[0]);
                    if (mapid == fubenID)
                    {
                        nZhanGong = Convert.ToInt32(str[1]);
                        break;
                    }
                }

                // 没有读到正确的奖励
                if (nZhanGong <= 0)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -5);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 先检查上次领奖是不是本周~~
                int nGuildCopyMapAwardDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuildCopyMapAwardDay);
                DateTime AwardTime = Global.GetRealDate(nGuildCopyMapAwardDay);
                if (Global.BeginOfWeek(AwardTime) != Global.BeginOfWeek(TimeUtil.NowDateTime()))
                {
                    // 不是这周领奖则重置玩家领奖记录
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuildCopyMapAwardFlag, 0, true);
                }

                int nGuildCopyMapAwardFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuildCopyMapAwardFlag);
                bool flag = GameManager.GuildCopyMapMgr.GetGuildCopyMapAwardDayFlag(nGuildCopyMapAwardFlag, index, 2);
                // 已领取
                if (flag == true)
                {
                    strcmd = string.Format("{0}:{1}", roleID, -6);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                nGuildCopyMapAwardFlag = GameManager.GuildCopyMapMgr.SetGuildCopyMapAwardDayFlag(nGuildCopyMapAwardFlag, index, 2);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuildCopyMapAwardFlag, nGuildCopyMapAwardFlag, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuildCopyMapAwardDay, Global.GetOffsetDay(TimeUtil.NowDateTime()), true);

                // 发奖
                if (GameManager.ClientMgr.AddBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, ref nZhanGong, AddBangGongTypes.BGBOSS_UI))
                {
                    //[bing] 记录战功增加流向log
                    if (0 != nZhanGong)
                        GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "帮会副本奖励", "系统", client.RoleName, "增加", nZhanGong, client.ZoneID, client.strUserID, client.BangGong, client.ServerId);
                }
                GameManager.SystemServerEvents.AddEvent(string.Format("角色获取帮贡, roleID={0}({1}), BangGong={2}, newBangGong={3}", client.RoleID, client.RoleName, client.BangGong, nZhanGong), EventLevels.Record);

                strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, 0,
                    client.BangGong,
                    fubenID,
                    Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuildCopyMapAwardFlag));

                if (client._IconStateMgr.CheckGuildIcon(client, false))
                    client._IconStateMgr.SendIconStateToClient(client);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "ProcessGetBangHuiFuBenAwardCMD", false);
            }
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #endregion 副本奖励

        #region 开服活动

        /// 精灵获取开服活动信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetKaiFuActivityInfoInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //int nType = Convert.ToInt32(fields[2]); // 活动类型 0.统一数据(等级 计数BOSS数 充值钻石数 消费钻石数 未领取返利) 1.冲击狂人 2.屠魔勇士 3.充值达人 4.消费达人 5.劲爆返利
                KaiFuActivityData ActivityDataTmp = new KaiFuActivityData();

                ActivityDataTmp.LevelUpAwardRemainQuota = new int[5];

                // 每项冲击奖励已经领取了的名额
                ActivityDataTmp.LevelUpAwardRemainQuota[0] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift1));
                ActivityDataTmp.LevelUpAwardRemainQuota[1] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift2));
                ActivityDataTmp.LevelUpAwardRemainQuota[2] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift3));
                ActivityDataTmp.LevelUpAwardRemainQuota[3] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift4));
                ActivityDataTmp.LevelUpAwardRemainQuota[4] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.ChongJiGift5));

                // 冲击奖励领取状态
                for (int i = (int)GiftBtnIndex.BTN1; i <= (int)GiftBtnIndex.BTN5; i++)
                {
                    if (!Global.CanGetChongJiLingQuShenZhuang(client, (int)i))
                        ActivityDataTmp.LevelUpGetAwardState |= Global.GetBitValue((int)i);
                }

                // 击杀BOSS王
                /*Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.EquipKing, client), out tcpOutPacket);

                // 充值王
                Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputKing, client), out tcpOutPacket);

                // 消费王
                Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriPTXiaoFeiKing, client), out tcpOutPacket);

                // 返利奖励
                Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.XinCZFanLi, client), out tcpOutPacket);*/

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<KaiFuActivityData>(ActivityDataTmp, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 开服活动

        #region PK之王

        /// <summary>
        /// 请求PK之王基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryTheKingOfPKInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nDate = TimeUtil.NowDateTime().DayOfYear;                // 当前时间
                //int nCount = Global.QueryDayActivityEnterCountToDB(client, client.RoleID, nDate, (int)SpecialActivityTypes.TheKingOfPK);

                //int nSelfValue = Global.QueryBloodCastleTotalPointInfoToDB(3);
                int nSelfValue = client.KingOfPkTopPoint;

                int nTotal = GameManager.ArenaBattleMgr.TheKingOfPKTopPoint;

                //string sFinalName = null;

                string sName = null;
                sName = GameManager.ArenaBattleMgr.TheKingOfPKTopRoleName;

                //if (!string.IsNullOrEmpty(sName))
                //    sFinalName = Global.FormatRoleName(client, sName);

                // 1.自己的积分 2.最高积分 3.名字
                strcmd = string.Format("{0}:{1}:{2}", nSelfValue, nTotal, sName);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求PK之王信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryAdrationPKKingInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nPKKingRole = 0;
                nPKKingRole = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.PKKingRole));

                int nPKKingAdmireCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireCount);

                // 1.PK之王的信息--让客户端显示模型 2.pk崇拜值
                strcmd = string.Format("{0}:{1}", nPKKingRole, nPKKingAdmireCount);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 崇拜PK之王
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAdrationPKKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (!GlobalNew.IsExtraGongNengOpen(client, ExtraGongNengIds.DiaoXiangMoBai))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的雕像膜拜指令(CMD_SPR_ADRATIONPKKING),角色:{0}", Global.FormatRoleName4(client)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int nPKKingRole = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem(GameConfigNames.PKKingRole));
                if (nPKKingRole < 0)
                {
                    strcmd = string.Format("{0}", -1);                                   // 当前没有PK之王
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                /*                KPlayer PKKing = null;
                                PKKing = GameManager.ClientMgr.FindClient(nPKKingRole);

                                if (PKKing == null)
                                {
                                    strcmd = string.Format("{0}", -1);                                  // 当前没有PK之王
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }
                */
                int nRealyNum = Data.PKkingadrationData.AdrationMaxLimit;
                int nPKKingAdmireCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireCount);

                if (nPKKingRole == roleID)
                {
                    // 玩家是PK之王 有额外的次数
                    int nAdded = (int)GameManager.systemParamsList.GetParamValueIntByName("PkKingMoBaiNum");
                    nRealyNum += nAdded;
                }

                // 玩家是VIP 有额外的次数
                int nVIPLev = client.VipLevel;

                int[] nArrayVIPAdded = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPMoBaiNum");

                if (nVIPLev > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL || (nArrayVIPAdded.Length > 13 || nArrayVIPAdded.Length < 1))
                {
                    strcmd = string.Format("{0}", -2);                                  // 配置出错
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                nRealyNum += nArrayVIPAdded[nVIPLev];

                // 节日活动多倍
                JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                if (null != activity)
                {
                    JieRiMultConfig config = activity.GetConfig((int)MultActivityType.DiaoXiangCount);
                    if (null != config)
                    {
                        nRealyNum = nRealyNum * ((int)config.GetMult() + 1)/*做倍数处理的时候减了1*/;
                    }
                }

                if (nPKKingAdmireCount >= nRealyNum)
                {
                    strcmd = string.Format("{0}", -3);                                  // 今天没有崇拜次数了
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nExp = 0;

                int nType = Convert.ToInt32(fields[1]);

                double nRate = 0;
                if (client.ChangeLifeCount == 0)
                    nRate = 1;
                else
                    nRate = Data.ChangeLifeEverydayExpRate[client.ChangeLifeCount];

                if (nType == 1)
                {
                    if (!Global.SubBindTongQianAndTongQian(client, Data.PKkingadrationData.GoldAdrationSpend, "崇拜PK之王多倍经验"))
                    {
                        strcmd = string.Format("{0}", -4);                                  // 金币不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 经验=Min(400,转生级别*400+人物等级) *金币对应经验系数
                    //nExp = Global.GMin(400, (client.ChangeLifeCount * 400 + client.m_Level)) * Data.PKkingadrationData.GoldAdrationExpModulus;

                    // 金币膜拜经验收益=人物等级*金币经验系数*(1+转生级别*0.2）
                    //nExp = (int)(client.m_Level * Data.PKkingadrationData.GoldAdrationExpModulus * (1 + (client.ChangeLifeCount * 0.2)));

                    // 配置值*转生倍率
                    nExp = (int)(nRate * Data.PKkingadrationData.GoldAdrationExpModulus);

                    if (nExp > 0)
                        GameManager.ClientMgr.ProcessRoleExperience(client, nExp, true);

                    GameManager.ClientMgr.ModifyShengWangValue(client, Data.PKkingadrationData.GoldAdrationShengWangModulus, "崇拜PK之王(金币)", true);

                }
                else if (nType == 2)
                {
                    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Data.PKkingadrationData.DiamondAdrationSpend, "崇拜PK之王"))
                    {
                        strcmd = string.Format("{0}", -5);                                   // 钻石不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 经验= Min(400,转生级别*400+人物等级) *钻石对应经验系数
                    //nExp = Global.GMin(400, (client.ChangeLifeCount * 400 + client.m_Level)) * Data.PKkingadrationData.DiamondAdrationExpModulus;

                    // 钻石膜拜经验收益=人物等级*钻石经验系数*(1+转生级别*0.2）
                    //nExp = (int)(client.m_Level * Data.PKkingadrationData.DiamondAdrationExpModulus * (1 + (client.ChangeLifeCount * 0.2)));

                    // 配置值*转生倍率
                    nExp = (int)(nRate * Data.PKkingadrationData.DiamondAdrationExpModulus);

                    if (nExp > 0)
                        GameManager.ClientMgr.ProcessRoleExperience(client, nExp, true);

                    GameManager.ClientMgr.ModifyShengWangValue(client, Data.PKkingadrationData.DiamondAdrationShengWangModulus, "崇拜PK之王(钻石)", true);
                }
                else
                {
                    strcmd = string.Format("{0}", -3);                              // 货币类型错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                Global.ProcessIncreasePKKingAdmireCount(client);

                // 1.成功
                strcmd = string.Format("{0}", 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion PK 之王

        #region 崇拜罗兰城主

        /// <summary>
        /// 请求罗兰城主基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryLuoLanChengZhuInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //int nDate = TimeUtil.NowDateTime().DayOfYear;                // 当前时间
                //int nSelfValue = client.KingOfPkTopPoint;
                //int nTotal = GameManager.ArenaBattleMgr.TheKingOfPKTopPoint;
                //string sName = null;
                //sName = GameManager.ArenaBattleMgr.TheKingOfPKTopRoleName;
                // 1.自己的积分 2.最高积分 3.名字
                //strcmd = string.Format("{0}:{1}:{2}", nSelfValue, nTotal, sName);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求罗兰城主信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryAdrationLanChengZhuInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nLLCZAdmireDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LLCZAdmireDayID);
                int nCurrDayID = Global.GetOffsetDayNow();
                if (nCurrDayID != nLLCZAdmireDayID)
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LLCZAdmireCount, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LLCZAdmireDayID, nCurrDayID, true);
                }

                int nLLCZAdmireCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LLCZAdmireCount);

                // 1.罗兰城主的信息--让客户端显示模型 2.pk崇拜值
                strcmd = string.Format("{0}:{1}", LuoLanChengZhanManager.getInstance().GetLuoLanChengZhuRoleID(), nLLCZAdmireCount);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 崇拜罗兰城主
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAdrationLanChengZhuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (!GlobalNew.IsExtraGongNengOpen(client, ExtraGongNengIds.DiaoXiangMoBai))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的雕像膜拜指令(CMD_SPR_ADRATIONLANCHENGZHU),角色:{0}", Global.FormatRoleName4(client)));
                    return TCPProcessCmdResults.RESULT_OK;
                }

                int nLLCZRoleID = LuoLanChengZhanManager.getInstance().GetLuoLanChengZhuRoleID();
                // 当前没有罗兰城主
                if (nLLCZRoleID < 0)
                {
                    strcmd = string.Format("{0}", -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nLLCZAdmireDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LLCZAdmireDayID);
                int nCurrDayID = Global.GetOffsetDayNow();
                if (nCurrDayID != nLLCZAdmireDayID)
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LLCZAdmireCount, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LLCZAdmireDayID, nCurrDayID, true);
                }

                int nRealyNum = Data.LLCZadrationData.AdrationMaxLimit;
                int nLLCZAdmireCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LLCZAdmireCount);

                if (nLLCZRoleID == roleID)
                {
                    // 玩家是罗兰城主 有额外的次数
                    int nAdded = (int)GameManager.systemParamsList.GetParamValueIntByName("LuoLanKingMoBaiNum");
                    nRealyNum += nAdded;
                }

                // 玩家是VIP 有额外的次数
                int nVIPLev = client.VipLevel;

                int[] nArrayVIPAdded = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPMoBaiNum");

                if (nVIPLev > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL || (nArrayVIPAdded.Length > 13 || nArrayVIPAdded.Length < 1))
                {
                    strcmd = string.Format("{0}", -2);                                  // 配置出错
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                nRealyNum += nArrayVIPAdded[nVIPLev];

                // 节日活动多倍
                JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                if (null != activity)
                {
                    JieRiMultConfig config = activity.GetConfig((int)MultActivityType.DiaoXiangCount);
                    if (null != config)
                    {
                        nRealyNum = nRealyNum * ((int)config.GetMult() + 1)/*做倍数处理的时候减了1*/;
                    }
                }

                // 今天没有崇拜次数了
                if (nLLCZAdmireCount >= nRealyNum)
                {
                    strcmd = string.Format("{0}", -3);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nExp = 0;

                int nType = Convert.ToInt32(fields[1]);

                double nRate = 0;
                if (client.ChangeLifeCount == 0)
                    nRate = 1;
                else
                    nRate = Data.ChangeLifeEverydayExpRate[client.ChangeLifeCount];

                if (nType == 1)
                {
                    // 金币不够
                    if (!Global.SubBindTongQianAndTongQian(client, Data.LLCZadrationData.GoldAdrationSpend, "崇拜罗兰城主多倍经验"))
                    {
                        strcmd = string.Format("{0}", -4);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 经验=Min(400,转生级别*400+人物等级) *金币对应经验系数
                    //nExp = Global.GMin(400, (client.ChangeLifeCount * 400 + client.m_Level)) * Data.PKkingadrationData.GoldAdrationExpModulus;

                    // 金币膜拜经验收益=人物等级*金币经验系数*(1+转生级别*0.2）
                    //nExp = (int)(client.m_Level * Data.PKkingadrationData.GoldAdrationExpModulus * (1 + (client.ChangeLifeCount * 0.2)));

                    // 配置值*转生倍率
                    nExp = (int)(nRate * Data.LLCZadrationData.GoldAdrationExpModulus);

                    if (nExp > 0)
                        GameManager.ClientMgr.ProcessRoleExperience(client, nExp, true);

                    GameManager.ClientMgr.ModifyShengWangValue(client, Data.LLCZadrationData.GoldAdrationShengWangModulus, "崇拜PK之王(金币)", true);

                }
                else if (nType == 2)
                {
                    if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Data.LLCZadrationData.DiamondAdrationSpend, "崇拜罗兰城主"))
                    {
                        strcmd = string.Format("{0}", -5);                                   // 钻石不够
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 经验= Min(400,转生级别*400+人物等级) *钻石对应经验系数
                    //nExp = Global.GMin(400, (client.ChangeLifeCount * 400 + client.m_Level)) * Data.PKkingadrationData.DiamondAdrationExpModulus;

                    // 钻石膜拜经验收益=人物等级*钻石经验系数*(1+转生级别*0.2）
                    //nExp = (int)(client.m_Level * Data.PKkingadrationData.DiamondAdrationExpModulus * (1 + (client.ChangeLifeCount * 0.2)));

                    // 配置值*转生倍率
                    nExp = (int)(nRate * Data.LLCZadrationData.DiamondAdrationExpModulus);

                    if (nExp > 0)
                        GameManager.ClientMgr.ProcessRoleExperience(client, nExp, true);

                    GameManager.ClientMgr.ModifyShengWangValue(client, Data.LLCZadrationData.DiamondAdrationShengWangModulus, "崇拜PK之王(钻石)", true);
                }
                else
                {
                    strcmd = string.Format("{0}", -3);                              // 货币类型错误
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LLCZAdmireCount, nLLCZAdmireCount + 1, true);

                // 1.成功
                strcmd = string.Format("{0}", 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 崇拜罗兰城主

        #region 天使神殿

        /// <summary>
        /// 天使神殿 鼓舞BUFF
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessAngelTempleSparkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (!Global.IsGuWuMap(client.MapCode))
                {
                    strcmd = string.Format("{0}", -1);                                   // 该场景不能使用
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nType = Convert.ToInt32(fields[1]);

                int nMoney = 0;

                string str = "";

                if (nType == 0)
                {
                    str = GameManager.systemParamsList.GetParamValueByName("AngelTempleGoldBuff");
                    if (!string.IsNullOrEmpty(str))
                    {
                        string[] strFields = str.Split(',');

                        if (strFields.Length != 3)
                        {
                            strcmd = string.Format("{0}", -2);                                   // 配置错误
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        nMoney = Global.SafeConvertToInt32(strFields[0]);

                        if (!Global.SubBindTongQianAndTongQian(client, nMoney, "鼓舞BUFF"))
                        {
                            strcmd = string.Format("{0}", -3);                                   // 金币不够
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        double[] newParams = new double[2];
                        newParams[0] = Global.SafeConvertToInt32(strFields[2]); // 时间
                        newParams[1] = 0; // GOODSID

                        GameManager.AngelTempleMgr.AddBuffer(client, BufferItemTypes.MU_ANGELTEMPLEBUFF1, newParams, true);

                        Global.UpdateBufferData(client, BufferItemTypes.MU_ANGELTEMPLEBUFF1, newParams);
                    }
                }
                else if (nType == 1)
                {
                    str = GameManager.systemParamsList.GetParamValueByName("AngelTempleZuanshiBuff");
                    if (!string.IsNullOrEmpty(str))
                    {
                        string[] strFields = str.Split(',');

                        if (strFields.Length != 3)
                        {
                            strcmd = string.Format("{0}", -2);                                   // 配置错误
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        nMoney = Global.SafeConvertToInt32(strFields[0]);

                        if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nMoney, "鼓舞"))
                        {
                            strcmd = string.Format("{0}", -4);                                   // 钻石不够
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }

                        double[] newParams = new double[2];
                        newParams[0] = Global.SafeConvertToInt32(strFields[2]); // 时间
                        newParams[1] = 1; // GOODSID

                        GameManager.AngelTempleMgr.AddBuffer(client, BufferItemTypes.MU_ANGELTEMPLEBUFF2, newParams, true);

                        Global.UpdateBufferData(client, BufferItemTypes.MU_ANGELTEMPLEBUFF2, newParams);
                    }
                }

                strcmd = string.Format("{0}", 1);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求天使神殿基本信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetAngelTempleBaseInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 1.上次击杀boss的人的名字 2.名字 3.最高积分 
                strcmd = string.Format("{0}:{1}:{2}", GameManager.AngelTempleMgr.m_sKillBossRoleName, GameManager.AngelTempleMgr.m_sTotalDamageName, GameManager.AngelTempleMgr.m_nTotalDamageValue);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 天使神殿

        #region 背包格子开启

        /// <summary>
        /// 请求开背包格子时间戳 [4/7/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryOpenGridCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1 && fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                strcmd = string.Format("{0}", client.OpenGridTime);//Global.GetRoleParamsInt32FromDB(client, RoleParamName.OpenGridTick));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求开随身仓库包裹的时间戳 [4/7/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryOpenPortableGridCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                strcmd = string.Format("{0}", client.OpenPortableGridTime);//Global.GetRoleParamsInt32FromDB(client, RoleParamName.OpenPortableGridTick));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 背包格子开启

        #region 推送相关

        /// <summary>
        /// 客户端把推送信息发给服务器 [4/23/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetPushMessageInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string strPushID = fields[1];

                //string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (string.Compare(strPushID, client.PushMessageID) != 0)
                {
                    Global.UpdatePushMessageInfo(client, strPushID);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 推送相关

        #region 图鉴系统

        /// <summary>
        /// 激活图鉴 [5/3/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessActivationPictureJudgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nPictureJudgeID = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                LogManager.WriteLog(LogTypes.Error, string.Format("{0}消息已废弃，请不要再使用,roleid={1}, rolename={2}", (TCPGameServerCmds)nID, client.RoleID, client.RoleName));

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 取得图鉴信息 [5/3/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetPictureJudgeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                //string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                LogManager.WriteLog(LogTypes.Error, string.Format("{0}消息已废弃，请不要再使用,roleid={1}, rolename={2}", (TCPGameServerCmds)nID, client.RoleID, client.RoleName));

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

   
    

        #endregion 图鉴系统

        #region 装备进阶

        /// <summary>
        /// Packet Update Item [4/30/2014 LiaoWei]
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessMuEquipUpgradeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

           
            return TCPProcessCmdResults.RESULT_FAILED;
        }


        #endregion 装备进阶

        #region 加速校验

        private static TCPProcessCmdResults PorcessMUCheck(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int processSubTicks = Convert.ToInt32(fields[1]);
                int dateTimeSubTicks = Convert.ToInt32(fields[2]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                // 只有收到更新指令，就更新心跳时间 ChenXiaojun
                client.LastClientHeartTicks = TimeUtil.NOW();

                if (Math.Abs(processSubTicks - dateTimeSubTicks) >= (TCPSession.MaxAntiProcessJiaSuSubTicks))
                {
                    client.MaxAntiProcessJiaSuSubNum++;

                    //如果超过容错次数
                    if (client.MaxAntiProcessJiaSuSubNum >= TCPSession.MaxAntiProcessJiaSuSubNum)
                    {
                        int banSpeedUpMinutes = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.BanSpeedUpMinutes2, 10); //加速禁止登陆的时间
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("本游戏禁止使用加速软件，{0}分钟内将禁止登陆!"), banSpeedUpMinutes), GameInfoTypeIndexes.Error, ShowGameInfoTypes.HintAndBox);
                        BanManager.BanRoleName(Global.FormatRoleName(client, client.RoleName), banSpeedUpMinutes);

                        LogManager.WriteLog(LogTypes.Error, string.Format("通过CHECK指令判断客户端启用的本地进程加速: {0}, {1}, {2}, 断开连接", Global.GetSocketRemoteEndPoint(socket), processSubTicks, dateTimeSubTicks));

                        return TCPProcessCmdResults.RESULT_FAILED;
                    }
                }
                else //已正常就清空掉
                {
                    client.MaxAntiProcessJiaSuSubNum = 0;
                }

                strcmd = string.Format("{0}", 1);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 加速校验

        #region 经验副本

        /// <summary>
        /// 经验副本信息通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults PorcessExperienceCopymapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                ExperienceCopyScene tmpExSceneInfo = null;

                // 此处需要加锁
                lock (ExperienceCopySceneManager.m_ExperienceListCopyMapsInfo)
                {
                    ExperienceCopySceneManager.m_ExperienceListCopyMapsInfo.TryGetValue(client.FuBenSeqID, out tmpExSceneInfo);
                }

                if (tmpExSceneInfo == null)
                    return TCPProcessCmdResults.RESULT_DATA;

                int nTotalWave = Data.ExperienceCopyMapDataInfoList[client.MapCode].MonsterIDList.Count;

                strcmd = string.Format("{0}:{1}:{2}", tmpExSceneInfo.m_ExperienceCopyMapCreateMonsterWave, nTotalWave, tmpExSceneInfo.m_ExperienceCopyMapRemainMonsterNum);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 经验副本

        #region 活动信息

        /// <summary>
        /// 活动信息通知
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessSpriteQueryActivitySomeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);
                int nType = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int nFubenMapID = -1;
                nFubenMapID = client.FuBenID;

                int nSeqID = -1;
                nSeqID = client.FuBenSeqID;

                if (nType == 1 && GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(nFubenMapID))
                {
                    BloodCastleDataInfo bcDataTmp = null;

                    if (!Data.BloodCastleDataInfoList.TryGetValue(nFubenMapID, out bcDataTmp) || bcDataTmp == null)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("对不起 血色城堡配置错误！！")), GameInfoTypeIndexes.Error,
                                                                        ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.LevelNotEnough);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    /*lock (GameManager.BloodCastleCopySceneMgr.m_BloodCastleCopyScenesInfo)
                    {
                        Dictionary<int, BloodCastleScene> dicTmp = null;
                        if (GameManager.BloodCastleCopySceneMgr.m_BloodCastleCopyScenesInfo.TryGetValue(nFubenMapID, out dicTmp) && dicTmp != null)
                        {
                            BloodCastleScene bcTmp = null;
                            if (dicTmp.TryGetValue(nSeqID, out bcTmp) && bcTmp != null)
                            {
                                ++bcTmp.m_nPlarerCount;
                            }
                        }
                    }*/

                    GameManager.BloodCastleCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, (int)TCPGameServerCmds.CMD_SPR_BLOODCASTLEPLAYERNUMNOTIFY);
                    GameManager.BloodCastleCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, (int)TCPGameServerCmds.CMD_SPR_BLOODCASTLEPREPAREFIGHT);
                    GameManager.BloodCastleCopySceneMgr.OnStartPlayGame(client);
                }
                else if (nType == 2 && GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(nFubenMapID))
                {
                    DaimonSquareDataInfo dsDataInfo = null;

                    if (!Data.DaimonSquareDataInfoList.TryGetValue(nFubenMapID, out dsDataInfo) || dsDataInfo == null)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("对不起 恶魔广场配置错误！！")), GameInfoTypeIndexes.Error,
                                                                        ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.LevelNotEnough);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.DaimonSquareCopySceneMgr.OnStartPlayGame(client);
                    GameManager.DaimonSquareCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, (int)TCPGameServerCmds.CMD_SPR_QUERYDAIMONSQUARETIMERINFO);
                    GameManager.DaimonSquareCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, (int)TCPGameServerCmds.CMD_SPR_DAIMONSQUAREPLAYERNUMNOTIFY);
                }

                //strcmd = string.Format("{0}:{1}:{2}", tmpExSceneInfo.m_ExperienceCopyMapCreateMonsterWave, nTotalWave, tmpExSceneInfo.m_ExperienceCopyMapRemainMonsterNum);

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 活动信息

        #region 客户端动画结束后通知刷新boss

        /// <summary>
        /// 客户端动画结束后通知刷新boss
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults PorcessEndBossAnimationCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 9)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int monsterID = Convert.ToInt32(fields[1]);
                int toMapCode = Convert.ToInt32(fields[2]);
                int toX = Convert.ToInt32(fields[3]);
                int toY = Convert.ToInt32(fields[4]);
                int effectX = Convert.ToInt32(fields[5]);
                int effectY = Convert.ToInt32(fields[6]);
                long ticks = Convert.ToInt64(fields[7]);
                int checkCode = Convert.ToInt32(fields[8]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //先校验参数是否正确
                int checkCode2 = Global.GetBossAnimationCheckCode(monsterID, toMapCode, toX, toY, effectX, effectY, ticks);
                if (checkCode != checkCode2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据客户端传入的参数执行boss动画结束后刷boss操作，校验和错误, CMD={0}, Client={1}, RoleID={2}, CheckCode={3}, CheckCode2={4}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, checkCode, checkCode2));

                    strcmd = string.Format("{0}", -1);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //开始执行刷boss的操作

                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据客户端传入的参数执行boss动画结束后刷boss操作, 地图不存在, CMD={0}, Client={1}, RoleID={2}, CheckCode={3}, CheckCode2={4}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, checkCode, checkCode2));

                    strcmd = string.Format("{0}", -2);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                //根据策划要求禁止掉
                //GameManager.LuaMgr.AddDynamicMonsters(client, monsterID, 1, (int)gameMap.CorrectPointToGrid(toX), (int)gameMap.CorrectPointToGrid(toY), 2);

                strcmd = string.Format("{0}", 1);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 客户端动画结束后通知刷新boss

        #region MU祈福

        /// <summary>
        /// 请求祈福信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryImpetrateInfoCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleAID = Convert.ToInt32(fields[0]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleAID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleAID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                DateTime dTime1 = TimeUtil.NowDateTime();
                DateTime dTime2 = Global.GetRoleParamsDateTimeFromDB(client, RoleParamName.ImpetrateTime);
                if (dTime2.Ticks == 0)
                {
                    strcmd = string.Format("{0}", -1);
                }
                else
                {
                    TimeSpan dTimeSpan = dTime1 - dTime2;

                    double dSecond = 0.0;
                    dSecond = dTimeSpan.TotalSeconds;

                    double dRet = 0.0;
                    dRet = Global.GMax(0, Data.FreeImpetrateIntervalTime - dSecond);

                    strcmd = string.Format("{0}", (int)dRet);
                }

                //SaveRoleParamsStringWithNullToDB GetRoleParamsStringWithNullFromDB

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 执行祈福
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExcuteImpetrateCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            int[] moneys = GameManager.systemParamsList.GetParamValueIntArrayByName("QiFuMoney");
            int moneyOne = moneys[0];
            int moneyTen = moneys[1];

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nType = Convert.ToInt32(fields[1]);

                string strcmd = "";

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //开放
                // if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.QiFu))
                //   return TCPProcessCmdResults.RESULT_OK;

                if (nType < 1 || nType > 2)
                {
                    strcmd = string.Format("{0}:{1}::", -1, nType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nTime = 0;

                if (nType == 1)
                    nTime = 1;
                else if (nType == 2)
                    nTime = 10;

                // 注意 -- 当客户端在祈福界面打开时，掉线了，之后断线重连， JinDanGoodsDataList没有机会初始化，所以加上代码初始化之... [8/30/2014 LiaoWei]
                if (null == client.JinDanGoodsDataList)
                {
                    string strDBcmd = "";
                    strDBcmd = StringUtil.substitute("{0}:{1}", roleID, 2000);

                    byte[] bytesCmd = new UTF8Encoding().GetBytes(strDBcmd);

                    TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, (int)TCPGameServerCmds.CMD_GETGOODSLISTBYSITE, bytesCmd, 12, out tcpOutPacket, client.ServerId);
                    if (TCPProcessCmdResults.RESULT_FAILED != result && null != tcpOutPacket)
                    {
                        //处理物品列表数据
                        List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);

                        client.JinDanGoodsDataList = goodsDataList;
                        Global.PushBackTcpOutPacket(tcpOutPacket);
                    }

                    if (null == client.JinDanGoodsDataList)
                    {
                        client.JinDanGoodsDataList = new List<GoodsData>();
                    }
                }

                // 仓库是否足够
                if (null != client.JinDanGoodsDataList && Global.GetJinDanBagCapacity(client) - client.JinDanGoodsDataList.Count < nTime)
                {
                    strcmd = string.Format("{0}:{1}::", -2, nType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                // 如果有祈福的物品
                int needGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinDan");
                if (needGoodsID <= 0)
                {
                    strcmd = string.Format("{0}:{1}::", -110, nType);
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int nBinding = -1;
                int dbRet = -1;
                String strGetGoods = null;
                DateTime dTime1 = TimeUtil.NowDateTime();
                int nTimer = 0;
                int needYuanBao = 0;

                DateTime dTime2 = Global.GetRoleParamsDateTimeFromDB(client, RoleParamName.ImpetrateTime);
                StringBuilder strBuilder = new StringBuilder();

                string strGoods = null;
                if (dTime2.Ticks == 0)  // 第一次祈福
                {
                    // 时间存盘
                    Global.SaveRoleParamsDateTimeToDB(client, RoleParamName.ImpetrateTime, dTime1, true);

                    // 给物品
                    strGoods = GameManager.systemParamsList.GetParamValueByName("FirstQiFuGoods");

                    if (string.IsNullOrEmpty(strGoods))
                    {
                        strcmd = string.Format("{0}:{1}::", -3, nType);

                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    string[] strFields = null;
                    strFields = strGoods.Split('|');
                    if (strFields == null || strFields.Length != (int)EOccupationType.EOT_MAX) // 新增魔剑士第一次祈福 [XSea 2015/4/16]
                    {
                        strcmd = string.Format("{0}:{1}::", -3, nType);

                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    string[] strData = null;
                    strData = strFields[client.m_cPlayerFaction.GetFactionId()].Split(',');

                    if (strData == null || strData.Length != 6)
                    {
                        strcmd = string.Format("{0}:{1}::", -3, nType);

                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    int nGoodID = 0;
                    int nForgeLevel = 0;
                    int nLuckyProp = 0;
                    int nExcellenceProp = 0;
                    int nAppendProp = 0;

                    nGoodID = Global.SafeConvertToInt32(strData[0]);
                    nBinding = Global.SafeConvertToInt32(strData[1]);
                    nForgeLevel = Global.SafeConvertToInt32(strData[2]);
                    nAppendProp = Global.SafeConvertToInt32(strData[3]);
                    nLuckyProp = Global.SafeConvertToInt32(strData[4]);
                    nExcellenceProp = Global.SafeConvertToInt32(strData[5]);

                    dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nGoodID, 1, 0, "", nForgeLevel, nBinding, (int)SaleGoodsConsts.JinDanGoodsID, "", true, 1, "祈福获取道具", Global.ConstGoodsEndTime, 0, 0, nLuckyProp, 0, nExcellenceProp, nAppendProp);

                    strGetGoods = String.Format("{0},{1},{2},{3},{4},{5},{6}", nGoodID, 1, nBinding, nForgeLevel, nAppendProp, nLuckyProp, nExcellenceProp);

                    strcmd = string.Format("{0}:{1}:{2}:{3}", 1, nType, strGetGoods, Data.FreeImpetrateIntervalTime);

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                    client._IconStateMgr.CheckFreeImpetrateState(client);
                    client._IconStateMgr.SendIconStateToClient(client);


                    // Quà tặng 7 ngày
                    SevenDayGoalEventObject evObj = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetEquipCountByQiFu);
                    evObj.Arg1 = nGoodID;
                    evObj.Arg2 = 1;
                    GlobalEventSource.getInstance().fireEvent(evObj);


                    return TCPProcessCmdResults.RESULT_DATA;
                }
                else
                {
                    TimeSpan dTimeSpan = dTime1 - dTime2;

                    double dSecond = 0.0;
                    dSecond = dTimeSpan.TotalSeconds;

                    int nImpetrateTypeID = Global.GetImpetrateTypeIDByLevel(client);

                    if (nImpetrateTypeID < 0)
                    {
                        strcmd = string.Format("{0}:{1}::", -100, nType);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    Dictionary<int, SystemXmlItem> xmlDic = null;


                    if (nType == 1 &&
                        (dSecond >= Data.FreeImpetrateIntervalTime || (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == nTime)))// 免费祈福
                    {
                        lock (QianKunManager.m_mutex)
                        {
                            if (!QianKunManager.m_ImpetrateDataInfoFree.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
                            {
                                strcmd = string.Format("{0}:{1}::", -101, nType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }
                    }
                    else
                    {
                        lock (QianKunManager.m_mutex)
                        {
                            JieRiFuLiActivity act = HuodongCachingMgr.GetJieriFuLiActivity();
                            object o_placeholder = null;
                            if (act != null && act.IsOpened(EJieRiFuLiType.FuFeiQiFu, out o_placeholder))
                            {
                                // 节日福利--付费祈福开启了，优先使用·活动祈福配置文件·
                                if (!QianKunManager.m_ImpetrateDataHuoDong.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
                                {
                                    strcmd = string.Format("{0}:{1}::", -101, nType);
                                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                    return TCPProcessCmdResults.RESULT_DATA;
                                }
                            }
                            else if (!QianKunManager.m_ImpetrateDataInfo.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
                            {
                                strcmd = string.Format("{0}:{1}::", -101, nType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                        }
                    }

                    // 是否是免费祈福
                    if (nType == 1)
                    {
                        if (dSecond >= Data.FreeImpetrateIntervalTime)  // 免费祈福
                        {
                            Global.SaveRoleParamsDateTimeToDB(client, RoleParamName.ImpetrateTime, dTime1, true);

                            nTimer = Data.FreeImpetrateIntervalTime;

                            nBinding = 1;
                        }
                        else
                        {
                            bool usedBinding = false;
                            bool usedTimeLimited = false;
                            Boolean hasSubGoods = false;

                            //砸一次，且有物品，则扣除物品
                            if (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == nTime)
                            {
                                //从用户物品中扣除消耗的数量
                                hasSubGoods = GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needGoodsID, 1, false, out usedBinding, out usedTimeLimited);

                                if (hasSubGoods)
                                {
                                    nBinding = 1;
                                }

                            }

                            //需要扣除元宝
                            if (!hasSubGoods)
                            {
                                nBinding = 0;
                                //needYuanBao = 200;
                                needYuanBao = moneyOne;

                                //自动扣除元宝
                                Boolean isOK = GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福2");
                                if (!isOK)
                                {
                                    //if (!GameManager.ClientMgr.SubUserGold(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福自动扣除"))
                                    {
                                        /// 通知在线的对方(不限制地图)个人紧要消息
                                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("要祈福时，钻石不足，请充值后，再重新祈福！")),
                                                                                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                                        strcmd = string.Format("{0}:{1}::", -5, nType);
                                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                        return TCPProcessCmdResults.RESULT_DATA;

                                    }
                                    //nBinding = 1;
                                }

                                //节日活动的多倍处理
                                double awardmuti = 1.0;
                                JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                                if (null != activity)
                                {
                                    JieRiMultConfig config = activity.GetConfig((int)MultActivityType.PrayDiamondGrade);
                                    if (null != config)
                                    {
                                        awardmuti += config.GetMult();
                                    }
                                }
                                double grade = nTime * 20 * awardmuti;
                                Global.AddZaJinDanJiFen(client, Math.Max(0, (int)grade));
                                //Global.AddZaJinDanJiFen(client, Math.Max(0, nTime * 20));
                            }

                            nTimer = (int)Global.GMax(0, Data.FreeImpetrateIntervalTime - dSecond);
                        }

                        String strRecord;

                        StringBuilder strBuilderRecord = new StringBuilder();
                        String preString = String.Format("{0}_{1}_{2}_{3}_{4}_{5}", roleID, 0, client.ZoneID, nTime, needYuanBao, nBinding);//前缀信息字符串

                        String gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, xmlDic, 1, out strRecord, nBinding, true);

                        if (strRecord.Length > 0)
                        {
                            if (strBuilderRecord.Length > 0)
                            {
                                strBuilderRecord.Append(";");//多条记录用分号隔开
                            }

                            //添加一条记录
                            strBuilderRecord.Append(String.Format("{0}_{1}", preString, strRecord));
                        }

                        if (strBuilderRecord.Length > 0)
                        {
                            //通知gamedbserver记录竞猜历史 每个角色的通知一次,这儿应该综合考虑一下数据包大小问题，每次不要太大，也不要太小，保证次数不要太多
                            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDZAJINDANHISTORY, string.Format("{0}", strBuilderRecord.ToString()), null, client.ServerId);
                        }

                        strcmd = string.Format("{0}:{1}:{2}:{3}", 1, nType, gainString, nTimer);

                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                        client._IconStateMgr.CheckFreeImpetrateState(client);
                        client._IconStateMgr.SendIconStateToClient(client);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    else if (nType == 2)
                    {
                        nBinding = 0;
                        int spIndex = -1;
                        if (10 == nTime)
                        {
                            spIndex = Global.GetRandomNumber(0, nTime);
                            //needYuanBao = 1800;
                            needYuanBao = moneyTen;
                        }

                        //自动扣除元宝
                        Boolean isOK = GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福自动扣除");
                        if (!isOK)
                        {
                            //if (!GameManager.ClientMgr.SubUserGold(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福自动扣除"))
                            {
                                /// 通知在线的对方(不限制地图)个人紧要消息
                                GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("要祈福时，钻石不足，请充值后，再重新祈福！")),
                                                                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);

                                strcmd = string.Format("{0}:{1}::", -5, nType);
                                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                                return TCPProcessCmdResults.RESULT_DATA;
                            }
                            //nBinding = 1;
                        }

                        //节日活动的多倍处理
                        double awardmuti = 1.0;
                        JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                        if (null != activity)
                        {
                            JieRiMultConfig config = activity.GetConfig((int)MultActivityType.PrayDiamondGrade);
                            if (null != config)
                            {
                                awardmuti += config.GetMult();
                            }
                        }
                        double grade = nTime * 20 * awardmuti;
                        Global.AddZaJinDanJiFen(client, Math.Max(0, (int)grade));

                        StringBuilder strBuilderRecord = new StringBuilder();

                        String preString = String.Format("{0}_{1}_{2}_{3}_{4}_{5}", roleID, 0, client.ZoneID, nTime, needYuanBao, nBinding);//前缀信息字符串

                        for (int n = 0; n < nTime; n++)
                        {
                            String strRecord;

                            String gainString;
                            if (n == spIndex)
                            {
                                gainString = QianKunManager.ProcessRandomWaBaoByZaDanSP(client, xmlDic, 1, out strRecord, nBinding, true);
                            }
                            else
                            {
                                gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, xmlDic, 1, out strRecord, nBinding, true);
                            }

                            if (gainString.Length > 0)
                            {
                                if (strBuilder.Length > 0)
                                {
                                    strBuilder.Append("|");//多条记录用分号隔开
                                }

                                //添加一条记录
                                strBuilder.Append(String.Format("{0}", gainString));
                            }

                            if (strRecord.Length > 0)
                            {
                                if (strBuilderRecord.Length > 0)
                                {
                                    strBuilderRecord.Append(";");//多条记录用分号隔开
                                }

                                //添加一条记录
                                strBuilderRecord.Append(String.Format("{0}_{1}", preString, strRecord));
                            }
                        }

                        if (strBuilderRecord.Length > 0)
                        {
                            //通知gamedbserver记录竞猜历史 每个角色的通知一次,这儿应该综合考虑一下数据包大小问题，每次不要太大，也不要太小，保证次数不要太多
                            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDZAJINDANHISTORY, string.Format("{0}", strBuilderRecord.ToString()), null, client.ServerId);
                        }

                        nTimer = (int)Global.GMax(0, Data.FreeImpetrateIntervalTime - dSecond);

                        string strGoodsInfo = strBuilder.ToString();

                        strcmd = string.Format("{0}:{1}:{2}:{3}", 1, nType, strGoodsInfo, nTimer);

                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion MU祈福

        #region 星座系统

        /// <summary>
        /// 请求星座信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryStarConstellationCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.RoleStarConstellationInfo, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 激活星座
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExcuteActivationStarConstellationCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int nStarSite = Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                GameManager.StarConstellationMgr.ActivationStarConstellation(client, nStarSite);

                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.RoleStarConstellationInfo, pool, nID);

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion 星座系统

        #region 特殊设备

        /// <summary>
        /// 请求特殊设备的BUFF
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQuerySpecialMachineCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string key = fields[1];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (Global.IsSpecialMachine(key))
                {
                    // 加buff
                    double[] actionParams = new double[1];
                    actionParams[0] = Global.GetSpecialMachineExp();
                    Global.UpdateBufferData(client, BufferItemTypes.MU_SPECMACH_EXP, actionParams, 1);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 报告特殊信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessExtraDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                string key = fields[1];

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (!string.IsNullOrEmpty(key))
                {
                    //客户端检测到外挂
                    LogManager.WriteLog(LogTypes.Error, "客户端检测到数据不一致,数据:" + key);
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 获取场景状态和时间信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetSceneTimeStateInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                SceneUIClasses sceneType = Global.GetMapSceneType(client.MapCode);
                switch (sceneType)
                {
                    case SceneUIClasses.HuanYingSiYuan:
                        HuanYingSiYuanManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.TianTi:
                        TianTiManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.YongZheZhanChang:
                        YongZheZhanChangManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.KingOfBattle:
                        KingOfBattleManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.ElementWar:
                        ElementWarManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.CopyWolf:
                        CopyWolfManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.MoRiJudge:
                        MoRiJudgeManager.Instance().NotifyTimeStateAndBossEvent(client);
                        break;
                    case SceneUIClasses.KuaFuBoss:
                        KuaFuBossManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.LangHunLingYu:
                        LangHunLingYuManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
                        break;
                    case SceneUIClasses.CoupleArena:
                      // Liên quan tới cưới
                        break;
                }

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 报告角色在地图移动触发事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessRegionEventCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int eventType = Convert.ToInt32(fields[1]);
                int flag = Convert.ToInt32(fields[2]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                GlobalEventSource.getInstance().fireEvent(new ClientRegionEventObject(client, eventType, flag, 0));

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion

        #region 仓库货币

        /// <summary>
        /// 客户端请求存取仓库金币
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetStoreYinLiang(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                long value = Convert.ToInt64(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (0 == value)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strCmd = "";

                int oldYinLiang = client.YinLiang;
                long oldStoreYinLiang = client.StoreYinLiang;

                // 存入
                if (value > 0)
                {
                    if (value > oldYinLiang)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -1);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 判断从玩家身上扣钱是否成功
                    if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)value, "仓库存"))
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -1);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.ClientMgr.AddUserStoreYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库存");
                }
                // 取出
                else
                {
                    // 如果超过上限
                    if (oldYinLiang - value > Global.Max_Role_YinLiang)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -3);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (Math.Abs(value) > oldStoreYinLiang)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 先从仓库金币里扣钱
                    if (!GameManager.ClientMgr.AddUserStoreYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库取"))
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)(-value), "仓库取");
                }

                strCmd = string.Format("{0}:{1}", roleID, 0);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端请求存取仓库绑定金币
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetStoreMoney(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                long value = Convert.ToInt64(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}",
                                                                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                if (0 == value)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }

                string strCmd = "";

                int oldMoney = client.Money1;
                long oldStoreMoney = client.StoreMoney;

                // 存入
                if (value > 0)
                {
                    if (value > oldMoney)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -1);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 判断从玩家身上扣钱是否成功
                    if (!GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)value, "仓库存"))
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -1);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.ClientMgr.AddUserStoreMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库存");
                }
                // 取出
                else
                {
                    // 如果超过上限
                    if (oldMoney - value > Global.Max_Role_Money)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -3);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    if (Math.Abs(value) > oldStoreMoney)
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    // 先从仓库金币里扣钱
                    if (!GameManager.ClientMgr.AddUserStoreMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库取"))
                    {
                        strCmd = string.Format("{0}:{1}", roleID, -2);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }

                    GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)(-value), "仓库取");
                }

                strCmd = string.Format("{0}:{1}", roleID, 0);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端请求节日翻倍信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetJieRiFanBeiInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                //if (fields.Length != 1)
                //{
                //    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                //        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                //    return TCPProcessCmdResults.RESULT_FAILED;
                //}

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Dictionary<int, int> openInfo = new Dictionary<int, int>();
                JieRiMultAwardActivity awardActivity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                if (awardActivity != null && awardActivity.activityDict != null)
                {
                    foreach (var item in awardActivity.activityDict.Values)
                    {
                        if (item.InActivityTime() && item.Effective == 1)
                        {
                            openInfo[item.type] = 1;
                        }
                    }
                }

                client.sendCmd(nID, openInfo);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端请求成就符文信息
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessGetAchievementRuneInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                AchievementRuneData runeData = ChengJiuManager.GetAchievementRuneData(client);
                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_ACHIEVEMENT_RUNE_INFO, runeData);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 客户端请求提升成就符文
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessUpAchievementRune(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户id,符文id
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);
                int runeID = Convert.ToInt32(fields[1]);
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                AchievementRuneData runeData = ChengJiuManager.UpAchievementRune(client, runeID);
                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_ACHIEVEMENT_RUNE_UP, runeData);

                return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 节日返利活动查询
        /// </summary>
        /// <param name="dbMgr"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        private static TCPProcessCmdResults ProcessQueryJieriFanLiActivityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}", (TCPGameServerCmds)nID));

                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            try
            {
                string[] fields = cmdData.Split(':');
                if (fields.Length != 2)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Recv={1}, CmdData={2}",
                        (TCPGameServerCmds)nID, fields.Length, cmdData));

                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
                    return TCPProcessCmdResults.RESULT_DATA;
                }

                int roleID = Convert.ToInt32(fields[0]);
                ActivityTypes acttype = (ActivityTypes)Convert.ToInt32(fields[1]);

                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                //定位角色成功之后将命令转发给gamedbserver
                string sCmd = "";
                JieriFanLiActivity instance = HuodongCachingMgr.GetJieriFanLiActivity(acttype);
                if (null != instance)
                {
                    sCmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), (int)acttype, 0);
                }

                return Global.RequestToDBServer2(tcpClientPool, pool, nID, sCmd, out tcpOutPacket, client.ServerId);
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "", false);
                //throw ex;
                //});
            }

            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", (int)TCPGameServerCmds.CMD_DB_ERR_RETURN);
            return TCPProcessCmdResults.RESULT_DATA;
        }

        #endregion

        #region 神器再造

        private static TCPProcessCmdResults ProcessUpArtifact(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;

            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("Decode data faild, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                //解析用户名称和用户密码
                string[] fields = cmdData.Split(':');
                if (fields.Length != 3)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Error Socket params count not fit CMD={0}, Client={1}, Recv={2}",
                        (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), fields.Length));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                int roleID = Convert.ToInt32(fields[0]);   // 角色roleID
                int equipID = Convert.ToInt32(fields[1]);   // 装备
                bool isBind = Convert.ToInt32(fields[2]) > 0;//是否优先使用绑定材料
                KPlayer client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("Can not find player corresponding ID, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                ArtifactResultData resultData = ArtifactManager.UpArtifact(client, equipID, isBind);

                string strcmd = string.Format("{0}:{1}:{2}", resultData.State, resultData.EquipDbID, resultData.Bind);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
                return TCPProcessCmdResults.RESULT_DATA;

                //int[] result = new int[] { resultData.State, resultData.EquipDbID, resultData.Bind };
                //client.sendCmd((int)TCPGameServerCmds.CMD_SPR_ARTIFACT_UP, result);
                //return TCPProcessCmdResults.RESULT_OK;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        #endregion

    }
}

