using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Text;
using HSGameEngine.Drawing;
using UnityEngine;
using HSGameEngine.GameEngine.Logic;
using HSGameEngine.GameEngine.SilverLight;
using HSGameEngine.GameEngine.Network;
using Server.Data;
using Server.Tools;
using HSGameEngine.GameEngine.Network.Tools;

namespace HSGameEngine.GameFramework.Logic
{
    /// <summary>
    /// 界面使用的静态公用类
    /// </summary>
    public static class Super
    {
        #region 全局定义

        /// <summary>
        /// 全局的界面游戏静态数据
        /// </summary>
        public static SuperData GData = null;

        //指向舞台
        public static HSGameEngine.GameEngine.SilverLight.Canvas MainWindowRoot = null;

        //游戏管理对象
        public static GameManager MainGameMgr = null;

        //是否连接游戏服务器时失败
        public static bool ConnectToGameServerFailed = false;

        //全局提示信息列表，计时器中判断显示
        public static Dictionary<int, Queue<HintTextdata>> goodsHintDict = new Dictionary<int, Queue<HintTextdata>>();

        //LoadingMap时显示的帮助信息
        public static string[] AutoSystemChatItemsArray = null;
        //全局的角色属性面板
        //public static RoleAttributePart _RoleAttributePart =  null;

        //一键出售和回收道具DBid的列表，用在背包当中显示已放入状态使用。（主要是背包在出售过程中整理后记录使用。）
        public static Dictionary<int, int> goodDBIdDict = new Dictionary<int, int>();

        //技能升级时如需要消耗魔晶是否提示
        public static int[] MessageBoxIsHint = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0 };

        static RoleManager roleManager = null;

        //二级密码校验窗口
        private static GChildWindow VerifySecondPasswordWindow = null;
        private static VerifySecondPasswordPart VerifySecondPassowrdPart = null;

        #endregion 全局定义

        #region 阻挡的Layer对象

        /// <summary>
        /// NGUI模态阻挡的层
        /// </summary>
        public static GameObject ModalLayer = null;

        //记录当前弹出消息框 避免有时因多发送消息 引起的弹出框重叠
        public static MyMessageBoxExPart m_MessageBoxPart = null;

        /// <summary>
        /// 改变NGUI模态阻挡的层的激活状态
        /// 禁止控制角色移动
        /// </summary>
        /// <param name='active'>
        /// Active.
        /// </param>
        public static void ActiveModalLayer(bool active)
        {
            Global.DisableInput = active;

            if (null != ModalLayer)
            {
                ModalLayer.SetActive(active);
            }
        }

        /// <summary>
        /// NGUI模态窗口阻挡层
        /// </summary>
        public static GameObject DialogLayer = null;

        /// <summary>
        /// 改变NGUI模态窗口阻挡层
        /// </summary>
        /// <param name='active'>
        /// Active.
        /// </param>
        public static void ActiveDialogLayer(bool active)
        {
            if (null != DialogLayer)
            {
                DialogLayer.SetActive(active);
            }
        }

        #endregion 阻挡的Layer对象

        #region 网络等待窗口相关

        /// <summary>
        /// 网络加载等待提示
        /// </summary>
        public static GameObject NetWaiting = null;

        /// <summary>
        /// 显示网络等待窗口
        /// </summary>  
        public static void ShowNetWaiting(String hint = null)
        {
            if (null == NetWaiting) return;

            if (!NetWaiting.activeSelf)
            {
                NetWaiting.SetActive(true);
            }
        }

        /// <summary>
        /// 隐藏网络等待窗口
        /// </summary>  
        public static void HideNetWaiting()
        {
            if (null == NetWaiting) return;

            if (NetWaiting.activeSelf)
            {
                NetWaiting.SetActive(false);
            }
        }

        #endregion 网络等待窗口相关

        #region 弹出消息窗口

        /// <summary>
        /// Box实现Part
        /// </summary>  
        public static GChildWindow ShowMessageBox(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String caption, String message, int left = -1, int top = -1, int width = -1, int height = -1, double opacity = 0.7, Vector3 pos = new Vector3(),
        MouseLeftButtonUpEventHandler RegOkCallBack = null, string OkButtonText = null)
		{				
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            MyMessageBoxPart messageBoxPart = U3DUtils.NEW<MyMessageBoxPart>();

            Super.InitChildWindow(messageBoxWindow, "messageBoxWindow");
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxPart.BoxType = boxType;
            messageBoxPart.HintTitle = caption;
            messageBoxPart.HintText = message;

            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                m_MessageBoxPart = null;
                Super.CloseChildWindow(root, messageBoxWindow);
            };

            //使用外部的方法替换掉原先的按钮点击事件
            if (RegOkCallBack != null)
            {
                messageBoxPart.OkBtn.MouseLeftButtonUp = RegOkCallBack;
                messageBoxPart.OkBtn.MouseLeftButtonUp += (o, e) =>
                {
                    CloseChildWindow(root, messageBoxWindow);
                };
            }
            //使用指定文字替换按钮文字
            if (OkButtonText != null)
            {
                messageBoxPart.OkBtn.Text = OkButtonText;
            }

            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            root.Children.Add(messageBoxWindow);
            //messageBoxWindow.Z = GChildWindow.ZZ;

            messageBoxWindow.X = pos.x;
            messageBoxWindow.Y = pos.y;

            //Super.ActiveDialogLayer(true);
            return messageBoxWindow;
        }
        public static GChildWindow ZuanShiShowMessageBox(String caption, String message, int boxType, DPSelectedItemEventHandler handler, MessBoxIsHintTypes messBoxIsHintTypes = MessBoxIsHintTypes.None)
        {

            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            ZuanShiMessageBox messageBoxPart = U3DUtils.NEW<ZuanShiMessageBox>();
            Super.InitChildWindow(messageBoxWindow, "messageBoxWindow");
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxPart.BoxType = boxType;
            messageBoxPart.HintTitle = caption;
            messageBoxPart.HintText = message;
            if (boxType == 2)
            {
                if (messBoxIsHintTypes != MessBoxIsHintTypes.None)
                {
                    bool isCheck = Super.MessageBoxIsHint[(int)messBoxIsHintTypes] == 1 ? true : false;
                    messageBoxPart.CheckBox.Check = isCheck;
                }
            }
            if (MessBoxIsHintTypes.JjingLingSkillAwarkHint == messBoxIsHintTypes)
            {
                messageBoxPart.ZhuanShiPosMove = true;
            }
            messageBoxPart.ButtonClick = (s, e) =>
            {
                if (boxType == 2)
                {
                    Super.SetArrayElement(Super.MessageBoxIsHint, (int)messBoxIsHintTypes, messageBoxPart.CheckBox.Check ? 1 : 0);
                }
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                if (handler != null)
                {
                    handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
                }
                //m_MessageBoxPart = null;
            };

            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);

            //Super.ActiveDialogLayer(true);
            return messageBoxWindow;

        }
        /// <summary>
        /// Box实现Part
        /// </summary>  
        public static GChildWindow ShowMessageBox(String caption, String message, int boxType, DPSelectedItemEventHandler handler, MessBoxIsHintTypes messBoxIsHintTypes = MessBoxIsHintTypes.None)
        {

            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            MyMessageBoxPart messageBoxPart = U3DUtils.NEW<MyMessageBoxPart>();
            Super.InitChildWindow(messageBoxWindow, "messageBoxWindow");
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxPart.BoxType = boxType;
            messageBoxPart.HintTitle = caption;
            messageBoxPart.HintText = message;
            if (boxType == 2)
            {
                if (messBoxIsHintTypes != MessBoxIsHintTypes.None)
                {
                    bool isCheck = Super.MessageBoxIsHint[(int)messBoxIsHintTypes] == 1 ? true : false;
                    messageBoxPart.CheckBox.Check = isCheck;
                }
            }

            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                // 带复选框的, 同时选中了确定
                if (boxType == 2 && 0 == messageBoxReturn)
                {
                    Super.SetArrayElement(Super.MessageBoxIsHint, (int)messBoxIsHintTypes, messageBoxPart.CheckBox.Check ? 1 : 0);
                }
                
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                if (handler != null)
                {
                    handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
                }
                //m_MessageBoxPart = null;
            };

            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);

            //Super.ActiveDialogLayer(true);
            return messageBoxWindow;



            //  ZuanShiMessageBoxPart messageBoxPart = U3DUtils.NEW<ZuanShiMessageBoxPart>();
            //m_MessageBoxPart = messageBoxPart;

        }

        /// <summary>
        /// Box实现Part
        /// </summary>  
        public static GChildWindow ShowMessageBoxEx(String caption, String message, DPSelectedItemEventHandler handler, params string[] buttons)
        {
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            Super.InitChildWindow(messageBoxWindow, "MessageBoxExWindow");
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);
            MyMessageBoxExPart messageBoxPart = U3DUtils.NEW<MyMessageBoxExPart>();
            m_MessageBoxPart = messageBoxPart;
            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxPart.InitPartData(caption, message, buttons);
            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
                m_MessageBoxPart = null;
            };

            if (null != messageBoxWindow.ChildWindowClose)
            {
                messageBoxWindow.ChildWindowClose = (s1, e1) =>
                    {
                        handler(s1, new DPSelectedItemEventArgs() { ID = -1000 });
                        return true;
                    };
            }
            return messageBoxWindow;
        }

        /// <summary>
        /// Box实现Part 可以隐藏关闭按钮
        /// </summary>  
        public static GChildWindow ShowMessageBoxEx(String caption, String message, DPSelectedItemEventHandler handler, string[] buttons, bool ShowClose)
        {
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            Super.InitChildWindow(messageBoxWindow, "MessageBoxExWindow");
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);
            MyMessageBoxExPart messageBoxPart = U3DUtils.NEW<MyMessageBoxExPart>();
            m_MessageBoxPart = messageBoxPart;
            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxPart.InitPartData(caption, message, buttons);
            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
                m_MessageBoxPart = null;
            };

            messageBoxPart.SetCloseBtnEnable(ShowClose);

            if (null != messageBoxWindow.ChildWindowClose)
            {
                messageBoxWindow.ChildWindowClose = (s1, e1) =>
                    {
                        handler(s1, new DPSelectedItemEventArgs() { ID = -1000 });
                        return true;
                    };
            }
            return messageBoxWindow;
        }

        /// <summary>
        /// Box实现Part，GUI方式 
        /// </summary>  
        public static GChildWindow ShowMessageBoxGUI(String caption, String message, DPSelectedItemEventHandler handler, params string[] buttons)
        {
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            messageBoxWindow.ModalType = ChildWindowModalType.TranslucentGUI;
            Super.InitChildWindow(messageBoxWindow, "MessageBoxExWindow");
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);
            MyMessageBoxExPart messageBoxPart = U3DUtils.NEW<MyMessageBoxExPart>();
            m_MessageBoxPart = messageBoxPart;
            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            messageBoxPart.InitPartData(caption, message, buttons);
            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
                m_MessageBoxPart = null;
            };

            if (null != messageBoxWindow.ChildWindowClose)
            {
                messageBoxWindow.ChildWindowClose = (s1, e1) =>
                {
                    handler(s1, new DPSelectedItemEventArgs() { ID = -1000 });
                    return true;
                };
            }
            return messageBoxWindow;
        }

        /// <summary>
        /// Box实现Part
        /// </summary>  
        public static GChildWindow ShowMessageBoxExt(String caption, String message, float delay, DPSelectedItemEventHandler handler, params string[] buttons)
        {
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            Super.InitChildWindow(messageBoxWindow, "MessageBoxExWindow");
            GData.GlobalPlayZone.Children.Add(messageBoxWindow);
            MessageBoxExtPart messageBoxtPart = U3DUtils.NEW<MessageBoxExtPart>();
            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxtPart, 9, 0);
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxtPart.InitPartData(caption, message, delay, buttons);
            messageBoxtPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxtPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.CloseChildWindow(GData.GlobalPlayZone.Children, messageBoxWindow);
                handler(s, new DPSelectedItemEventArgs() { ID = messageBoxReturn });
            };

            return messageBoxWindow;
        }

        /// <summary>
        /// 弹出消息框
        /// </summary>  
        public static GChildWindow ShowMessageBox2(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String caption, String message, int rootWidth, int rootHeight)
        {
            GChildWindow messageBoxWindow = Super.ShowMessageBox(root, 0, caption, message, ((int)(rootWidth) - 300) / 2, ((int)(rootHeight) - 163) / 2, (int)(rootWidth), (int)(rootHeight), 0.01);
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;
            messageBoxWindow.ChildWindowClose = (s1, e1) =>
            {
                Super.CloseMessageBox(root, messageBoxWindow);
                return true;
            };

            return messageBoxWindow;
        }

        /// <summary>
        /// 关闭弹出消息框
        /// </summary>  
        public static void CloseMessageBox(HSGameEngine.GameEngine.SilverLight.Canvas root, GChildWindow messageBoxWindow)
        {
            //Super.ActiveDialogLayer(false);
            GameObject.Destroy(messageBoxWindow.gameObject);
        }

        /// <summary>
        /// 弹出消息框
        /// </summary>  
        public static void ShowMessageBoxEx(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String caption, String message, int left = -1, int top = -1, int width = -1, int height = -1, bool refreshPage = false)
		{
            ShowMessageBoxEx(root, boxType, caption, message, null, null);
		}

        /// <summary>
        ///  弹出消息框,可指定按钮的回调
        /// </summary>
        /// <param name="RegOkCallBack">指定的确定按钮的回调</param>
        /// <param name="OkButtonText">指定的确定按钮文本</param>
        public static void ShowMessageBoxEx(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String caption, String message, MouseLeftButtonUpEventHandler RegOkCallBack, string OkButtonText, int left = -1, int top = -1, int width = -1, int height = -1, bool refreshPage = false)
        {
            GChildWindow messageBoxWindow = Super.ShowMessageBox(root, boxType, caption, message, left, top, width, height, 0.01, new Vector3(), RegOkCallBack, OkButtonText);
            messageBoxWindow.ModalType = ChildWindowModalType.TransBak;
            messageBoxWindow.ChildWindowClose = (s1, e1) =>
            {
                Super.CloseMessageBox(root, messageBoxWindow);
                if (refreshPage)
                {
                    //Super.InstantPageRefresh();
                }

                return true;
            };
        }

        ///弹出窗口时是否勾选不再提示，设置位Super.MessageBoxIsHint[]
        public static void SetArrayElement(int[] arr, int index, int value)
        {
            if (null == arr)
                return;

            if (index < 0 || index >= arr.Length)
                return;

            arr[index] = value;
        }

        /// <summary>
        /// 弹出登录提示账号信息
        /// </summary>
        /// <param name="root">窗体的父节点 Global.MainStage</param>
        /// <param name="_caption">窗体标题</param>
        /// <param name="_comfirmIconText">按钮文字</param>
        /// <param name="_message">显示信息</param>
        /// <param name="_second">封号剩余时间（秒）</param>
        /// <param name="_fengHaoBl">是否显示封号剩余时间</param>
        public static GChildWindow ShowLoginYiChang(HSGameEngine.GameEngine.SilverLight.Canvas root, string _comfirmIconText, string _message, int _second = 0, bool _fengHaoBl = false, Vector3 pos = new Vector3())
        {
            GChildWindow messageBoxWindow = U3DUtils.NEW<GChildWindow>();
            ZhangHaoJingGao messageBoxPart = U3DUtils.NEW<ZhangHaoJingGao>();
            Super.InitChildWindow(messageBoxWindow, "messageBoxWindow");
            messageBoxWindow.ModalType = ChildWindowModalType.Translucent;

            messageBoxPart.HintText = _message;
            messageBoxPart.HintComfirmIconText = _comfirmIconText;
            if (_second > 0)
            {
                messageBoxPart.Second = _second;
                messageBoxPart.FengHaoBl = _fengHaoBl;
            }
            messageBoxPart.ShowInfo();

            messageBoxPart.ButtonClick = (s, e) =>
            {
                int messageBoxReturn = messageBoxPart.MyMessageBoxPartReturn;
                messageBoxWindow.NotifyClose(messageBoxReturn);
                Super.m_MessageBoxPart = null;
                Super.CloseChildWindow(root, messageBoxWindow);
            };

            messageBoxWindow.SetContent(messageBoxWindow.BodyPresenter, messageBoxPart, 9, 0);
            root.Children.Add(messageBoxWindow);

            messageBoxWindow.X = pos.x;
            messageBoxWindow.Y = pos.y;

            return messageBoxWindow;

        }

        #endregion 弹出消息窗口

        #region 非模态弹出窗口消息

        /// <summary>
        /// 显示非模态的窗口
        /// </summary>
        /// <param name="root"></param>
        /// <param name="boxType"></param>
        /// <param name="message"></param>
        /// <param name="left"></param>
        /// <param name="top"></param>
        /// <param name="millisecs"></param>
        /// <param name="name"></param>
        /// <param name="okName"></param>
        /// <param name="cancelName"></param>
        /// <returns></returns>
        public static NoTitleWindow ShowDialogBox(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String message, int left = -1, int top = -1, int millisecs = 0, String name = "", String okName = "确定", String cancelName = "取消")
        {
            if (okName == "确定")
            {
                okName = Global.GetLang("确定");
            }

            if (cancelName == "取消")
            {
                cancelName = Global.GetLang("取消");
            }

            NoTitleWindow dialogBoxWindow = U3DUtils.NEW<NoTitleWindow>();
            Super.InitNoTitleWindow(dialogBoxWindow);

            MyDialogBoxPart dialogBoxPart = U3DUtils.NEW<MyDialogBoxPart>();

            dialogBoxPart.HintTitle = Global.GetLang("提示");
            dialogBoxPart.HintText = message;
            dialogBoxPart.BoxType = boxType;
            dialogBoxPart.OkText = okName;
            dialogBoxPart.CancelText = cancelName;
            dialogBoxPart.TimerClose(millisecs);
            dialogBoxPart.Name = name;

            dialogBoxPart.ButtonClick = (s, e) =>
            {
                int dialogBoxReturn = dialogBoxPart.MyDialogBoxPartReturn;
                dialogBoxWindow.NotifyClose(dialogBoxReturn);
            };

            dialogBoxWindow.SetContent(dialogBoxWindow.BodyPresenter, dialogBoxPart, 2, 2);
            HSGameEngine.GameEngine.SilverLight.Canvas.SetZIndex(dialogBoxWindow, 9002);

            if (!string.IsNullOrEmpty(name))
            {
                dialogBoxWindow.Name = name;
            }

            root.Children.Add(dialogBoxWindow);

            return dialogBoxWindow;
        }

        /// <summary>
        /// 显示非模态的窗口
        /// </summary>
        /// <param name="root"></param>
        /// <param name="boxType"></param>
        /// <param name="message"></param>
        /// <param name="millisecs"></param>
        /// <param name="name"></param>
        public static void ShowDialogBox2(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String message, int millisecs = 0, String name = "")
        {
            NoTitleWindow dialogBoxWindow = Super.ShowDialogBox(root, 0, message, -1, -1, millisecs, name);
            dialogBoxWindow.ChildWindowClose = (s1, e1) =>
            {
                GameObject.Destroy(dialogBoxWindow.gameObject);
                dialogBoxWindow = null;
                return true;
            };
        }

        /// <summary>
        /// 显示非模态的窗口
        /// </summary>
        /// <param name="root"></param>
        /// <param name="boxType"></param>
        /// <param name="message"></param>
        /// <param name="left"></param>
        /// <param name="top"></param>
        /// <param name="millisecs"></param>
        /// <param name="name"></param>
        public static void ShowDialogBoxEx(HSGameEngine.GameEngine.SilverLight.Canvas root, int boxType, String message, int left = -1, int top = -1, int millisecs = 0, String name = "")
        {
            NoTitleWindow dialogBoxWindow = Super.ShowDialogBox(root, boxType, message, left, top, millisecs, name);
            dialogBoxWindow.ChildWindowClose = (s1, e1) =>
            {
                GameObject.Destroy(dialogBoxWindow.gameObject);
                dialogBoxWindow = null;
                return true;
            };
        }

        /// <summary>
        /// 关闭弹出框
        /// </summary>  
        public static void CloseDialogBox(HSGameEngine.GameEngine.SilverLight.Canvas root, NoTitleWindow dialogBoxWindow)
        {
            if (dialogBoxWindow != null)
            {

                WindowManage.RemoveWindows(dialogBoxWindow);
                GameObject.Destroy(dialogBoxWindow.gameObject);
                dialogBoxWindow = null;
            }
        }

        #endregion 非模态弹出窗口消息

        #region 初始化Xap传入的自定义参数（间接调用Global中的函数，主要是为了代码一直兼容）

        /// <summary>
        /// 根据名称获取Xap的自定义参数，以字符串类型返回
        /// </summary>  
        public static String GetXapParamByName(String name, String defVal = "")
        {
            return Global.GetXapParamByName(name, defVal);
        }

        #endregion 初始化Xap传入的自定义参数（间接调用Global中的函数，主要是为了代码一直兼容）

        #region 加载/更新/登录/角色切换/进入

        /// <summary>
        /// 显示等待加载游戏资源的游戏窗口
        /// </summary>  
        public static void ShowLoadingGame(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            LoadingGame loadingGame = U3DUtils.NEW<LoadingGame>();

            loadingGame.NextStep = (s, e) =>
            {
                GameObject.Destroy((s as LoadingGame).gameObject);

                //清空场景中的3D对象
                //U3DUtils.ClearAll3DObjects(true, true);
                Global.InitFilterFields();
                if (Global.GetLoginMode() == "0")
                {
                    //显示等待进入游戏窗口
                    ToGame toGame = Super.ShowToGame(root);

                    //显示公告面板，没显示过(NoticeShowed = 0)，并且可以去到服务器ID(LastServerInfoID != 0)
                    if (PlayerPrefs.GetInt("NoticeShowed") == 0 &&
                        PlayerPrefs.GetInt("NewLastServerInfoID") != 0)
                    {
                        ShowNoticeWindow(root);
                        PlayerPrefs.SetInt("NoticeShowed", 1);
                    }

                    String strUID = Global.StringReplaceAll(Super.GetXapParamByName("uid", ""), ":", "");
                    if ("-1" == strUID)
                    {
                        //初始化非法词汇
                        Global.InitFilterFields();

                        //// 接入了平台的，进行平台登录
                        //PlatSDKMgr.Login(toGame);
                    }
                }
                else
                {
                    Global.InitFilterFields();
                    if (PlatSDKMgr.PlatName == "QQ" || PlatSDKMgr.PlatName == "YYB")
                    {
                        Super.ShowTencentLogin(root);
                        if (PlayerPrefs.GetInt("NoticeShowed") == 0 &&
                         PlayerPrefs.GetInt("NewLastServerInfoID") != 0)
                        {
                            ShowNoticeWindow(root);
                            PlayerPrefs.SetInt("NoticeShowed", 1);
                        }
                        return;
                    }
                    Super.ShowPlatformUserLogin(root);

 //#if UNITY_EDITOR
                    Dictionary<string, string> info = new Dictionary<string, string>();
                    info.Add("uid", Super.GetXapParamByName("uid", ""));
                    string arg = MUJson.jsonEncode(info).ToString();
                    PlatformAccountVerify.GetPlatformUID(arg);
//#endif

                    //显示公告面板，没显示过，并且可以去到服务器ID
                    if (PlayerPrefs.GetInt("NoticeShowed") == 0 &&
                        PlayerPrefs.GetInt("NewLastServerInfoID") != 0)
                    {
                        ShowNoticeWindow(root);
                        PlayerPrefs.SetInt("NoticeShowed", 1);
                    }

                    String strUID = Global.Data.UserID; //Global.StringReplaceAll(Super.GetXapParamByName("uid", ""), ":", "");
                    if (string.IsNullOrEmpty(strUID) || strUID.Equals("-1"))
                    {
                        //初始化非法词汇
                        Global.InitFilterFields();
                        // 接入了平台的，进行平台登录
                        PlatSDKMgr.Login(null);
                    }
                }
            };

            root.Children.Add(loadingGame);
        }

        private static CheckingUpdateGame CheckingGame = null;
        /// <summary>
        /// 显示《检查更新中》的窗口
        /// </summary>
        /// <param name="root"></param>
        public static void ShowCheckingUpdateGame(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            if (CheckingGame == null)
            {
                CheckingGame = U3DUtils.NEW<CheckingUpdateGame>();
                root.Children.Add(CheckingGame);
            }
        }

        /// <summary>
        /// 释放《检查更新中》的窗口
        /// </summary>
        public static void DestroyCheckingUpdateGame()
        {
            if (CheckingGame != null)
            {
                GameObject.Destroy(CheckingGame.gameObject);
                CheckingGame = null;
            }
        }


        private static UpdateGame UpdateGameInstance = null;

        /// <summary>
        /// 显示更新游戏资源的游戏窗口
        /// </summary>  
        public static void ShowUpdateGameForUpdate(HSGameEngine.GameEngine.SilverLight.Canvas root, int localAppVerCode, int remoteAppVerCode, string url, byte[] remoteVersionBytes, List<XElement> needUpdateList, List<string> needDeleteList)
        {
            if (UpdateGameInstance == null)
            {
                UpdateGameInstance = U3DUtils.NEW<UpdateGame>();
                UpdateGameInstance.NextStep = (s, e) =>
                {
                    GameObject.Destroy((s as UpdateGame).gameObject);
                    UpdateGameInstance = null;

                    //清空场景中的3D对象
                    //U3DUtils.ClearAll3DObjects(true, true);

                    //显示等待进入游戏窗口
                    Super.ShowLoadingGame(root);
                    MUDebug.Log("ShowLoadingGame:" + Time.realtimeSinceStartup);
                };
            }

            UpdateGameInstance.LocalAppVerCode = localAppVerCode;
            UpdateGameInstance.RemoteAppVerCode = remoteAppVerCode;
            UpdateGameInstance.URL = url;
            UpdateGameInstance.RemoteVersionBytes = remoteVersionBytes;
            UpdateGameInstance.NeedToUpdateFileList = needUpdateList;
            UpdateGameInstance.NeedToDeleteFileList = needDeleteList;

            UpdateGameInstance.ShowUpdateGameInfo();

            //根据是否需要更新内容，确定界面是否需要显示处理。如没有更新，则就不显示了。
            if ((needUpdateList != null && needUpdateList.Count > 0) ||
                 (needDeleteList != null && needDeleteList.Count > 0) ||
                localAppVerCode < remoteAppVerCode)
            {
                if(UpdateGameInstance != null)
                {
                    root.Children.Add(UpdateGameInstance);
                }
            }
        }

        ///// <summary>
        ///// 资源还为准备好的情况
        ///// </summary>
        ///// <param name="root"></param>
        //public static void ShowUpdateGameResNotReady(HSGameEngine.GameEngine.SilverLight.Canvas root)
        //{
        //    if(UpdateGameInstance == null)
        //    {
        //        UpdateGameInstance = U3DUtils.NEW<UpdateGame>();
        //        UpdateGameInstance.NextStep = (s, e) =>
        //        {
        //            GameObject.Destroy((s as UpdateGame).gameObject);
        //            UpdateGameInstance=null;
        //            //清空场景中的3D对象
        //            //U3DUtils.ClearAll3DObjects(true, true);

        //            //显示等待进入游戏窗口
        //            Super.ShowLoadingGame(root);
        //        };
        //    }
        //    UpdateGameInstance.SetProcessText ("正在获取本地和网络端版本信息");
        //    root.Children.Add(UpdateGameInstance);
        //}

        public static PlatformUserLogin platformLogin = null;//记录下，防止多次加载
        public static PlatformUserLogin ShowPlatformUserLogin(HSGameEngine.GameEngine.SilverLight.Canvas root,  bool isShowSelectPlatform=true)
        {
            if (platformLogin == null)
            {
                platformLogin = U3DUtils.NEW<PlatformUserLogin>();

                platformLogin.LoginGameToLineServer = (s, e) =>
                {
                    platformLogin = null;
                    GameObject.Destroy((s as PlatformUserLogin).gameObject);

                    (s as PlatformUserLogin).DestroyLogin3Map();


                    //清空场景中的3D对象
                    U3DUtils.ClearAll3DObjects(true, true);

                    //跳过选线界面
                    Super.FakeConnectToLineServer();

                    //显示角色管理
                    Super.ShowRoleManager(root);
					// dataeye 统计登录
#if UNITY_ANDROID
					DCAccount.login(Global.Data.UserID,Global.Data.GameServerID.ToString());
#endif
                };

                root.Children.Add(platformLogin);
            }
            return platformLogin;
        }

        public static TencentLogin tencentLogin = null;//记录下，防止多次加载
        public static TencentLogin ShowTencentLogin(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            if (tencentLogin == null)
            {
                tencentLogin = U3DUtils.NEW<TencentLogin>();

                tencentLogin.DPSelectedItem = (s, e) =>
                {
                    tencentLogin = null;
                    GameObject.Destroy((s as TencentLogin).gameObject);
                };

                root.Children.Add(tencentLogin);
            }
            return tencentLogin;
        }


        /// <summary>
        /// 显示等待进入游戏窗口
        /// </summary>  
        public static ToGame ShowToGame(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            ToGame toGame = U3DUtils.NEW<ToGame>();

            // 注册账号按钮
            toGame.RegAccount = (s, e) =>
            {
                String loginMode = Global.GetLoginMode();
                if ("0" == loginMode)
                {
                    GameObject.Destroy((s as ToGame).gameObject);

                    // 显示用户登陆
                    Super.ShowUserLogin(root);
                }
                //else
                //{
                //    // 没有成功登录过平台，重新登录
                //    String strUID = Global.StringReplaceAll(Super.GetXapParamByName("uid", ""), ":", "");
                //    //if ("-1" == strUID)
                //    {
                //        PlatSDKMgr.LoginOut("");
                //        PlatSDKMgr.Login((s as ToGame));
                //        return;
                //    }

                //    //// 成功登录，显示服务器列表
                //    //GameObject.Destroy((s as ToGame).gameObject);
                //    //// 显示服务器列表
                //    //Super.ShowXuanFuPart(root);
                //}
            };

            toGame.NextStep = (s, e) =>
            {
                String loginMode = Global.GetLoginMode();
                if ("0" == loginMode)
                {
                    GameObject.Destroy((s as ToGame).gameObject);

                    // 显示用户登陆
                    Super.ShowUserLogin(root);
                }
                //else
                //{
                //    // 没有成功登录过平台，提示重新登录
                //    String strUID = Global.StringReplaceAll(Super.GetXapParamByName("uid", ""), ":", "");
                //    if ("-1" == strUID)
                //    {
                //        // 登录失败提示
                //        Super.ShowMessageBoxEx (Global.MainStage, 0, Global.GetLang ("错误"), Global.GetLang ("服务器验证失败，请注册账号或退出重新登陆再试..."), -1, -1, -1, -1, false);
                //        return;
                //    }

                //    // 成功登录，显示服务器列表
                //    GameObject.Destroy((s as ToGame).gameObject);
                //    // 显示服务器列表
                //    Super.ShowXuanFuPart(root);
                //}
            };

            root.Children.Add(toGame);
            return toGame;
        }


        private static UserLogin UserLoginInstance; //保存一下。防止出现多次加载
        /// <summary>
        /// 显示用户登陆
        /// </summary>  
        public static void ShowUserLogin(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            if (UserLoginInstance == null)
            {
                UserLoginInstance = U3DUtils.NEW<UserLogin>();
                UserLoginInstance.LoginGameToLineServer = (s, e) =>
                {
                    MUDebug.Log("UserLoginInstance = null");
                    UserLoginInstance = null;
                    GameObject.Destroy((s as UserLogin).gameObject);

                    (s as UserLogin).DestroyLogin3Map();

                    //清空场景中的3D对象
                    U3DUtils.ClearAll3DObjects(true, true);

                    //跳过选线界面
                    Super.FakeConnectToLineServer();

                    //显示角色管理
                    Super.ShowRoleManager(root);
                };
                root.Children.Add(UserLoginInstance);
            }

        }

        ////显示选服界面
        //public static void ShowXuanFuPart(HSGameEngine.GameEngine.SilverLight.Canvas root)
        //{
        //    XuanFuPart xuanFuPart = U3DUtils.NEW<XuanFuPart>();
        //    xuanFuPart.DPSelectedItem = (s, e) =>
        //    {
        //        // 关闭先服菜单
        //        if (1 == e.ID)
        //        {
        //            GameObject.Destroy((s as XuanFuPart).gameObject);
        //        }
        //        // 选中了某服务器
        //        else if(2 == e.ID)
        //        {

        //            String loginMode = Global.GetLoginMode();
        //            if ("0" != loginMode)
        //            {
        //                ServerInfoVO infoVo = (ServerInfoVO)e.Data;
        //                Global.RootParams["serverip"] = infoVo.ServerUrl;
        //                Global.RootParams["gameport"] = "" + infoVo.Port;
        //                Global.RootParams["loginport"] = "" + infoVo.Port;



        //                //PlayerPrefs.SetInt("LastServerInfoID", infoVo.ServerID);
        //                //PlatSDKMgr.ConnectToLoginServer((s as XuanFuPart));
        //            }
        //            else
        //            {
        //                GameObject.Destroy((s as XuanFuPart).gameObject);
        //            }
        //        }
        //    };
        //    root.Children.Add(xuanFuPart);
        //}


        /// <summary>
        /// 跳过选线界面
        /// </summary>
        public static void FakeConnectToLineServer()
        {
            String loginIP = Super.GetXapParamByName("serverip", "127.0.0.1");
            Global.LineDataList = new List<LineData>();
            LineData lineData = new LineData()
            {
                LineID = 1,
                GameServerIP = loginIP,
                GameServerPort = Global.GetGameServerPort(),
                OnlineCount = 0,
            };

            Global.LineDataList.Add(lineData);
            Global.CurrentListData = Global.LineDataList[0];
        }

        /// <summary>
        /// 显示角色管理
        /// </summary>  
        public static void ShowRoleManager(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            roleManager = U3DUtils.NEW<RoleManager>();



            roleManager.DirectLogin = (-1 != Global.Data.RoleID);
            if (KuaFuLoginManager.DirectLogin())
            {

                roleManager.DirectLogin = true;

            }


            roleManager.StartGameByRole = (s, e) =>
            {
                bool connectFailed = roleManager.ConnectFailed;

                GameObject.Destroy(roleManager.gameObject);

                //清空场景中的3D对象
                U3DUtils.ClearAll3DObjects(true, true);

                if (!connectFailed)
                {
                    Super.ConnectToGameServerFailed = false;
                    ShowLoadingMap(root);
                }
                else
                {
                    Super.ConnectToGameServerFailed = true;
                    //ShowLineLogin(root);
                    String loginMode = Global.GetLoginMode();
                    if (loginMode == "0")
                    {
                        Super.ShowUserLogin(root);
                    }
                    else
                    {
                        Super.ShowPlatformUserLogin(root);
                    }

                }
            };

            roleManager.GoBackEvent = (s, e) =>
            {
                GameObject.Destroy(roleManager.gameObject);

                //清空场景中的3D对象
                U3DUtils.ClearAll3DObjects(true, true);
                Super.ConnectToGameServerFailed = true;

                GameInstance.Game.Disconnect();
                GameInstance.Game = null;

                GameInstance.Game = new TCPGame();//TCPClient
              
                String loginMode = Global.GetLoginMode();
                if (loginMode == "0")
                {
                    Super.ShowUserLogin(root);
                }
                else
                {
                    Super.ShowPlatformUserLogin(root);
                }
            };

            root.Children.Add(roleManager);
        }

        public static void DestroyRoleManagerAndBack()
        {
            if (roleManager != null)
            {
                roleManager.ClosedBySDK();
            }
        }

        /// <summary>
        /// 当前正在加载的地图
        /// </summary>
        public static LoadingMap CurrentLoadingMap = null;

        public static void BackToLogin()
        {
            //清空场景中的3D对象
            U3DUtils.ClearAll3DObjects(true, true);
            Super.ConnectToGameServerFailed = true;

            GameInstance.Game.Disconnect();
            GameInstance.Game = null;
            // 备份一个roleData  解决跨服是出现的roleData为null的情况
            if (Global.Data != null)
            {
                Global.CopyRoleData(Global.Data.roleData);
            }
            GameInstance.Game = new TCPGame();//TCPClient
            Global.SetGameRoleData();

            String loginMode = Global.GetLoginMode();
            if (loginMode == "0")
            {
                Super.ShowUserLogin(Super.MainWindowRoot);
            }
            else
            {
                Super.ShowPlatformUserLogin(Super.MainWindowRoot);
            }
        }
        /// <summary>
        /// 关闭当前的地图加载窗口
        /// </summary>
        public static void DestroyLoadingMap()
        {
            if (null == Super.CurrentLoadingMap)
            {
                return;
            }

            //GameObject.Destroy(Super.CurrentLoadingMap.gameObject);

            GameObject go = Super.CurrentLoadingMap.gameObject;
            Super.CurrentLoadingMap.Remove(go);
            Super.CurrentLoadingMap = null;
            GameObject.Destroy(go);
        }

        /// <summary>
        /// 显示地图加载
        /// </summary>  
        public static void ShowLoadingMap(HSGameEngine.GameEngine.SilverLight.Canvas root, int loadType = 2)
        {
            LoadingMap loadingMap = U3DUtils.NEW<LoadingMap>();
            DestroyLoadingMap();
            CurrentLoadingMap = loadingMap;

            if (2 == loadType)
            {
                loadingMap.MapCode = Global.Data.roleData.MapCode;
            }

            loadingMap.WorkFinished = (s2, e2) =>
            {
                //GameObject.Destroy(loadingMap.gameObject);
                ShowGameManager(root);

                //shizhu added：根据配置确定是否播放背景音乐
                if (null != Global.BackgroundAudio43D)
                {
                    if (!Global.Data.SysSetting.CloseGameMusic)
                    {
                        Global.BackgroundAudio43D.PlayAudio(ConfigSettings.GetMapMusicFileByCode(Global.Data.roleData.MapCode), true);
                    }
                    else
                    {
                        Global.BackgroundAudio43D.StopPlay();
                    }
                }
            };

            loadingMap.LoadType = loadType;

            root.Children.Add(loadingMap);
        }

        /// <summary>
        /// 显示游戏管理
        /// </summary>  
        public static void ShowGameManager(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            GameManager gameManager = U3DUtils.NEW<GameManager>();
            root.Children.Add(gameManager);

            gameManager.Coordinate = new Point(0, 0);
            gameManager.Z = 0;

            MainGameMgr = gameManager;

#if UNITY_IPHONE && APPS
            PlayZone.GlobalPlayZone.StartPaymentVerify();
#endif
        }

        #endregion 加载/更新/登录/角色切换/进入

        #region UI大小和位置

        public static Vector2 GetMainUISize()
        {
            MyAnchorCamera ac = Global.UICamera.GetComponent<MyAnchorCamera>();
            if (null != ac)
            {
                return new Vector2(ac.suitableUI_width, ac.suitableUI_width * Screen.height / Screen.width);
            }

            return new Vector2(960, 540);
        }

        #endregion

        #region 兼容属性

        public static RoleAttributePart _RoleAttributePart { get; set; }
        //public static ZhuangBeiPart _ZhuangBeiPart { get; set; }
        public static ParcelPart _ParcelPart { get; set; }
        #endregion 兼容属性

        #region 提示

        //是否有窗口显示在界面中
        public static bool HasGChildWindowShown()
        {
            if (null == Super.GData.PlayZoneRoot)
            {
                return false;
            }
            Transform t = Super.GData.PlayZoneRoot.transform;
            int totalChildCount = t.childCount;
            for (int i = 0; i < totalChildCount; i++)
            {
                if (t.GetChild(i).gameObject.name == "GChildWindow(Clone)")
                {
                    if (NGUITools.GetActive(t.GetChild(i).gameObject))
                    {
                        return true;
                    }
                }
            }
            return false;
        }


        public static void HintMainText(string msg, int maxCount = 10, int singleMax = 3)
        {
            //数量超限,清除旧信息
            int oldKey = -1;
            int key = msg.GetHashCode();
            if (maxCount > 0 && Super.goodsHintDict.Count >= maxCount)
            {
                long lastTicks = long.MaxValue;
                if (!Super.goodsHintDict.ContainsKey(key))
                {
                    foreach (var kv in Super.goodsHintDict)
                    {
                        HintTextdata htd = kv.Value.Peek();
                        if (null != htd && htd.Ticks < lastTicks)
                        {
                            lastTicks = htd.Ticks;
                            oldKey = kv.Key;
                        }
                    }

                    if (lastTicks < long.MaxValue)
                    {
                        Super.goodsHintDict.Remove(oldKey);
                    }
                }
            }

            //int key = UnityEngine.Random.Range(int.MaxValue - 0x100000, int.MaxValue);
            //int key = Global.GetMyTimer();
            Queue<HintTextdata> queue;
            if (!Super.goodsHintDict.TryGetValue(key, out queue))
            {
                queue = new Queue<HintTextdata>();
                Super.goodsHintDict.Add(key, queue);
            }
            if (queue.Count >= singleMax)
            {
                queue.Dequeue();
            }
            queue.Enqueue(new HintTextdata(msg));
        }

        public static void HintNewGoodsText(GoodsData goodsData, int goodsCount, int hint = 0)
        {
#if true
            Super.PlayGoodsSound(goodsData.GoodsID);

            string goodsName = UIHelper.FormatGoodsName(goodsData);
            if (hint > 0)
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyBox, StringUtil.substitute(Global.GetLang("新物品到随身仓库【{0}】({1})"), goodsName, goodsCount));
            }
            // string msg = String.Format(Global.GetLang("您获得了: {{{0}}}{1}{{-}}x{2}"), Global.GetStrColorByGoodsData(goodsData), goodsName, goodsCount);
            string msg = String.Format(Global.GetLang("您获得了: {0}x{1}"), goodsName, goodsCount);
            Super.HintMainText(msg);
            //if (!Super.goodsHintDict.ContainsKey(goodsData.Id))
            //{
            //    Super.goodsHintDict.Add(goodsData.Id, msg);
            //}
            //Global.Data.GameScene.ShowLeaderText(msg, 2000);
#else
			String goodsName =  Global.GetGoodsNameByID(Convert.ToInt32(e.fields[2]));
            if (hint > 0)
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyBox, StringUtil.substitute(Global.GetLang("新物品到随身仓库【{0}】({1})"), goodsName, goodsCount));
            }
            string msg = StringUtil.substitute(Global.GetLang("得到物品[{0}]x{1}"), goodsName, goodsCount);
			SystemHintWindow.AddRoleInfoHintText(Colors.Yellow, StringUtil.substitute(Global.GetLang("得到物品[{0}]x{1}"), goodsName, Convert.ToInt32(e.fields[5])));
#endif

        }

        #endregion 提示

        #region 图片相关

        /// <summary>
        /// 获取xml中的IconCode值
        /// </summary>
        /// <param name="xmlItem"></param>
        /// <returns></returns>  
        public static String GetIconCode(XElement xmlItem)
        {
            if (null == xmlItem)
            {
                return "";
            }
            String iconCode = Global.GetXElementAttributeStr(xmlItem, "IconCode");
            if (string.IsNullOrEmpty(iconCode))
            {
                iconCode = Global.GetXElementAttributeStr(xmlItem, "ID");
            }
            return iconCode;
        }

        /// <summary>
        /// 获取GoodVO中的IconCode值
        /// </summary>
        /// <param name="goodVO"></param>
        /// <returns></returns>
        public static String GetIconCode(GoodVO goodVO)
        {
            if (null == goodVO)
            {
                return "";
            }
            String iconCode = goodVO.IconCode;
            if (string.IsNullOrEmpty(iconCode))
            {
                iconCode = goodVO.ID.ToString();
            }
            return iconCode;
        }

        /// <summary>
        /// 获取xml中的IconCode值
        /// </summary>
        /// <param name="xmlItem"></param>
        /// <returns></returns>  
        public static String GetIconCode(int goodsID)
        {
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);

            return GetIconCode(goodVO);
        }

        /// <summary>
        /// 获取窗体背景图片地址
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static String GetWindowsBakImageURLFromName(String name)
        {
            return StringUtil.substitute("NetImages/GameRes/Images/Plate/{0}", name);
        }

        /// <summary>
        /// 获取技能图标地址
        /// </summary>
        /// <param name="iconCode"></param>
        /// <returns></returns>  
        public static String GetSkillImageURLFromIconCode(String skillCode, String prePath = "")
        {
            return StringUtil.substitute("{0}Images/Skill/{1}.png", prePath, skillCode);
        }

        /// <summary>
        /// 获取物品图标地址
        /// </summary>
        /// <param name="iconCode"></param>
        /// <returns></returns>  
        public static String GetGoodsImageURLFromIconCode(String iconCode, String prePath = "")
        {
            return StringUtil.substitute("{0}Images/Goods/{1}.png", prePath, iconCode);
        }

        /// <summary>
        /// 获取物品图标地址扩展
        /// </summary>
        /// <param name="iconCode"></param>
        /// <returns></returns>  
        public static String GetGoodsImageURLFromIconCodeEx(String iconCode)
        {
            return StringUtil.substitute("NetImages/Sales/{0}.png", iconCode);
        }

        public static String GetFuBenPreviewImageString(String iconCode)
        {
            return StringUtil.substitute("NetImages/GameRes/Images/Preview/{0}.png", iconCode);
        }

        public static String GetFuBenPreviewImageString2(String iconCode)
        {
            return StringUtil.substitute("NetImages/GameRes/Images/Preview/{0}.jpg", iconCode);
        }

        public static String GetTaskImageString(String iconCode)
        {
            return StringUtil.substitute("NetImages/GameRes/Images/Task/{0}.png", iconCode);
        }

        public static String GetTaskImageString2(String iconCode)
        {
            return StringUtil.substitute("NetImages/GameRes/Images/Task/{0}.jpg", iconCode);
        }

        /// <summary>
        /// 获取物品图标
        /// </summary>
        /// <param name="iconCode"></param>
        /// <returns></returns>  
        public static BitmapData GetGoodsImageFromFile(String iconCode)
        {
            BitmapData bd = null;
            try
            {
                bd = Global.GetGameResImage(StringUtil.substitute("Images/Goods/{0}.png", iconCode));
                if (null == bd)
                {
                    bd = Global.GetGameResImage(StringUtil.substitute("Images/Plate/default.png"));
                }
                return bd;
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
                bd = null;
            }
            try
            {
                bd = Global.GetGameResImage(StringUtil.substitute("Images/Plate/default.png"));
            }
            catch (Exception)
            {
                bd = null;
            }
            return bd;
        }

        /// <summary>
        /// 将位图转为灰色图像
        /// </summary>
        /// <param name="bitmapImage"></param>
        /// <returns></returns>
        public static BitmapData ConvertBitmapToGrayBitmap(BitmapData bitmapImage, Boolean toGray = true)
        {
            return bitmapImage;
        }

        //子窗口相关

        /// <summary>
        /// 隐藏子窗口
        /// </summary>
        /// <param name="childWindow"></param>
        public static void HideChildWindow(GChildWindow childWindow)
        {
            //GChildWindow.PopZ();

            WindowManage.RemoveWindows(childWindow);
            MUDebug.Log(String.Format("GChildWindow.ZZ={0}", GChildWindow.ZZ));
        }

        /// <summary>
        /// 关闭子窗口
        /// </summary>  
        public static void CloseChildWindow(SpriteSL root, GChildWindow childWindow)
        {
            if (null == root)
            {
                root = childWindow.parent;
            }
            root.Remove(childWindow);
            if (childWindow.TitleText == "NPCDialog")
            {
            }
            else if (childWindow.TitleText == "NPCDialog")
            {
            }
            else
            {

                WindowManage.RemoveWindows(childWindow);
                //GChildWindow.PopZ();
            }
            MUDebug.Log(String.Format("GChildWindow.ZZ={0}", GChildWindow.ZZ));

            childWindow = null;
        }


        public static void CloseChildWindow(SpriteSL root, string titleText)
        {
            if (string.IsNullOrEmpty(titleText))
            {
                return;
            }

            if (null == root)
            {
                root = Super.GData.PlayZoneRoot;
            }
            if (null != root)
            {
                GChildWindow[] windows = root.GetComponentsInChildren<GChildWindow>();
                if (null == windows || windows.Length == 0)
                {
                    return;
                }
                for (int i = 0; i < windows.Length;++i )
                // foreach (GChildWindow child in windows)
                {
                    GChildWindow child = windows[i]; 
                    if (null != child.TitleText && 0 == child.TitleText.CompareTo(titleText))
                    {
                        child.ChildWindowClose(child, EventArgs.Empty);
                        CloseChildWindow(null, child);
                    }
                }
            }
        }

        /// <summary>
        /// 初始化窗口的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>
        private static void _InitChildWindow(GChildWindow childWindow, String title, double closeButtonLeft, double closeButtonTop, int titleType)
        {
            childWindow.TitleText = title;

            WindowManage.AddWindows(childWindow, childWindow.IsShowModal);

            //if (title == "NPCDialog")
            //{
            //    childWindow.ZIndex = 80;
            //}
            //else if (title =="NPCDialog")
            //{
            //    childWindow.ZIndex = 90;
            //}
            //else
            //{

            //    GChildWindow.PushZ(childWindow.IsShowModal);
            //    childWindow.ZIndex = GChildWindow.ZZ;
            //}

            //if (childWindow.ZIndex < -10000)

            //{

            //    MUDebug.LogError("运行值异常过大 GChildWindow.Z = " + childWindow.ZIndex);

            //}

            //else

            //{

            //    MUDebug.Log(String.Format("GChildWindow({1}).ZIndex={0}", childWindow.ZIndex, title));

            //}

        }

        /// <summary>
        /// 初始化窗口的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>
        public static void InitChildWindow(GChildWindow childWindow, String title)
        {
            _InitChildWindow(childWindow, title, 31, 10, 0);
        }

        /// <summary>
        /// 初始化窗口的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>
        public static void InitChildWindow1(GChildWindow childWindow, String title)
        {
            _InitChildWindow(childWindow, title, 25, 5, 1);
        }

        /// <summary>
        /// 初始化窗口的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>
        public static void InitChildWindow2(GChildWindow childWindow, String title)
        {
            _InitChildWindow(childWindow, title, 31, 10, 0);
        }

        //#########################################################################################################

        //#########################################################################################################
        //无标题窗口相关

        /// <summary>
        /// 关闭无标题窗口相关
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void CloseNoTitleWindow(HSGameEngine.GameEngine.SilverLight.Canvas root, NoTitleWindow noTitleWindow)
        {
            root.Children.Remove(noTitleWindow);
            {
                //noTitleWindow.visible = false;
                noTitleWindow = null;
                GData.NoTitleWindowCount--;
                if (GData.NoTitleWindowCount < 0)
                {
                    GData.NoTitleWindowCount = 0;
                }
            }
        }

        /// <summary>
        /// 初始化无标题窗口相关的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void InitNoTitleWindow(NoTitleWindow noTitleWindow)
        {
            //GChildWindow.ZZ++;
            //noTitleWindow.ZIndex = GChildWindow.ZZ;

            WindowManage.AddWindows(noTitleWindow);
            //noTitleWindow.TopBorderWidth = noTitleWindow.BodyWidth - 10 * 2;
            //noTitleWindow.TopBorderHeight = 10;
            //noTitleWindow.TopBorderLeft = 10;
            //noTitleWindow.TopBorderTop = 0;
            //noTitleWindow.TopBorderFill = Global.GetGameResImage("Images/Plate/rwdh_border_top.png");
            noTitleWindow.LeftBorderWidth = 10;
            noTitleWindow.LeftBorderHeight = noTitleWindow.BodyHeight - 10 * 2;
            //noTitleWindow.LeftBorderLeft = 0;
            //noTitleWindow.LeftBorderTop = 10;
            //noTitleWindow.LeftBorderFill = Global.GetGameResImage("Images/Plate/rwdh_border_left.png");
            noTitleWindow.RightBorderWidth = 10;
            noTitleWindow.RightBorderHeight = noTitleWindow.BodyHeight - 10 * 2;
            noTitleWindow.RightBorderLeft = noTitleWindow.BodyWidth - 10;
            //noTitleWindow.RightBorderTop = 10;
            //noTitleWindow.RightBorderFill = Global.GetGameResImage("Images/Plate/rwdh_border_right.png");
            noTitleWindow.BottomBorderWidth = noTitleWindow.BodyWidth - 10 * 2;
            noTitleWindow.BottomBorderHeight = 10;
            noTitleWindow.BottomBorderLeft = 10;
            noTitleWindow.BottomBorderTop = noTitleWindow.BodyHeight - 10;
            //noTitleWindow.BottomBorderFill = Global.GetGameResImage("Images/Plate/rwdh_border_bottom.png");
            //noTitleWindow.LeftTopCornerWidth = 10;
            //noTitleWindow.LeftTopCornerHeight = 10;
            //noTitleWindow.LeftTopCornerLeft = 0;
            //noTitleWindow.LeftTopCornerTop = 0;
            //noTitleWindow.LeftTopCornerFill = Global.GetGameResImage("Images/Plate/rwdh_corner_leftTop.png");
            //noTitleWindow.LeftBottomCornerWidth = 10;
            //noTitleWindow.LeftBottomCornerHeight = 10;
            //noTitleWindow.LeftBottomCornerLeft = 0;
            //noTitleWindow.LeftBottomCornerTop = noTitleWindow.BodyHeight - 10;
            //noTitleWindow.LeftBottomCornerFill = Global.GetGameResImage("Images/Plate/rwdh_corner_leftBottom.png");
            //noTitleWindow.RightTopCornerWidth = 10;
            //noTitleWindow.RightTopCornerHeight = 10;
            //noTitleWindow.RightTopCornerLeft = noTitleWindow.BodyWidth - 10;
            //noTitleWindow.RightTopCornerTop = 0;
            //noTitleWindow.RightTopCornerFill = Global.GetGameResImage("Images/Plate/rwdh_corner_rightTop.png");
            //noTitleWindow.RightBottomCornerWidth = 10;
            //noTitleWindow.RightBottomCornerHeight = 10;
            //noTitleWindow.RightBottomCornerLeft = noTitleWindow.BodyWidth - 10;
            //noTitleWindow.RightBottomCornerTop = noTitleWindow.BodyHeight - 10;
            //noTitleWindow.RightBottomCornerFill = Global.GetGameResImage("Images/Plate/rwdh_corner_rightBottom.png");
            GData.NoTitleWindowCount++;
        }

        //#########################################################################################################

        //#########################################################################################################
        //无边框窗口相关

        /// <summary>
        /// 关闭无标题窗口相关
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void CloseNoBorderWindow(HSGameEngine.GameEngine.SilverLight.Canvas root, NoBorderWindow noBorderWindow)
        {
            //GChildWindow.PopZ();

            WindowManage.RemoveWindows(noBorderWindow);
            root.Children.Remove(noBorderWindow);
            noBorderWindow.Visibility = VisibilitySL.Collapsed;
            noBorderWindow = null;
        }

        /// <summary>
        /// 初始化无标题窗口相关的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void InitNoBorderWindow(NoBorderWindow noBorderWindow)
        {

            //GChildWindow.PushZ();
            WindowManage.AddWindows(noBorderWindow);
            //noBorderWindow.ZIndex = GChildWindow.ZZ;
        }

        //######################################################################################################### 

        //#########################################################################################################
        //图形窗口相关

        /// <summary>
        /// 关闭图形题窗口相关
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void CloseBitmapWindow(HSGameEngine.GameEngine.SilverLight.Canvas root, GBitmapWindow bitmapWindow)
        {
            root.Children.Remove(bitmapWindow);
            bitmapWindow.Visibility = VisibilitySL.Collapsed;
            bitmapWindow = null;
        }

        /// <summary>
        /// 初始化图形窗口相关的其他固定部分
        /// </summary>
        /// <param name="childWindow"></param>  
        public static void InitBitmapWindow(GBitmapWindow bitmapWindow)
        {

            WindowManage.AddWindows(bitmapWindow);

            //GChildWindow.ZZ++;

            //bitmapWindow.ZIndex = GChildWindow.ZZ;			
        }

        //######################################################################################################### 		

        //#########################################################################################################
        //窗口定位相关

        /// <summary>
        /// 获取子窗口的X坐标
        /// </summary>  
        public static int GetChildLeft(int parentWidth, int childWidth)
        {
            return (int)((parentWidth - childWidth)) / 2;
        }

        /// <summary>
        /// 获取子窗口的Y坐标
        /// </summary>  
        public static int GetChildTop(int parentHeight, int childHeight)
        {
            return (int)((parentHeight - childHeight)) / 2;
        }

        ///设置两个窗口的坐标
        ///targetWindow为主窗口，也就是被依附的窗口; childWindow为依附窗口
        public static void SetChildCoordinate(int parentWidth, int parentHeight, GChildWindow targetWindow, GChildWindow childWindow)
        {
            targetWindow.Left = (int)((parentWidth - childWindow.BodyWidth - targetWindow.BodyWidth)) / 2;
            targetWindow.Top = (int)((parentHeight - targetWindow.BodyHeight - 39)) / 2;
            childWindow.Left = targetWindow.Left + targetWindow.BodyWidth;
            childWindow.Top = targetWindow.Top;
        }

        //######################################################################################################### 

        private static HSGameEngine.GameEngine.SilverLight.Canvas ChangingMapWindow = null;

        /// <summary>
        /// 显示地图切换窗口
        /// </summary>  
        public static void ShowChangingMapWindow(HSGameEngine.GameEngine.SilverLight.Canvas parent)
        {
            if (null != ChangingMapWindow)
            {
                return;
            }
            ChangingMapWindow = new HSGameEngine.GameEngine.SilverLight.Canvas();
            HSGameEngine.GameEngine.SilverLight.Canvas.SetZIndex(ChangingMapWindow, 1000000);
            parent.Children.Add(ChangingMapWindow);
        }

        /// <summary>
        /// 隐藏地图切换窗口
        /// </summary>  
        public static void HideChangingMapWindow(HSGameEngine.GameEngine.SilverLight.Canvas parent)
        {
            if (null != ChangingMapWindow)
            {
                parent.Children.Remove(ChangingMapWindow);
                ChangingMapWindow = null;
            }
            Super.HideNetWaiting();
        }

        //#########################################################################################################

        //#########################################################################################################
        //装备管理

        ///对于戒指和手镯特殊处理，获取其要能放置的位置
        public static int FindEquipBagIndex(int categoriy)
        {
            //如果是通过TIPS佩戴装备时，优先根据TIPS选中的左右手来替换
            if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)
            {
                return 1;
            }
            else if (GTipServiceEx.HandValue == (int)HandTypes.YouShou)
            {
                return 0;
            }

            if (categoriy == (int)ItemCategories.JieZhi)
            {
                if (null == FindUsingEuip(categoriy, (int)HandTypes.ZuoShou))//戒指的左右手与武器的左右手标示是反的
                {
                    return 0;
                }
                else if (null == FindUsingEuip(categoriy, (int)HandTypes.YouShou))
                {
                    return 1;
                }
            }
            else
            {
                if (null == FindUsingEuip(categoriy, (int)HandTypes.YouShou))
                {
                    return 0;
                }
                else if (null == FindUsingEuip(categoriy, (int)HandTypes.ZuoShou))
                {
                    return 1;
                }
            }
            return 0;
        }

        public static void EquipAction(GoodsData goodsData, ZhuangBeiPart zhuangBeiPart)
        {
            if (goodsData.Using > 0)
            {
                //XElement element =  Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", goodsData.GoodsID.ToString());
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsData.GoodsID);
                if (null == goodVO)
                {
                    return;
                }
                int handType = goodVO.HandType;//放置位置 
                int categoriy = goodVO.Categoriy;

                GGoodIcon icon = null;
                /*if (zhuangBeiPart.equipIcon[categoriy] != null)
                {
                    icon = U3DUtils.AS<GGoodIcon>(zhuangBeiPart.equipIcon[categoriy].gameObject);
                    if (icon.EnableHint)
                    {
                        icon.EnableHint = false;
                    }
                    zhuangBeiPart.equipIcon[categoriy].RemoveAt(0);
                }*/

                icon = U3DUtils.NEW<GGoodIcon>();
                {
                    icon.isAutoSize = true;
                    icon.BodyURL = new ImageURL(StringUtil.substitute("NetImages/GameRes/Images/Equip/{0}.png", Super.GetIconCode(goodVO)));
                    icon.TipType = (int)(int)TipTypes.GoodsText;
                    icon.Tip = StringUtil.substitute("{0},{1},{2},{3}", goodVO.ID, (int)(GoodsPriceTypes.HalfPrice), goodsData.Id, (int)(GoodsOwnerTypes.SelfBag));
                    icon.ItemCategory = goodVO.Categoriy;
                    icon.ItemCode = goodsData.GoodsID;
                    icon.ItemObject = goodsData;
                    icon.BoxTypes = (int)ListBoxTypes.RoleAttrib;
                    icon.TextSize = 20;
                    icon.TextShadowColor = Colors.Black;
                    //icon.GetComponentInChildren<UIButtonOffset>().enabled = false;
                };
                //Super.InitEquipGIcon(icon, goodsData);
                /*icon.MouseLeftButtonUp = (s, e) =>
                {
                    GoodsData gd = icon.ItemObject as GoodsData;
                    GTipServiceEx.SelfBagOnly = false;
                    GTipServiceEx.ShowTip(icon, TipTypes.GoodsText, GoodsOwnerTypes.SelfBag, gd);
                    Global.MoveGoodsToParcel(icon.ItemObject as GoodsData);
                };*/

                if (goodsData.ExcellenceInfo > 0 || categoriy == (int)ItemCategories.HuFu || categoriy == (int)ItemCategories.ShouHuChong || categoriy == (int)ItemCategories.ChongWu ||
                    categoriy == (int)ItemCategories.Decoration || categoriy == (int)ItemCategories.Fashion)
                {
                    zhuangBeiPart.SetExcellenceStat(icon, categoriy);
                }

                zhuangBeiPart.SetEquipBorderBySuitID(icon, goodsData);

                icon.addEventListener(MouseEvent.CLICK, zhuangBeiPart.MouseLeftButtonUp);
                icon.DPSelectedItem = (s, ev) =>
                {
                    if (ev.IDType == (int)TipsOperationTypes.Xiexia)
                    {
                        if (Global.Data.GameScene.IsDead())
                        {
                            return;
                        }

                        GoodsData gd = icon.ItemObject as GoodsData;
                        if (Global.CanAddGoods(gd.GoodsID, gd.GCount, gd.Binding, gd.Endtime, false))
                        {
                            if (gd.Using == 1)
                            {
                                gd.Using = 0;
                                GameInstance.Game.SpriteModGoods((int)(ModGoodsTypes.EquipUnload), gd.Id, gd.GoodsID, gd.Using, gd.Site, gd.GCount, gd.BagIndex);
                            }
                        }
                        else
                        {
                            GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("背包已满，请先清理出空闲位置后，再卸载装备...")), (int)((int)HintErrCodeTypes.NoBagGrid));
                        }
                    }

                    else if ((int)TipsOperationTypes.CheckPet == ev.IDType)
                    {

                        zhuangBeiPart.DPSelectedItem(zhuangBeiPart, new DPSelectedItemEventArgs() { ID = -10 });

                        PlayZone.GlobalPlayZone.ProcessGuideRequest(new DPSelectedItemEventArgs() { ID = 1330 });

                    }

                };
                icon.DPImageDownloadedItem = (s, ev) =>
                {
                    zhuangBeiPart.SetBoxCollider(icon);
                };
                //添加佩戴图标
                zhuangBeiPart.SetZhuangBeiPeiDai(icon, categoriy, handType, goodsData.BagIndex);

                /*if (categoriy >= (int)ItemCategories.WuQi_Jian && categoriy <= (int)ItemCategories.WuQi_NuJianTong)//判断是否是武器
                {
                    int izuo = (int)ItemCategories.WuQi_Jian;//这里的左对应武器的右手
                    int iyou = (int)ItemCategories.EquipMax + (int)ItemCategories.WuQi_Jian;//这里的右对应武器的左手                   

                    if (handType == (int)HandTypes.YouShou)//放在右手边武器位置
                    {
                        if (zhuangBeiPart.equipIcon[izuo].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[izuo].RemoveAt(0);
                        }
                        zhuangBeiPart.equipIcon[izuo].Add(icon);
                    }
                    else if (handType == (int)HandTypes.ZuoShou)//放在左手边武器位置
                    {
                        if (zhuangBeiPart.equipIcon[iyou].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[iyou].RemoveAt(0);
                        }
                        zhuangBeiPart.equipIcon[iyou].Add(icon);
                    }
                    else if (handType == (int)HandTypes.ZuoYouShou)//武器位置两边都可以放
                    {
                        if (goodsData.BagIndex == (int)HandTypes.ZuoShou)//左手0；右手1
                        {
                            if (zhuangBeiPart.equipIcon[izuo].Count() > 0)
                            {
                                zhuangBeiPart.equipIcon[izuo].RemoveAt(0);
                            }
                            zhuangBeiPart.equipIcon[izuo].Add(icon);
                        }
                        else if (goodsData.BagIndex == (int)HandTypes.YouShou)
                        {
                            if (zhuangBeiPart.equipIcon[iyou].Count() > 0)
                            {
                                zhuangBeiPart.equipIcon[iyou].RemoveAt(0);
                            }
                            zhuangBeiPart.equipIcon[iyou].Add(icon);
                        }
                    }
                }
                else if ((int)ItemCategories.JieZhi == categoriy)//如果是戒指时做特殊处理
                {
                    if (goodsData.BagIndex == (int)HandTypes.ZuoShou)//BagIndex左手0；右手1
                    {
                        if (zhuangBeiPart.equipIcon[categoriy].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[categoriy].RemoveAt(0);
                        }
                        zhuangBeiPart.equipIcon[categoriy].Add(icon);
                    }
                    else if(goodsData.BagIndex == (int)HandTypes.YouShou)
                    {
                        if (zhuangBeiPart.equipIcon[(int)ItemCategories.EquipMax + categoriy].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[(int)ItemCategories.EquipMax + categoriy].RemoveAt(0);
                        }
                        zhuangBeiPart.equipIcon[(int)ItemCategories.EquipMax + categoriy].Add(icon);
                    }
                }
                else
                {
                    if (zhuangBeiPart.equipIcon[categoriy].Count() > 0)
                    {
                        zhuangBeiPart.equipIcon[categoriy].RemoveAt(0);
                    }
                    zhuangBeiPart.equipIcon[categoriy].Add(icon);
                }*/
            }
            else
            {
                //XElement element =  Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", goodsData.GoodsID.ToString());
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsData.GoodsID);
                if (null != goodVO)
                {
                    int categoriy = goodVO.Categoriy;
                    int handType = goodVO.HandType; ;//放置位置 
                    int oAddCategoriy = categoriy;
                    if (categoriy >= (int)ItemCategories.WuQi_Jian && categoriy <= (int)ItemCategories.WuQi_NuJianTong)//判断是否是武器
                    {
                        if (handType == (int)HandTypes.YouShou)//放在右手武器位置
                        {
                            oAddCategoriy = (int)((int)ItemCategories.WuQi_Jian);
                        }
                        else if (handType == (int)HandTypes.ZuoShou)//放在左手武器位置
                        {
                            oAddCategoriy = (int)ItemCategories.EquipMax + (int)((int)ItemCategories.WuQi_Jian);
                        }
                        else if (handType == (int)HandTypes.ZuoYouShou)//武器位置两边都可以放
                        {
                            //if (goodsData.BagIndex == (int)HandTypes.ZuoShou)//左手0；右手1
                            if (goodsData.BagIndex == (int)HandTypes.ZuoShou)//左手0；右手1
                            {
                                //zhuangBeiPart.equipIcon[(int)((int)ItemCategories.WuQi_Jian)].Add(icon);
                                oAddCategoriy = (int)((int)ItemCategories.WuQi_Jian);
                            }
                            else if (goodsData.BagIndex == (int)HandTypes.YouShou)//BagIndex左手0；右手1)
                            {
                                //zhuangBeiPart.equipIcon[(int)ItemCategories.EquipMax + (int)((int)ItemCategories.WuQi_Jian)].Add(icon);
                                oAddCategoriy = (int)ItemCategories.EquipMax + (int)((int)ItemCategories.WuQi_Jian);
                            }
                        }
                        if (zhuangBeiPart.equipIcon[oAddCategoriy].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[oAddCategoriy].RemoveAt(0);
                        }
                    }
                    else if ((int)ItemCategories.JieZhi == categoriy)//如果是戒指时做特殊处理
                    {
                        if (goodsData.BagIndex == (int)HandTypes.ZuoShou)//BagIndex左手0；右手1
                        {
                            oAddCategoriy = categoriy;
                        }
                        else if (goodsData.BagIndex == (int)HandTypes.YouShou)//BagIndex左手0；右手1)
                        {
                            //zhuangBeiPart.equipIcon[categoriy].Add(icon);
                            oAddCategoriy = (int)ItemCategories.EquipMax + categoriy;
                        }
                        if (zhuangBeiPart.equipIcon[oAddCategoriy].Count() > 0)
                        {
                            zhuangBeiPart.equipIcon[oAddCategoriy].RemoveAt(0);
                        }
                    }
                    else if ((int)ItemCategories.ChongWu == categoriy || (int)ItemCategories.ShouHuChong == categoriy)
                    {
                        if (zhuangBeiPart.equipIcon[(int)ItemCategories.ShouHuChong].Count() > 0)
                        {
                            GGoodIcon icon = U3DUtils.AS<GGoodIcon>(zhuangBeiPart.equipIcon[(int)ItemCategories.ShouHuChong].gameObject);
                            if (icon.EnableHint)
                            {
                                icon.EnableHint = false;
                            }
                            zhuangBeiPart.equipIcon[(int)ItemCategories.ShouHuChong].RemoveAt(0);
                        }
                    }
                    else if (zhuangBeiPart.equipIcon[oAddCategoriy].Count() > 0)
                    {
                        GGoodIcon icon = U3DUtils.AS<GGoodIcon>(zhuangBeiPart.equipIcon[oAddCategoriy].gameObject);
                        if (icon.EnableHint)
                        {
                            icon.EnableHint = false;
                        }
                        zhuangBeiPart.equipIcon[oAddCategoriy].RemoveAt(0);
                    }
                }
            }
            if (zhuangBeiPart != null)
            {
                zhuangBeiPart.RefreshBufferUI();
            }
        }

        /// <summary>
        /// 获取人物身上佩戴的指定装备
        /// </summary>
        /// <param name="usingGoodsList"></param>
        /// <param name="categoriy"></param>
        /// <param name="handType"></param>
        /// <returns></returns>
        public static GoodsData FindUsingEuip(int categoriy, int handType)
        {
            if (null == Super.GData.RoleUsingGoodsDataList)
            {
                return null;
            }
            //for (int i = 0; i < usingGoodsList.Count; i++)
            foreach (KeyValuePair<int, GoodsData> uSingData in Super.GData.RoleUsingGoodsDataList)
            {
                GoodsData gd = uSingData.Value;

                // XElement element = Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gd.GoodsID.ToString());
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(gd.GoodsID);
                if (null == goodVO)
                {
                    continue;
                }
                int usingcategoriy = goodVO.Categoriy;
                int usingactionType = goodVO.ActionType;
                int usinghandType;
                if ((3 == Global.Data.roleData.Occupation) && ((int)WeaponStates.D == goodVO.ActionType) && ((int)ItemCategories.WuQi_Zhang == usingcategoriy))//增加魔剑士特殊处理 魔剑士可以装备两把单手杖
                {
                    usinghandType = (int)HandTypes.ZuoYouShou;
                }
                else
                {
                    usinghandType = goodVO.HandType;
                }


                if (categoriy >= (int)ItemCategories.WuQi_Jian && categoriy <= (int)ItemCategories.WuQi_NuJianTong)//判断要佩戴的道具否是武器
                {
                    if (usingcategoriy >= (int)ItemCategories.WuQi_Jian && usingcategoriy <= (int)ItemCategories.WuQi_NuJianTong)//判断要佩戴的道具否是武器
                    {
                        if (usinghandType == handType)//如果身上的与要装备的是在同一个位置
                        {
                            return gd;
                        }
                        else if (usinghandType == (int)HandTypes.ZuoYouShou)//如果身上的装备左右都可以放
                        {
                            if (handType == (int)HandTypes.ZuoShou)
                            {
                                if (gd.BagIndex == 1)//左手武器
                                {
                                    return gd;
                                }
                            }
                            else if (handType == (int)HandTypes.YouShou)
                            {
                                if (gd.BagIndex == 0)//右手武器
                                {
                                    return gd;
                                }
                            }
                        }
                    }
                }
                else if (categoriy == (int)ItemCategories.JieZhi)
                {
                    if (usingcategoriy == (int)ItemCategories.JieZhi)
                    {
                        if (handType == (int)HandTypes.ZuoShou)
                        {
                            if (gd.BagIndex == 0)//左手武器
                            {
                                return gd;
                            }
                        }
                        else if (handType == (int)HandTypes.YouShou)
                        {
                            if (gd.BagIndex == 1)//右手武器
                            {
                                return gd;
                            }
                        }
                    }
                }
                else if (categoriy == (int)ItemCategories.ChongWu || categoriy == (int)ItemCategories.ShouHuChong)//守护宠和宠物共占同一个位置，同时只能佩戴一种
                {
                    return gd;
                }
                else
                {
                    if (categoriy == usingcategoriy)
                    {
                        return gd;
                    }
                }
            }
            return null;
        }

        public static List<GoodsData> FindWuQi(int equipCategory, int actionType = -1, int handType = -1)
        {
            List<GoodsData> unGoodsList = new List<GoodsData>();
            /*List<GoodsData> usingGoodsList = Global.GetUsingGoodsDataList(null);
            if (null == usingGoodsList)
            {
                return null;
            }*/

            GoodsData gdLeft = FindUsingEuip(equipCategory, (int)HandTypes.ZuoShou);// 0为左手佩戴-右侧武器栏 1为右手佩戴-左侧武器栏
            GoodsData gdRight = FindUsingEuip(equipCategory, (int)HandTypes.YouShou);// 0为左手佩戴-右侧武器栏 1为右手佩戴-左侧武器栏

            if (equipCategory >= (int)ItemCategories.WuQi_Jian && equipCategory <= (int)ItemCategories.WuQi_NuJianTong)//判断要佩戴的道具否是武器
            {
                //如果要佩戴的是剑\斧\槌\矛\刀
                if (equipCategory == (int)ItemCategories.WuQi_Jian || equipCategory == (int)ItemCategories.WuQi_Fu || equipCategory == (int)ItemCategories.WuQi_Chui || equipCategory == (int)ItemCategories.WuQi_Mao || equipCategory == (int)ItemCategories.WuQi_Dao)
                {
                    if (actionType == (int)WeaponStates.D)//如果是单手武器
                    {
                        bool isUnLeft = false;
                        bool isUnRight = false;

                        if (gdLeft != null)
                        {
                            GoodVO gdLeftVO = ConfigGoods.GetGoodsXmlNodeByID(gdLeft.GoodsID);
                            int iLeftCategoriy = gdLeftVO.Categoriy;
                            int iLeftHandType = gdLeftVO.HandType;
                            if ((3 == Global.Data.roleData.Occupation) && ((int)WeaponStates.D == gdLeftVO.ActionType) && ((int)ItemCategories.WuQi_Zhang == gdLeftVO.Categoriy))//增加魔剑士特殊处理 魔剑士可以装备两把单手杖
                            {
                                iLeftHandType = (int)HandTypes.ZuoYouShou;
                            }
                            if (iLeftCategoriy != (int)ItemCategories.WuQi_Jian || iLeftCategoriy != (int)ItemCategories.WuQi_Fu || iLeftCategoriy != (int)ItemCategories.WuQi_Chui || iLeftCategoriy != (int)ItemCategories.WuQi_Mao || iLeftCategoriy != (int)ItemCategories.WuQi_Dao)
                            {
                                if (iLeftCategoriy != (int)ItemCategories.WuQi_Dun)//如果不是盾
                                {
                                    if (iLeftHandType != (int)HandTypes.ZuoYouShou)//如果不是上述装备并且 HandType类型不是左右手
                                    {
                                        unGoodsList.Add(gdLeft);
                                    }
                                    else
                                    {
                                        isUnLeft = true;//当左手装备不是盾并且没有符合要卸载的装备
                                    }
                                }
                                else if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)//如果当前佩戴的是盾并且由TIPS指定替换左手
                                {
                                    unGoodsList.Add(gdLeft);
                                }
                                else
                                {
                                    //当左手有东西并且根据佩戴装备没有符合要卸载的装备时
                                    isUnLeft = true;
                                }
                            }
                            /*else if (iLeftCategoriy != (int)ItemCategories.WuQi_Dun )//如果不是盾
                            {
                                unGoodsList.Add(gdLeft);
                            }                        
                            else
                            {
                                isUnLeft = true;
                            }*/
                        }
                        if (gdRight != null)
                        {
                            GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                            int iRightCategoriy = gdRightVO.Categoriy;
                            int iRightHandType = gdRightVO.HandType;
                            int iRightActionType = gdRightVO.ActionType;
                            if ((3 == Global.Data.roleData.Occupation) && ((int)WeaponStates.D == gdRightVO.ActionType) && ((int)ItemCategories.WuQi_Zhang == gdRightVO.Categoriy))//增加魔剑士特殊处理 魔剑士可以装备两把单手杖
                            {
                                iRightHandType = (int)HandTypes.ZuoYouShou;
                            }
                            if (iRightActionType == (int)WeaponStates.S)//如果右手是双手武器就卸
                            {
                                unGoodsList.Add(gdRight);
                            }
                            else if (iRightCategoriy != (int)ItemCategories.WuQi_Jian || iRightCategoriy != (int)ItemCategories.WuQi_Fu || iRightCategoriy != (int)ItemCategories.WuQi_Chui || iRightCategoriy != (int)ItemCategories.WuQi_Mao || iRightCategoriy != (int)ItemCategories.WuQi_Dao)
                            {
                                if (iRightCategoriy != (int)ItemCategories.WuQi_Dun)//如果不是盾
                                {
                                    if (iRightHandType != (int)HandTypes.ZuoYouShou)//如果不是上述装备并且 HandType类型不是左右手
                                    {
                                        unGoodsList.Add(gdRight);
                                    }
                                    else
                                    {
                                        isUnRight = true;
                                    }
                                }
                            }
                            /*else if (iRightCategoriy != (int)ItemCategories.WuQi_Dun)//如果不是盾也不是杖
                            {
                                unGoodsList.Add(gdRight);
                            }
                            else
                            {
                                isUnRight = true;
                            }*/
                        }
                        if (isUnLeft && isUnRight)//如果左右两边都有装备并具都不满卸载条件那就把右手装备卸下
                        {
                            //if (Global.GetGoodsDataZhanLi(gdRight) > Global.GetGoodsDataZhanLi(gdLeft))//判断哪个位置的装备战力小就替换哪个
                            if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)
                            {
                                unGoodsList.Add(gdLeft);
                            }
                            else
                            {
                                unGoodsList.Add(gdRight);
                            }
                        }

                    }
                    else if (actionType == (int)WeaponStates.S || actionType == (int)WeaponStates.C || actionType == (int)WeaponStates.MJ)//如果是双手或长柄武器或者魔剑士双手巨剑
                    {
                        if (gdLeft != null)
                        {
                            unGoodsList.Add(gdLeft);
                        }
                        if (gdRight != null)
                        {
                            unGoodsList.Add(gdRight);
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_Fu)/// 武器-斧
                {

                }
                else if (equipCategory == (int)ItemCategories.WuQi_Chui)/// 武器-槌
                {

                }
                else if (equipCategory == (int)ItemCategories.WuQi_Gong)/// 武器-弓
                {
                    if (actionType == (int)WeaponStates.G)//
                    {
                        if (gdLeft != null)
                        {
                            unGoodsList.Add(gdLeft);
                        }
                        if (gdRight != null)
                        {
                            GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                            int iRightCategoriy = gdRightVO.Categoriy;
                            //int iRightHandType = Global.GetXElementAttributeInt(Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gdRight.GoodsID.ToString()), "HandType");
                            if (iRightCategoriy != (int)ItemCategories.WuQi_GongJianTong)
                            {
                                unGoodsList.Add(gdRight);
                            }
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_Nu)/// 武器-弩
                {
                    if (actionType == (int)WeaponStates.N)//
                    {
                        if (gdLeft != null)
                        {
                            GoodVO gdLeftVO = ConfigGoods.GetGoodsXmlNodeByID(gdLeft.GoodsID);
                            int iLeftCategoriy = gdLeftVO.Categoriy;
                            //int iLeftHandType = Global.GetXElementAttributeInt(Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gdLeft.GoodsID.ToString()), "HandType");
                            if (iLeftCategoriy != (int)ItemCategories.WuQi_NuJianTong)
                            {
                                unGoodsList.Add(gdLeft);
                            }
                        }
                        if (gdRight != null)
                        {
                            unGoodsList.Add(gdRight);
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_Mao)/// 武器-矛
                {

                }
                else if (equipCategory == (int)ItemCategories.WuQi_Zhang)/// 武器-杖
                {
                    if (actionType == (int)WeaponStates.D)//如果是单手武器
                    {
                        if (3 == Global.Data.roleData.Occupation)
                        {
                            bool isUnLeft = false;
                            bool isUnRight = false;

                            if (gdLeft != null)
                            {
                                GoodVO gdLeftVO = ConfigGoods.GetGoodsXmlNodeByID(gdLeft.GoodsID);
                                int iLeftCategoriy = gdLeftVO.Categoriy;
                                int iLeftHandType = gdLeftVO.HandType;
                                if (((int)ItemCategories.WuQi_Zhang == gdLeftVO.Categoriy) && ((int)WeaponStates.D == gdLeftVO.ActionType))
                                {
                                    iLeftHandType = (int)HandTypes.ZuoYouShou;
                                }

                                if (iLeftCategoriy != (int)ItemCategories.WuQi_Dun)//如果不是盾
                                {
                                    if (iLeftHandType != (int)HandTypes.ZuoYouShou)//如果不是上述装备并且 HandType类型不是左右手
                                    {
                                        unGoodsList.Add(gdLeft);
                                    }
                                    else
                                    {
                                        isUnLeft = true;//当左手装备不是盾并且没有符合要卸载的装备
                                    }
                                }
                                else if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)//如果当前佩戴的是盾并且由TIPS指定替换左手
                                {
                                    unGoodsList.Add(gdLeft);
                                }
                                else
                                {
                                    //当左手有东西并且根据佩戴装备没有符合要卸载的装备时
                                    isUnLeft = true;
                                }
                            }
                            if (gdRight != null)
                            {
                                GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                                int iRightCategoriy = gdRightVO.Categoriy;
                                int iRightHandType = gdRightVO.HandType;
                                int iRightActionType = gdRightVO.ActionType;
                                if (((int)ItemCategories.WuQi_Zhang == gdRightVO.Categoriy) && ((int)WeaponStates.D == gdRightVO.ActionType))
                                {
                                    iRightHandType = (int)HandTypes.ZuoYouShou;
                                }
                                if (iRightActionType == (int)WeaponStates.S)//如果右手是双手武器就卸
                                {
                                    unGoodsList.Add(gdRight);
                                }
                                else if (iRightCategoriy != (int)ItemCategories.WuQi_Jian || iRightCategoriy != (int)ItemCategories.WuQi_Fu || iRightCategoriy != (int)ItemCategories.WuQi_Chui || iRightCategoriy != (int)ItemCategories.WuQi_Mao || iRightCategoriy != (int)ItemCategories.WuQi_Dao)
                                {
                                    if (iRightCategoriy != (int)ItemCategories.WuQi_Dun)//如果不是盾
                                    {
                                        if (iRightHandType != (int)HandTypes.ZuoYouShou)//如果不是上述装备并且 HandType类型不是左右手
                                        {
                                            unGoodsList.Add(gdRight);
                                        }
                                        else
                                        {
                                            isUnRight = true;
                                        }
                                    }
                                }
                            }
                            if (isUnLeft && isUnRight)//如果左右两边都有装备并具都不满卸载条件那就把右手装备卸下
                            {
                                //if (Global.GetGoodsDataZhanLi(gdRight) > Global.GetGoodsDataZhanLi(gdLeft))//判断哪个位置的装备战力小就替换哪个
                                if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)
                                {
                                    unGoodsList.Add(gdLeft);
                                }
                                else
                                {
                                    unGoodsList.Add(gdRight);
                                }
                            }
                            //if (gdRight != null)
                            //{
                            //    GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                            //    int iRightCategoriy = gdRightVO.Categoriy;
                            //    int iRightHandType = gdRightVO.HandType;
                            //    int iRightActionType = gdRightVO.ActionType;
                            //    if (iRightActionType == (int)WeaponStates.S)//如果右手是双手武器就卸
                            //    {
                            //        unGoodsList.Add(gdRight);
                            //    }
                            //    else if (gdLeft != null)//如果左手有东西则替换右手
                            //    {
                            //        unGoodsList.Add(gdRight);
                            //    }
                            //    else //装备到左手
                            //    {
                            //
                            //    }
                            //}
                        }
                        else
                        {
                            if (gdLeft != null)
                            {
                                GoodVO gdLeftVO = ConfigGoods.GetGoodsXmlNodeByID(gdLeft.GoodsID);

                                int iLeftCategoriy = gdLeftVO.Categoriy;
                                //int iLeftHandType = Global.GetXElementAttributeInt(Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gdLeft.GoodsID.ToString()), "HandType");
                                if (iLeftCategoriy != (int)ItemCategories.WuQi_Dun)
                                {
                                    unGoodsList.Add(gdLeft);
                                }
                            }
                            if (gdRight != null)
                            {
                                unGoodsList.Add(gdRight);
                            }
                        }
                    }
                    else if (actionType == (int)WeaponStates.S || actionType == (int)WeaponStates.C || actionType == (int)WeaponStates.MJ)//如果是双手或长柄武器 
                    {
                        if (gdLeft != null)
                        {
                            unGoodsList.Add(gdLeft);
                        }
                        if (gdRight != null)
                        {
                            unGoodsList.Add(gdRight);
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_Dun)/// 武器-盾
                {
                    if (actionType == (int)WeaponStates.D)//如果是单手武器
                    {
                        if (gdLeft != null)
                        {
                            unGoodsList.Add(gdLeft);
                        }
                        if (gdRight != null)
                        {
                            GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                            int iRightCategoriy = gdRightVO.Categoriy;
                            int iRightHandType = gdRightVO.HandType;
                            int iRightActionType = gdRightVO.ActionType;

                            if (iRightActionType == (int)WeaponStates.S)//如果右手是双手武器就卸
                            {
                                unGoodsList.Add(gdRight);
                            }
                            else if (iRightCategoriy != (int)ItemCategories.WuQi_Jian || iRightCategoriy != (int)ItemCategories.WuQi_Fu || iRightCategoriy != (int)ItemCategories.WuQi_Chui || iRightCategoriy != (int)ItemCategories.WuQi_Mao || iRightCategoriy != (int)ItemCategories.WuQi_Dao)
                            {
                                if (iRightCategoriy != (int)ItemCategories.WuQi_Zhang)
                                {
                                    if (iRightHandType != (int)HandTypes.ZuoYouShou)//如果不是上述装备并且 HandType类型不是左右手
                                    {
                                        unGoodsList.Add(gdRight);
                                    }
                                }
                            }
                            /*else if (iRightCategoriy != (int)ItemCategories.WuQi_Zhang)//如果不是是杖
                            {
                                unGoodsList.Add(gdRight);
                            }*/
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_Dao)/// 武器-刀
                {

                }
                else if (equipCategory == (int)ItemCategories.WuQi_GongJianTong)/// 武器-弓箭筒
                {
                    if (actionType == (int)WeaponStates.D)//
                    {
                        if (gdLeft != null)
                        {
                            GoodVO gdLeftVO = ConfigGoods.GetGoodsXmlNodeByID(gdLeft.GoodsID);
                            int iLeftCategoriy = gdLeftVO.Categoriy;
                            //int iLeftHandType = Global.GetXElementAttributeInt(Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gdLeft.GoodsID.ToString()), "HandType");
                            if (iLeftCategoriy != (int)ItemCategories.WuQi_Gong)
                            {
                                unGoodsList.Add(gdLeft);
                            }
                        }
                        if (gdRight != null)
                        {
                            unGoodsList.Add(gdRight);
                        }
                    }
                }
                else if (equipCategory == (int)ItemCategories.WuQi_NuJianTong)/// 武器-弩箭筒
                {
                    if (actionType == (int)WeaponStates.D)//
                    {
                        if (gdLeft != null)
                        {
                            unGoodsList.Add(gdLeft);
                        }
                        if (gdRight != null)
                        {
                            GoodVO gdRightVO = ConfigGoods.GetGoodsXmlNodeByID(gdRight.GoodsID);
                            int iRightCategoriy = gdRightVO.Categoriy;
                            //int iRightHandType = Global.GetXElementAttributeInt(Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gdRight.GoodsID.ToString()), "HandType");
                            int iRightActionType = gdRightVO.ActionType;

                            if (iRightActionType == (int)WeaponStates.S)//如果右手是双手武器就卸
                            {
                                unGoodsList.Add(gdRight);
                            }
                            else if (iRightCategoriy != (int)ItemCategories.WuQi_Nu)
                            {
                                unGoodsList.Add(gdRight);
                            }
                        }
                    }
                }
                //
            }
            return unGoodsList;
        }

        ///为了兼容2个戒指和2个手镯，必须做一下处理
        public static List<GoodsData> FindEquip(int equipCategory)
        {
            List<GoodsData> unGoodsList = new List<GoodsData>();
            /*List<GoodsData> usingGoodsList = Global.GetUsingGoodsDataList(null);
            if (null == usingGoodsList)
            {
                return unGoodsList;
            }*/

            if (equipCategory != (int)ItemCategories.JieZhi)//如果不是戒指
            {
                GoodsData gd = Super._FindEquip(equipCategory, -1);
                if (null != gd)
                {
                    unGoodsList.Add(gd);
                }
                return unGoodsList;
            }
            GoodsData gdLeft = FindUsingEuip(equipCategory, (int)HandTypes.ZuoShou);
            GoodsData gdRight = FindUsingEuip(equipCategory, (int)HandTypes.YouShou);

            if (null == gdLeft || null == gdRight)
            {
                //unGoodsList.Add(gdLeft);//返回空，没有要卸载的
                return unGoodsList;
            }

            if (null != gdLeft && null != gdRight)
            {
                //if (Global.GetGoodsDataZhanLi(gdLeft) > Global.GetGoodsDataZhanLi(gdRight))//判断哪个位置的装备战力小就替换哪个
                if (GTipServiceEx.HandValue == (int)HandTypes.ZuoShou)//戒指的左右手与武器是反的
                {
                    unGoodsList.Add(gdRight);
                }
                else
                {
                    unGoodsList.Add(gdLeft);
                }
                return unGoodsList;
            }

            //if (null == gdLeft)
            //{
            //    unGoodsList.Add(gdLeft);
            //    return unGoodsList;
            //}
            //unGoodsList.Add(gdRight);
            return unGoodsList;
        }
        public static GoodsData _FindEquip(int equipCategory, int bagIndex = -1)
        {
            if (null == Super.GData.RoleUsingGoodsDataList)
            {
                return null;
            }
            foreach (KeyValuePair<int, GoodsData> gd in Super.GData.RoleUsingGoodsDataList)
            {
                GoodsData goodsData = gd.Value;
                if (goodsData == null)
                {
                    continue;
                }
                if (goodsData.Using <= 0)
                {
                    continue;
                }
                if (bagIndex >= 0)
                {
                    if (goodsData.BagIndex != bagIndex)
                    {
                        continue;
                    }
                }
                //XElement element = Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", goodsData.GoodsID.ToString());
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsData.GoodsID);
                if (null == goodVO)
                {
                    continue;
                }

                int categoriy = goodVO.Categoriy;
                if ((int)ItemCategories.ChongWu == equipCategory)
                {

                    equipCategory = (int)ItemCategories.ShouHuChong;

                }

                if ((int)ItemCategories.ChongWu == categoriy)
                {

                    categoriy = (int)ItemCategories.ShouHuChong;

                }
                if (equipCategory == categoriy)
                {
                    return goodsData;
                }
            }
            return null;
        }

        /*///为了兼容2个戒指和2个手镯，必须做一下处理
        public static List<GoodsData> FindEquip(int equipCategory, int actionType, int handType)
        {
            List<GoodsData> gdlist = new List<GoodsData>();
            if (equipCategory != (int)ItemCategories.JieZhi)
            {
                gdlist.Insert(0, Super._FindEquip(equipCategory, -1, actionType, handType));
                return gdlist;
            }
            GoodsData gdLeft = Super._FindEquip(equipCategory, 0, actionType, handType);
            GoodsData gdRight = Super._FindEquip(equipCategory, 1, actionType, handType);


            if (null == gdLeft && null == gdRight)
            {
                return null;
            }
			
            if (null != gdLeft && null != gdRight)
            {
                return gdLeft;
            }			
			
            if (null == gdLeft)
            {
                return gdLeft;
            }

            //return gdlist;
        }

        public static List<GoodsData>_FindEquip(int equipCategory, int actionType = -1, int handType = -1)
        {
            List<GoodsData> unGoodsList = new List<GoodsData>();
            List<GoodsData> usingGoodsList = Global.GetUsingGoodsDataList(null);
            if (null == usingGoodsList)
            {
                return null;
            }

            //GoodsData gdLeft = FindUsingEuip(usingGoodsList, (int)HandTypes.ZuoShou);// 0为左手佩戴-右侧武器栏 1为右手佩戴-左侧武器栏
            //GoodsData gdRight = FindUsingEuip(usingGoodsList, (int)HandTypes.YouShou);// 0为左手佩戴-右侧武器栏 1为右手佩戴-左侧武器栏

            for (int i = 0; i < usingGoodsList.Count; i++)
            {
                GoodsData gd = usingGoodsList[i];
                if ( gd == null)
                {
                    continue;
                }
                XElement element = Global.GetXElement(Global.GetGameResXml(Global.GAME_CONFIG_GOODS_FILE), "Item", "ID", gd.GoodsID.ToString());
                if (null == element)
                {
                    continue;
                }
                int usingcategoriy = Global.GetXElementAttributeInt(element, "Categoriy");
                int usingactionType = Global.GetXElementAttributeInt(element, "ActionType");
                int usinghandType = Global.GetXElementAttributeInt(element, "HandType");


                if (equipCategory == (int)ItemCategories.JieZhi)
                {
                    if (equipCategory == usingcategoriy)
                    {
                        GoodsData leftJieZhi = FindUsingEuip(usingGoodsList, (int)HandTypes.ZuoShou, (int)ItemCategories.JieZhi);
                        GoodsData rightJieZhi = FindUsingEuip(usingGoodsList, (int)HandTypes.YouShou, (int)ItemCategories.JieZhi);
                        if (null != leftJieZhi && null != rightJieZhi)
                        {
                            unGoodsList.Add(rightJieZhi);
                        }
                    }
                } 
                else if (equipCategory == usingcategoriy)
                {
                    unGoodsList.Add(gd);
                }
            }
            return unGoodsList;
        }*/

        ///excludeGoodsDbId 用于排除掉特殊物品，这个参数可以用来使这个函数返回 多余的手镯 或者 戒子
        public static GoodsData GetGoodsOnBody(int goodsID, int goodsDbID, int goodsOwnerType, int excludeGoodsDbId = -1)
        {
            if (null == Global.Data.roleData.GoodsDataList)
            {
                return null;
            }
            if (goodsOwnerType == (int)GoodsOwnerTypes.SelfBag) //如果是自己身上穿戴或者背包中的
            {
                GoodsData thisGoodsData = Global.GetGoodsDataByDbID(goodsDbID);
                if (null != thisGoodsData)
                {
                    if (thisGoodsData.Using > 0) //穿在自己身上的不和穿在自己身上的比较
                    {
                        return null;
                    }
                }
            }
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (null == goodVO)
            {
                return null;
            }
            int categoriy = goodVO.Categoriy;
            //if ((int)ItemCategories.ShenBing == categoriy)
            //{
            //    categoriy = (int)ItemCategories.Weapon;
            //}
            //else if ((int)ItemCategories.ShenJia == categoriy)
            //{
            //    categoriy = (int)ItemCategories.Clothes;
            //}

            if (categoriy >= (int)((int)ItemCategories.EquipMax))
            {
                return null;
            }
            if (-1 != goodVO.ToOccupation)
            {
                //不考虑职业限制
            }

            int bagIndex = -1;

            for (int i = 0; i < Global.Data.roleData.GoodsDataList.Count; i++)
            {
                ///戒指和手镯的处理
                if (bagIndex >= 0)
                {
                    if (Global.Data.roleData.GoodsDataList[i].BagIndex != bagIndex)
                    {
                        continue;
                    }
                }

                if (Global.Data.roleData.GoodsDataList[i].Id == goodsDbID || Global.Data.roleData.GoodsDataList[i].Using <= 0)
                {
                    continue;
                }
                GoodVO goodVO2 = ConfigGoods.GetGoodsXmlNodeByID(Global.Data.roleData.GoodsDataList[i].GoodsID);
                if (null == goodVO2)
                {
                    continue;
                }
                int categoriy2 = goodVO2.Categoriy;
                //if ((int)ItemCategories.ShenBing == categoriy2)
                //{
                //    categoriy2 = (int)ItemCategories.Weapon;
                //}
                //else if ((int)ItemCategories.ShenJia == categoriy2)
                //{
                //    categoriy2 = (int)ItemCategories.Clothes;
                //}

                if (categoriy == categoriy2)
                {
                    ///过滤掉屏蔽的物品数据库id
                    if (excludeGoodsDbId == Global.Data.roleData.GoodsDataList[i].Id)
                    {
                        continue;
                    }

                    return Global.Data.roleData.GoodsDataList[i];
                }
            }
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################
        //物品管理

        public static int CanOpenUpLevelGiftBag()
        {
            if (null == Global.Data.roleData)
            {
                return -1;
            }
            if (null == Global.Data.roleData.GoodsDataList)
            {
                return -1;
            }
            for (int i = 0; i < Global.Data.roleData.GoodsDataList.Count; i++)
            {
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(Global.Data.roleData.GoodsDataList[i].GoodsID);
                if (null == goodVO)
                {
                    continue;
                }
                int categoriy = goodVO.Categoriy;
                if (categoriy != (int)((int)ItemCategories.ItemUpPack))
                {
                    continue;
                }
                int toOccup = goodVO.ToOccupation;
                int toLevel = goodVO.ToLevel;
                if (!Global.ValidOccupation(toOccup) || toLevel > Global.Data.roleData.Level)
                {
                    continue;
                }
                return Global.Data.roleData.GoodsDataList[i].Id;
            }
            return -1;
        }


        //#########################################################################################################

        //#########################################################################################################
        //任务管理

        public static TaskData GetTaskDataByTaskID(int taskID)
        {
            if (null == Global.Data.roleData.TaskDataList)
            {
                return null;
            }
            for (int i = 0; i < Global.Data.roleData.TaskDataList.Count; i++)
            {
                if (Global.Data.roleData.TaskDataList[i].DoingTaskID == taskID)
                {
                    return Global.Data.roleData.TaskDataList[i];
                }
            }
            return null;
        }
        public static TaskData GetTaskDataByDbID(int dbID)
        {
            if (null == Global.Data.roleData.TaskDataList)
            {
                return null;
            }
            for (int i = 0; i < Global.Data.roleData.TaskDataList.Count; i++)
            {
                if (Global.Data.roleData.TaskDataList[i].DbID == dbID)
                {
                    return Global.Data.roleData.TaskDataList[i];
                }
            }
            return null;
        }
        public static String GetTaskGoodsName(XElement taskXml, int num)
        {
            string goodsName = "";
            int forge_level = 0;
            int quality = 0;

            Global.ParsePropNameInfo(Global.GetXElementAttributeStr(taskXml, StringUtil.substitute("PropsName{0}", num)), out goodsName, out forge_level, out quality);
            return goodsName;
        }

        public static String GetTaskGoodsName(TaskVO taskVO, int num)
        {
            string goodsName = "";
            int forge_level = 0;
            int quality = 0;
            if (num == 1)
            {
                Global.ParsePropNameInfo(taskVO.PropsName1, out goodsName, out forge_level, out quality);
            }
            else if (num == 2)
            {
                Global.ParsePropNameInfo(taskVO.PropsName2, out goodsName, out forge_level, out quality);
            }

            return goodsName;
        }

        public static String GetTaskTargetName(XElement taskXml, int num)
        {
            String ret = "";
            int targetType = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetType{0}", num));
            int targetNPC = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetNPC{0}", num));
            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    ret = "KillMonsterForLevel";
                }
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType != (int)((int)TaskTypes.UseSomething))
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                ret = vo.SName;
            }
            return ret;
        }

        public static String GetTaskTargetName(TaskVO taskVO, int num)
        {
            String ret = "";
            int targetType = 0;
            int targetNPC = 0;
            if (num == 1)
            {
                targetType = taskVO.TargetType1;
                targetNPC = taskVO.TargetNPC1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
                targetNPC = taskVO.TargetNPC2;
            }
            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    ret = "KillMonsterForLevel";
                }
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    ret = monsterVO.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    ret = vo.SName;
                }
            }
            else if (targetType != (int)((int)TaskTypes.UseSomething))
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                ret = vo.SName;
            }
            return ret;
        }

        public static int GetTaskTargetType(XElement taskXml, int num)
        {
            int targetType = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetType{0}", num));
            return targetType;
        }

        public static int GetTaskTargetType(TaskVO taskVO, int num)
        {
            int targetType = 0;
            if (num == 1)
            {
                targetType = taskVO.TargetType1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
            }

            return targetType;
        }

        //处理副本
        private static void ProcessFuBenNPCOrMonster(XElement taskXml, int currentMapCode, ref int isFuBen, ref int mapCode, ref int npcType, ref int npcID)
        {
            isFuBen = 0;
            if (-1 == currentMapCode)
            {
                return;
            }

            if (MapTypes.Normal == Global.GetMapType(currentMapCode))
            {
                return;
            }

            isFuBen = 1;
            Super.GetTaskDestNPCID(taskXml, ref mapCode, ref npcType, ref npcID);
        }

        //处理副本
        private static void ProcessFuBenNPCOrMonster(TaskVO taskVO, int currentMapCode, ref int isFuBen, ref int mapCode, ref int npcType, ref int npcID)
        {
            isFuBen = 0;
            if (-1 == currentMapCode)
            {
                return;
            }

            if (MapTypes.Normal == Global.GetMapType(currentMapCode))
            {
                return;
            }

            isFuBen = 1;
            Super.GetTaskDestNPCID(taskVO, ref mapCode, ref npcType, ref npcID);
        }
        //任务引导目标信息
        public static bool GetTaskTargetInfo(XElement taskXml, int num, TaskTargetInfo targetInfo)
        {
            bool ret = false;

            int mapCode = -1;
            int npcType = -1;
            int npcID = -1;
            int isFuBen;
            int targetType;
            int posX = -1;
            int posY = -1;

            ret = GetTaskTargetID(taskXml, num, out isFuBen, out mapCode, out npcType, out npcID, out targetType, false, out posX, out posY);

            if (ret)
            {
                targetInfo.NpcID = npcID;
                targetInfo.ToPosX = posX;
                targetInfo.ToPosY = posY;
                targetInfo.IsFuBen = isFuBen;
                targetInfo.NPCType = npcType;
                targetInfo.MapCode = mapCode;
                targetInfo.TargetType = targetType;
            }

            return ret;
        }

        public static bool GetTaskTargetID(XElement taskXml, int num, out int isFuBen, out int mapCode, out int npcType, out int npcID,
            out int targetType, bool replaceFuBen, out int posX, out int posY)
        {
            isFuBen = 0;
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            posX = -1;
            posY = -1;

            targetType = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetType{0}", num));
            //targetType = targetType;
            int targetNPC = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetNPC{0}", num));
            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    mapCode = Global.GetXElementAttributeInt(taskXml, "TargetMapCode1");
                    npcType = (int)(TaskTypes.KillMonsterForLevel);
                    string posStr = Global.GetXElementAttributeStr(taskXml, "TargetPos1");
                    if (!string.IsNullOrEmpty(posStr))
                    {
                        string[] pos = posStr.Split(',');
                        if (pos.Length == 2)
                        {
                            posX = pos[0].SafeToInt32();
                            posY = pos[1].SafeToInt32();
                        }
                    }
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.UseSomething))
            {
            }
            else if (targetType == (int)((int)TaskTypes.TransferSomething))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType != (int)((int)TaskTypes.UseSomething))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }

            if (posX < 0 && posY < 0)
            {
                string posStr = Global.GetXElementAttributeStr(taskXml, "TargetPos" + num);
                if (!string.IsNullOrEmpty(posStr))
                {
                    if (mapCode < 0)
                    {
                        mapCode = Global.GetXElementAttributeInt(taskXml, "TargetMapCode" + num);
                    }

                    string[] pos = posStr.Split(',');
                    if (pos.Length == 2)
                    {
                        posX = pos[0].SafeToInt32();
                        posY = pos[1].SafeToInt32();
                    }
                }
            }

            //处理在副本中的目标
            if (replaceFuBen)
            {
                Super.ProcessFuBenNPCOrMonster(taskXml, mapCode, ref isFuBen, ref mapCode, ref npcType, ref npcID);
            }
            return true;
        }

        public static bool GetTaskTargetID(TaskVO taskVO, int num, out int isFuBen, out int mapCode, out int npcType, out int npcID,
            out int targetType, bool replaceFuBen, out int posX, out int posY)
        {
            isFuBen = 0;
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            posX = -1;
            posY = -1;

            targetType = 0;
            //targetType = targetType;
            int targetNPC = 0;

            if (num == 1)
            {
                targetType = taskVO.TargetType1;
                targetNPC = taskVO.TargetNPC1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
                targetNPC = taskVO.TargetNPC2;
            }



            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }

                if (mapCode == 50 || mapCode == 60)
                {
                    Point pts = Global.GetNPCPointByID(mapCode, targetNPC);

                    posX = pts.X;
                    posY = pts.Y;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }

                if(mapCode == 50 || mapCode == 60)
                {
                    Point pts = Global.GetMonsterPointByID(mapCode, targetNPC);
                    
                    posX = pts.X;
                    posY = pts.Y;
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    mapCode = taskVO.TargetMapCode1;
                    npcType = (int)(TaskTypes.KillMonsterForLevel);
                    string posStr = taskVO.TargetPos1.ToString();
                    if (!string.IsNullOrEmpty(posStr))
                    {
                        string[] pos = posStr.Split(',');
                        if (pos.Length == 2)
                        {
                            posX = pos[0].SafeToInt32();
                            posY = pos[1].SafeToInt32();
                        }
                    }
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.UseSomething))
            {
            }
            else if (targetType == (int)((int)TaskTypes.TransferSomething))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(monsterVO.MapCode);
                    npcType = (int)(GSpriteTypes.Monster);
                    npcID = monsterVO.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }
            else if (targetType != (int)((int)TaskTypes.UseSomething))
            {
                if (-1 != targetNPC)
                {
                    NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = vo.ID;
                }
            }

            if (posX < 0 && posY < 0)
            {
                string posStr = "";
                if (num == 1)
                {
                    posStr = taskVO.TargetPos1;
                }
                else if (num == 2)
                {
                    posStr = taskVO.TargetPos2;
                }
                if (!string.IsNullOrEmpty(posStr))
                {
                    if (mapCode < 0)
                    {
                        if (num == 1)
                        {
                            mapCode = taskVO.TargetMapCode1;
                        }
                        else if (num == 2)
                        {
                            mapCode = taskVO.TargetMapCode2;
                        }

                    }

                    string[] pos = posStr.Split(',');
                    if (pos.Length == 2)
                    {
                        posX = pos[0].SafeToInt32();
                        posY = pos[1].SafeToInt32();
                    }
                }
            }

            //处理在副本中的目标
            if (replaceFuBen)
            {
                Super.ProcessFuBenNPCOrMonster(taskVO, mapCode, ref isFuBen, ref mapCode, ref npcType, ref npcID);
            }
            return true;
        }

        public static String GetTaskTargetNum(XElement taskXml, int doingVal, int num)
        {
            int targetType = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetType{0}", num));
            int targetNum = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetNum{0}", num));
            if (targetNum <= 0)
            {
                targetNum = 1;
            }
            if (targetType != (int)((int)TaskTypes.MonsterSomething) && targetType != (int)((int)TaskTypes.KillMonster)
                && targetType != (int)((int)TaskTypes.CaiJiGoods) && targetType != (int)TaskTypes.KillMonsterForLevel)
            {
                if (doingVal > targetNum)
                {
                    doingVal = targetNum;
                }
            }
            return StringUtil.substitute("({0}/{1})", doingVal, targetNum);
        }

        public static String GetTaskTargetNum(TaskVO taskVO, int doingVal, int num)
        {
            int targetType = 0;
            int targetNum = 0;
            if (num == 1)
            {
                targetType = taskVO.TargetType1;
                targetNum = taskVO.TargetNum1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
                targetNum = taskVO.TargetNum2;
            }

            if (targetNum <= 0)
            {
                targetNum = 1;
            }
            if (targetType != (int)((int)TaskTypes.MonsterSomething) && targetType != (int)((int)TaskTypes.KillMonster)
                && targetType != (int)((int)TaskTypes.CaiJiGoods) && targetType != (int)TaskTypes.KillMonsterForLevel)
            {
                if (doingVal > targetNum)
                {
                    doingVal = targetNum;
                }
            }
            return StringUtil.substitute("({0}/{1})", doingVal, targetNum);
        }
        public static String GetTaskTargetPos(XElement taskXml, int num)
        {
            String targetPos = "";
            if (Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetMapCode{0}", num)) >= 0)
            {
                targetPos = Global.GetXElementAttributeStr(taskXml, StringUtil.substitute("TargetPos{0}", num));
            }
            return targetPos;
        }
        /// <summary>
        /// 格式化任务描述中的地图名
        /// </summary>
        /// <param name="xmlNode"></param>
        /// <returns></returns>
        public static string EncodingTaskDescMapName(XElement xmlNode)
        {
            //return Global.GetMapNameByCodeEx(Global.GetNPCOrMonsterMapCodeByID(xmlNode), true);
            return ConfigSettings.GetMapNameByCodeEx(Global.GetNPCOrMonsterMapCodeByID(xmlNode));
        }

        public static string EncodingTaskDescMapName(int mapcode)
        {
            //return Global.GetMapNameByCodeEx(Global.GetNPCOrMonsterMapCodeByID(xmlNode), true);
            return ConfigSettings.GetMapNameByCodeEx(Global.GetNPCOrMonsterMapCodeByID(mapcode));
        }

        /// <summary>
        /// 格式化任务描述中的地图名
        /// </summary>
        /// <param name="xmlNode"></param>
        /// <returns></returns>
        public static string EncodingTaskDescSName(XElement xmlNode)
        {
            return Global.GetColorStringForNGUIText(ColorCode.green, Global.GetXElementAttributeStr(xmlNode, "SName"));
        }

        /// <summary>
        /// 格式化任务描述中的地图名
        /// </summary>
        /// <param name="xmlNode"></param>
        /// <returns></returns>
        public static string EncodingTaskDescSName(string sName)
        {
            return Global.GetColorStringForNGUIText(ColorCode.green, sName);
        }

        public static string EncodingTaskDescMonsterName(string sName)
        {
            return Global.GetColorStringForNGUIText(ColorCode.red, sName);
        }

        public static String GetTaskTargetDesc(XElement taskXml, int num)
        {
            MonsterVO monsterVO = null;
            NPCInfoVO vo = null;
            String ret = "";
            int targetType = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetType{0}", num));
            int targetNPC = Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetNPC{0}", num));
            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    //xmlNode = Global.GetNPCXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}对话"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                    String SName = EncodingTaskDescSName(monsterVO.SName);
                    ret = StringUtil.substitute(Global.GetLang("击杀[{0}]{1}"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    ret = StringUtil.substitute(Global.GetLang("击杀{0}级以上的怪"), targetNPC);
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                    String SName = EncodingTaskDescSName(monsterVO.SName);
                    ret = StringUtil.substitute(Global.GetLang("击杀[{0}]{1}获取{2}"), mapName, SName, Super.GetTaskGoodsName(taskXml, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.BuySomething))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}购买{2}"), mapName, SName, Super.GetTaskGoodsName(taskXml, num));
                }
                else
                {
                    ret = StringUtil.substitute(Global.GetLang("购买{0}"), Super.GetTaskGoodsName(taskXml, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.UseSomething))
            {
                String targetPos = "";
                if (Global.GetXElementAttributeInt(taskXml, StringUtil.substitute("TargetMapCode{0}", num)) >= 0)
                {
                    targetPos = Global.GetXElementAttributeStr(taskXml, StringUtil.substitute("TargetPos{0}", num));
                }
                if (!string.IsNullOrEmpty(targetPos))
                {
                    ret = StringUtil.substitute(Global.GetLang("去({0})使用{1}"), targetPos, Super.GetTaskGoodsName(taskXml, num));
                }
                else
                {
                    ret = StringUtil.substitute(Global.GetLang("使用{0}"), Super.GetTaskGoodsName(taskXml, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.TransferSomething))
            {
                vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                ret = StringUtil.substitute(Global.GetLang("将{0}交给[{1}]{2}"), Super.GetTaskGoodsName(taskXml, num), mapName, SName);
            }
            else if (targetType == (int)((int)TaskTypes.GetSomething))
            {
                vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                ret = StringUtil.substitute(Global.GetLang("得到{0}"), Super.GetTaskGoodsName(taskXml, num), vo.SName);
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("充值一钻石与[{0}]{1}对话"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                    String SName = EncodingTaskDescSName(monsterVO.SName);
                    ret = StringUtil.substitute(Global.GetLang("到[{0}]采集{1}"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("使用{2}治疗[{0}]{1}"), mapName, SName, Super.GetTaskGoodsName(taskXml, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("火烧[{0}]{1}"), mapName, SName, Super.GetTaskGoodsName(taskXml, num));
                }
            }
            return ret;
        }

        public static String GetTaskTargetDesc(TaskVO taskVO, int num, bool isShowTaskType = true)
        {
            MonsterVO monsterVO = null;
            NPCInfoVO vo = null;
            String ret = "";
            int targetType = 0;
            int targetNPC = 0;
            if (num == 1)
            {
                targetType = taskVO.TargetType1;
                targetNPC = taskVO.TargetNPC1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
                targetNPC = taskVO.TargetNPC2;
            }
            String taskTypeStr = (taskVO.TaskClass == (int)TaskClasses.Main) ? Global.GetLang("[主]") : "";
            String taskName = "";
            if (taskVO.TaskClass == (int)TaskClasses.PriceTask)
            {
                taskName = Global.GetColorStringForNGUIText("ff37f7", taskTypeStr + taskVO.Title);
            }
            else if (taskVO.TaskClass == (int)TaskClasses.DailyTask)
            {
                taskName = Global.GetColorStringForNGUIText("00ff00", taskTypeStr + taskVO.Title);
            }
            else
            {
                taskName = Global.GetColorStringForNGUIText("fac60d", taskTypeStr + taskVO.Title);
            }

            if (targetType == (int)((int)TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    //xmlNode = Global.GetNPCXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}对话"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    if (null != monsterVO)
                    {
                        string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                        String SName = EncodingTaskDescMonsterName(monsterVO.SName);
                        ret = StringUtil.substitute(Global.GetLang("击杀[{0}]{1}"), mapName, SName);
                    }
                }
            }
            else if (targetType == (int)((int)TaskTypes.KillMonsterForLevel))
            {
                if (-1 != targetNPC)
                {
                    if (taskVO.ID < 1000) //新手场景任务特殊处理
                    {
                        ret = StringUtil.substitute(Global.GetLang("击杀吊桥怪物"), targetNPC);
                    }
                    else
                    {
                        ret = StringUtil.substitute(Global.GetLang("击杀{0}级以上的怪"), targetNPC);
                    }
                }
            }
            else if (targetType == (int)((int)TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                    String SName = EncodingTaskDescMonsterName(monsterVO.SName);
                    ret = StringUtil.substitute(Global.GetLang("击杀[{0}]{1}获取{2}"), mapName, SName, Super.GetTaskGoodsName(taskVO, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.BuySomething))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}购买{2}"), mapName, SName, Super.GetTaskGoodsName(taskVO, num));
                }
                else
                {
                    ret = StringUtil.substitute(Global.GetLang("购买{0}"), Super.GetTaskGoodsName(taskVO, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.UseSomething))
            {
                String targetPos = "";

                if (num == 1)
                {
                    if (taskVO.TargetMapCode1 >= 0)
                    {
                        targetPos = taskVO.TargetPos1.ToString();
                    }
                }
                else if (num == 2)
                {
                    if (taskVO.TargetMapCode2 >= 0)
                    {
                        targetPos = taskVO.TargetPos2.ToString();
                    }
                }

                if (!string.IsNullOrEmpty(targetPos))
                {
                    ret = StringUtil.substitute(Global.GetLang("去({0})使用{1}"), targetPos, Super.GetTaskGoodsName(taskVO, num));
                }
                else
                {
                    ret = StringUtil.substitute(Global.GetLang("使用{0}"), Super.GetTaskGoodsName(taskVO, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.TransferSomething))
            {
                vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                ret = StringUtil.substitute(Global.GetLang("将{0}交给[{1}]{2}"), Super.GetTaskGoodsName(taskVO, num), mapName, SName);
            }
            else if (targetType == (int)((int)TaskTypes.GetSomething))
            {
                vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                ret = StringUtil.substitute(Global.GetLang("得到{0}"), Super.GetTaskGoodsName(taskVO, num), vo.SName);
            }
            else if (targetType == (int)((int)TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("充值一钻石与[{0}]{1}对话"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(monsterVO.MapCode);
                    String SName = EncodingTaskDescSName(monsterVO.SName);
                    ret = StringUtil.substitute(Global.GetLang("到[{0}]采集{1}"), mapName, SName);
                }
            }
            else if (targetType == (int)((int)TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("使用{2}治疗[{0}]{1}"), mapName, SName, Super.GetTaskGoodsName(taskVO, num));
                }
            }
            else if (targetType == (int)((int)TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    vo = ConfigNPCs.GetNPCVOByID(targetNPC);
                    string mapName = EncodingTaskDescMapName(vo.MapCode);
                    String SName = EncodingTaskDescSName(vo.SName);
                    ret = StringUtil.substitute(Global.GetLang("火烧[{0}]{1}"), mapName, SName, Super.GetTaskGoodsName(taskVO, num));
                }
            }
            if (isShowTaskType)
            {
                return string.Format("{0}\n{1}", taskName, ret);
            }
            else
            {
                return string.Format("{0}", ret);
            }
        }

        /// <summary>
        /// 取得部分任务信息串
        /// 如怒斩中的任务：救治村民，有两行串，得到XXX，使用XXX
        /// </summary>
        public static string GetTaskInfoPartStr(TaskData taskData, XElement taskXmlNode, int TargetID)
        {
            String str = "";

            String targetNum = Super.GetTaskTargetNum(taskXmlNode, taskData.DoingTaskVal1, TargetID);
            str = Super.GetTaskTargetDesc(taskXmlNode, TargetID);
            if (str.Length > 0)
            {
                String targetName = Super.GetTaskTargetName(taskXmlNode, TargetID);
                if ("" != targetName)
                {
                    int mapCode = -1;
                    int npcType = -1;
                    int npcID = -1;
                    int isFuBen;
                    int targetType;
                    int posX = -1;
                    int posY = -1;

                    Super.GetTaskTargetID(taskXmlNode, TargetID, out isFuBen, out mapCode, out npcType, out npcID, out targetType, false, out posX, out posY);
                }

                if (!string.IsNullOrEmpty(targetNum))
                {
                    str = StringUtil.substitute("{0}{1}", str, Global.GetColorStringForNGUIText(ColorCode.red, targetNum));
                }
            }

            return str;
        }

        public static String GetTaskSourceNPCName(XElement taskXml)
        {
            String ret = "";
            int sourceNPC = Global.GetXElementAttributeInt(taskXml, "SourceNPC");
            if (sourceNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(sourceNPC);
                ret = vo.SName;
            }
            return ret;
        }

        public static String GetTaskSourceNPCName(TaskVO taskVO)
        {
            String ret = "";
            int sourceNPC = taskVO.SourceNPC;
            if (sourceNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(sourceNPC);
                ret = vo.SName;
            }
            return ret;
        }
        public static String GetTaskDestNPCName(XElement taskXml)
        {
            String ret = "";
            int destNPC = Global.GetXElementAttributeInt(taskXml, "DestNPC");
            if (destNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
                ret = vo.SName;
            }
            return ret;
        }

        public static String GetTaskDestNPCName(TaskVO taskVO)
        {
            String ret = "";
            int destNPC = taskVO.DestNPC;
            if (destNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
                ret = vo.SName;
            }
            return ret;
        }

        public static bool GetTaskSourceNPCID(XElement taskXml, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int destNPC = Global.GetXElementAttributeInt(taskXml, "SourceNPC");

            NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
            mapCode = vo.MapCode;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = vo.ID;
            return true;
        }
        public static bool GetTaskSourceNPCID(TaskVO taskVO, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int destNPC = taskVO.SourceNPC;

            NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
            mapCode = vo.MapCode;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = vo.ID;
            return true;
        }
        public static bool GetTaskDestNPCID(XElement taskXml, ref int mapCode, ref int npcType, ref int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int destNPC = Global.GetXElementAttributeInt(taskXml, "DestNPC");
            //XElement xmlNode =  Global.GetNPCXmlNodeByID(destNPC);
            //mapCode = Global.GetNPCOrMonsterMapCodeByID(xmlNode);
            //npcType = (int)(GSpriteTypes.NPC);
            //npcID = Global.GetXElementAttributeInt(xmlNode, "ID");

            NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
            mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
            npcType = (int)(GSpriteTypes.NPC);
            npcID = vo.ID;

            return true;
        }
        public static bool GetTaskDestNPCID(TaskVO taskVO, ref int mapCode, ref int npcType, ref int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int destNPC = taskVO.DestNPC;
            //XElement xmlNode =  Global.GetNPCXmlNodeByID(destNPC);
            //mapCode = Global.GetNPCOrMonsterMapCodeByID(xmlNode);
            //npcType = (int)(GSpriteTypes.NPC);
            //npcID = Global.GetXElementAttributeInt(xmlNode, "ID");

            NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
            mapCode = Global.GetNPCOrMonsterMapCodeByID(vo.MapCode);
            npcType = (int)(GSpriteTypes.NPC);
            npcID = vo.ID;

            return true;
        }
        public static String GetTaskSourceNPCDesc(XElement taskXml)
        {
            String ret = "";
            int destNPC = Global.GetXElementAttributeInt(taskXml, "SourceNPC");
            if (destNPC != -1)
            {
                //XElement xmlNode =  Global.GetNPCXmlNodeByID(destNPC);
                //string mapName = EncodingTaskDescMapName(xmlNode);
                //String SName = EncodingTaskDescSName(xmlNode);
                //ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}接取"), mapName, SName);

                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);

                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}接取"), mapName, SName);
            }
            return ret;
        }
        public static String GetTaskSourceNPCDesc(TaskVO taskVO)
        {
            String ret = "";
            int destNPC = taskVO.SourceNPC;
            if (destNPC != -1)
            {
                //XElement xmlNode =  Global.GetNPCXmlNodeByID(destNPC);
                //string mapName = EncodingTaskDescMapName(xmlNode);
                //String SName = EncodingTaskDescSName(xmlNode);
                //ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}接取"), mapName, SName);

                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);

                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}接取"), mapName, SName);
            }
            return ret;
        }
        public static String GetTaskDestNPCDesc(XElement taskXml)
        {
            String ret = "";
            int destNPC = Global.GetXElementAttributeInt(taskXml, "DestNPC");
            if (destNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}提交"), mapName, SName);
            }
            return ret;
        }
        public static String GetTaskDestNPCDesc(TaskVO taskVO, bool isShowTaskType = true)
        {
            String ret = "";
            int destNPC = taskVO.DestNPC;
            if (destNPC != -1)
            {
                NPCInfoVO vo = ConfigNPCs.GetNPCVOByID(destNPC);
                string mapName = EncodingTaskDescMapName(vo.MapCode);
                String SName = EncodingTaskDescSName(vo.SName);
                String taskTypeStr = (taskVO.TaskClass == (int)TaskClasses.Main) ? Global.GetLang("[主]") : "";
                String taskName = "";
                if (taskVO.TaskClass == (int)TaskClasses.PriceTask)
                {
                    taskName = Global.GetColorStringForNGUIText("ff37f7", taskTypeStr + taskVO.Title);
                }
                else if (taskVO.TaskClass == (int)TaskClasses.DailyTask)
                {
                    taskName = Global.GetColorStringForNGUIText("00ff00", taskTypeStr + taskVO.Title);
                }
                else
                {
                    taskName = Global.GetColorStringForNGUIText("fac60d", taskTypeStr + taskVO.Title);
                }
                ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}提交"), mapName, SName);
                //ret = StringUtil.substitute(Global.GetLang("去[{0}]找{1}提交"), mapName, SName);
                if (isShowTaskType)
                {
                    ret = string.Format("{0}\n{1}", taskName, ret);
                }
            }
            return ret;
        }
        public static bool JugeTaskTargetComplete(XElement xmlNode, int num, int taskVal)
        {
            if (Global.GetXElementAttributeInt(xmlNode, StringUtil.substitute("TargetNPC{0}", num)) < 0)
            {
                return true;
            }
            int targetNum = Global.GetXElementAttributeInt(xmlNode, StringUtil.substitute("TargetNum{0}", num));
            if (targetNum <= 0)
            {
                targetNum = 1;
            }
            return (taskVal >= targetNum);
        }

        public static bool JugeTaskTargetComplete(TaskVO taskVO, int num, int taskVal)
        {
            int targetNum = 0;
            if (num == 1)
            {
                if (taskVO.TargetNPC1 < 0)
                {
                    return true;
                }
                targetNum = taskVO.TargetNum1;
            }
            else if (num == 2)
            {
                if (taskVO.TargetNPC2 < 0)
                {
                    return true;
                }
                targetNum = taskVO.TargetNum2;
            }
            if (targetNum <= 0)
            {
                targetNum = 1;
            }
            return (taskVal >= targetNum);
        }
        public static bool JugeTaskComplete(TaskVO taskVO, int taskVal1, int taskVal2)
        {
            return (JugeTaskTargetComplete(taskVO, 1, taskVal1) && JugeTaskTargetComplete(taskVO, 2, taskVal2));
        }


        public static bool JugeTaskComplete(XElement taskXmlNode, int taskVal1, int taskVal2)
        {
            return (JugeTaskTargetComplete(taskXmlNode, 1, taskVal1) && JugeTaskTargetComplete(taskXmlNode, 2, taskVal2));
        }
        public static int GetFocusTaskCount()
        {
            int ret = 0;
            if (null == Global.Data.roleData.TaskDataList)
            {
                return ret;
            }
            for (int i = 0; i < Global.Data.roleData.TaskDataList.Count; i++)
            {
                if (Global.Data.roleData.TaskDataList[i].DoingTaskFocus > 0)
                {
                    ret++;
                }
            }
            return ret;
        }

        public static GoodsData GetViewTaskInfoGoodsData(int goodsDbID)
        {
            if (null == Super.GData.ViewTaskInfoGoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.ViewTaskInfoGoodsDataList.Count; i++)
            {
                if (Super.GData.ViewTaskInfoGoodsDataList[i].Id == goodsDbID)
                {
                    return Super.GData.ViewTaskInfoGoodsDataList[i];
                }
            }
            return null;
        }

        //public static int AutoAcceptTaskTaskID =  0;
        public static void AutoAcceptTask(int taskID, String npc)
        {
            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return;
            }

            int toNpcID = 0;
            if (npc == "SourceNPC")
            {
                toNpcID = taskVO.SourceNPC;
            }
            else if (npc == "DestNPC")
            {
                toNpcID = taskVO.DestNPC;
            }

            if (toNpcID <= 0)
            {
                return;
            }



            int npcID = SpriteBaseIds.NpcBaseId + toNpcID;
            GameInstance.Game.SpriteNewTask(npcID, taskID);
            //SystemHintWindow.AddTaskGuidHintText(taskID);
            //AutoAcceptTaskTaskID = taskID;
        }

        public static List<TalkTextNode> ParseTalkTextInfo(String talkText)
        {
            List<TalkTextNode> list = new List<TalkTextNode>();
            if (string.IsNullOrEmpty(talkText))
            {
                return list;
            }

            bool inc = false;
            int charIndex = 0;
            int lastCharIndex = 0;
            TalkTextNode node = null;
            while (charIndex < talkText.Length)
            {
                if (',' == talkText[charIndex])
                {
                    if (!inc)
                    {
                        if (charIndex > lastCharIndex)
                        {
                            node = new TalkTextNode();
                            node.NpcID = Global.SafeConvertToInt32(talkText.Substring(lastCharIndex, charIndex - lastCharIndex));
                            lastCharIndex = charIndex + 1;
                        }
                    }
                }
                else if ('｛' == talkText[charIndex]/* || '{' == talkText[charIndex]*/)
                {
                    if (null == node)
                    {
                        node = new TalkTextNode();
                        node.NpcID = Global.SafeConvertToInt32(talkText.Substring(lastCharIndex, charIndex - lastCharIndex));
                    }
                    inc = true;
                    lastCharIndex = charIndex + 1;
                }
                else if ('｝' == talkText[charIndex]/* || '}' == talkText[charIndex]*/)
                {
                    inc = false;
                    if (charIndex > lastCharIndex && null != node)
                    {
                        node.TalkText = talkText.Substring(lastCharIndex, charIndex - lastCharIndex);
                        list.Add(node);
                        node = null;
                        lastCharIndex = charIndex + 1;
                    }
                }

                charIndex++;
            }

            return list;
        }

        public static List<TalkTextNode> GetTaskTalkTextInfo(int taskID, String talkName)
        {

            List<TalkTextNode> list = new List<TalkTextNode>();
            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return list;
            }

            String talkText = "";
            if (talkName == "AcceptTalk")
            {
                talkText = taskVO.AcceptTalk;
            }
            else if (talkName == "CompleteTalk")
            {
                talkText = taskVO.CompleteTalk;
            }
            else if (talkName == "DoingTalk")
            {
                talkText = taskVO.DoingTalk;
            }

            if (string.IsNullOrEmpty(talkText))
            {
                return list;
            }

            list = Super.ParseTalkTextInfo(talkText);
            return list;
        }

        public static String FormatTaskTalkText(List<TalkTextNode> talkList)
        {
            String str = "";
            for (int i = 0; i < talkList.Count; i++)
            {
                int npcID = talkList[i].NpcID;
                String name = npcID <= 0 ? Global.FormatRoleName(Global.Data.roleData) : ConfigNPCs.GetNPCNameByID(npcID);
                String colorStr = npcID <= 0 ? "00ff00" : "00ff00";
                if (str.Length > 0)
                {
                    str += "\n\n";
                }
                //str += StringUtil.substitute("<font color=\"#{0}\">{1}:</font> {2}", colorStr, name, talkList[i].TalkText);
                str += StringUtil.substitute("{{{0}}}{1}：{{-}}\r\n{2}", colorStr, name, talkList[i].TalkText);
            }

            return str;
        }

        public static int GetNextMainTask(int taskID)
        {
            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return -1;
            }

            if (taskVO.TaskClass != 0)
            {
                return -1;
            }

            int nextMainTaskID = -1;

            if (ConfigTasks.TaskXmlNodeDict.Count <= 0)
            {
                return -1;
            }
            foreach (KeyValuePair<int, TaskVO> pair in ConfigTasks.TaskXmlNodeDict)
            {
                int taskCalss = pair.Value.TaskClass;
                if (taskCalss != 0)
                {
                    continue;
                }
                int prevTask = pair.Value.PrevTask;
                if (prevTask == taskID)
                {
                    nextMainTaskID = pair.Value.ID;
                    break;
                }
            }

            return nextMainTaskID;
        }

        ///获取任务的描述
        public static String GetTaskTargetGuidDesc(int taskID, int num)
        {
            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return "";
            }

            TaskData taskData = Global.GetTaskDataByID(taskID);
            if (null == taskData)
            {
                return "";
            }

            int isFuBen = 0;
            int mapCode = -1;
            int npcType = (int)(GSpriteTypes.NPC);
            int npcID = -1;
            int posX = -1;
            int posY = -1;
            int targetType = (int)((int)TaskTypes.None);
            if (!Super.GetTaskTargetID(taskVO, num, out isFuBen, out mapCode, out npcType, out npcID, out targetType, true, out posX, out posY))
            {
                return "";
            }

            if (num == 1)
            {
                targetType = taskVO.TargetType1;
            }
            else if (num == 2)
            {
                targetType = taskVO.TargetType2;
            }

            if ((int)TaskTypes.KillMonster != targetType && (int)TaskTypes.MonsterSomething != targetType && (int)TaskTypes.CaiJiGoods != targetType)
            {
                return "";
            }

            int targetNPC = 0;
            int targetNum = 0;
            String propName = "";
            if (num == 1)
            {
                targetNPC = taskVO.TargetNPC1;
                targetNum = taskVO.TargetNum1;
                propName = taskVO.PropsName1;
            }
            else if (num == 2)
            {
                targetNPC = taskVO.TargetNPC2;
                targetNum = taskVO.TargetNum2;
                propName = taskVO.PropsName2;
            }




            MonsterVO monsterVO = ConfigMonsters.GetMonsterXmlNodeByID(targetNPC);
			int taskVal =  num ;
			if (targetType == (int)((int)TaskTypes.KillMonster))
			{
                return StringUtil.substitute(Global.GetLang("击杀 {0}{1}/{2}"), monsterVO.SName, taskVal, targetNum);
			}
			else if (targetType == (int)((int)TaskTypes.MonsterSomething))
			{
                return StringUtil.substitute(Global.GetLang("击杀{0} 获取 {1}{2}/{3}"), monsterVO.SName, propName, taskVal, targetNum);
			}
			else if (targetType == (int)((int)TaskTypes.CaiJiGoods))
			{
                return StringUtil.substitute(Global.GetLang("采集 {0}{1}/{2}"), monsterVO.SName, taskVal, targetNum);
			}
			
			return "";
		}
		
		///判断是否需要进入副本
		public static bool JugeTaskNeedEnterFuBen(int taskID)
		{
            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return false;
            }

            TaskData taskData = Global.GetTaskDataByID(taskID);
            if (null == taskData)
            {
                return false;
            }

            if (Super.JugeTaskComplete(taskVO, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
            {
                return false;
            }

            int isFuBen = 0;
            int mapCode = -1;
            int npcType = (int)(GSpriteTypes.NPC);
            int npcID = -1;
            int targetType = (int)((int)TaskTypes.None);
            int posX = -1;
            int posY = -1;

            if (!Super.JugeTaskTargetComplete(taskVO, 1, taskData.DoingTaskVal1))
            {
                Super.GetTaskTargetID(taskVO, 1, out isFuBen, out mapCode, out npcType, out npcID, out targetType, true, out posX, out posY);
            }

            if (MapTypes.NormalCopy == Global.GetMapType(mapCode))
            {
                return true;
            }

            if (!Super.JugeTaskTargetComplete(taskVO, 2, taskData.DoingTaskVal2))
            {
                Super.GetTaskTargetID(taskVO, 2, out isFuBen, out mapCode, out npcType, out npcID, out targetType, true, out posX, out posY);
            }

            if (MapTypes.NormalCopy == Global.GetMapType(mapCode))
            {
                return true;
            }

            return true;
        }

        //#########################################################################################################

        //#########################################################################################################
        //清除子窗口

        public static void CleanUpAllChildWindows(HSGameEngine.GameEngine.SilverLight.Canvas parent)
        {
            if (null == parent)
            {
                return;
            }

            List<GChildWindow> childWindowsList = new List<GChildWindow>();
            for (int i = 0; i < parent.Children.numChildren; i++)
            {
                /*if (parent.Children.getChildAt(i) is GChildWindow)
                {
                    childWindowsList.Add(parent.Children.getChildAt(i) as GChildWindow);
                }
                else if (parent.Children.getChildAt(i) is HSGameEngine.GameEngine.SilverLight.Canvas)
                {
                    CleanUpAllChildWindows(parent.Children.getChildAt(i) as HSGameEngine.GameEngine.SilverLight.Canvas);
                }*/
            }
            for (int i = 0; i < childWindowsList.Count; i++)
            {
                childWindowsList[i].NotifyClose(-1);
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //快捷栏管理


        private static QuickKeyItem ParseQuickKeyItem(String item)
        {
            if ("" == StringUtil.trim(item))
            {
                return null;
            }
            if ("undefined@undefined" == StringUtil.trim(item))
            {
                return null;
            }
            string[] fields = item.Split('@');
            if (fields.Length != 2)
            {
                return null;
            }
            if (Convert.ToInt32(Global.StringTrim(fields[0])) < 0)
            {
                return null;
            }

            int skillID = Convert.ToInt32(Global.StringTrim(fields[1]));
            int skillType = Convert.ToInt32(Global.StringTrim(fields[0]));

            //对于为学习技能,清除掉技能栏设置
            if (null == Global.GetSkillDataByID(skillID))
            {
                return null;
            }

            QuickKeyItem quickKeyItem = new QuickKeyItem()
            {
                ID = skillID,
                ItemType = skillType,
            };

            return quickKeyItem;
        }
        public static void ParseMainQuickKeys(String keys, bool forceSave = false)
        {
            for (int i = 0; i < Super.GData.MainQuickKeyItems.Length; i++)
            {
                Super.GData.MainQuickKeyItems[i] = null;
            }
            if (null == keys || StringUtil.trim(keys) == "")
            {
                return;
            }
            string[] fields = keys.Split('|');
            if (fields.Length < 4)
            {
                return;
            }
            for (int i = 0; i < fields.Length && i < Super.GData.MainQuickKeyItems.Length; i++)
            {
                Super.GData.MainQuickKeyItems[i] = ParseQuickKeyItem(fields[i]);
            }

            string newKeys = Super.GetQuickKeys(Super.GData.MainQuickKeyItems);

            if (newKeys != keys || forceSave)
            {
                Global.Data.roleData.MainQuickBarKeys = newKeys;
                GameInstance.Game.SpriteModKeys(0, newKeys);
            }
        }
        public static void ParseOtherQuickKeys(String keys)
        {
            for (int i = 0; i < Super.GData.OtherQuickKeyItems.Length; i++)
            {
                Super.GData.OtherQuickKeyItems[i] = null;
            }
            if (null == keys || StringUtil.trim(keys) == "")
            {
                return;
            }
            string[] fields = keys.Split('|');
            if (fields.Length < 4)
            {
                return;
            }
            for (int i = 0; i < fields.Length && i < Super.GData.MainQuickKeyItems.Length; i++)
            {
                Super.GData.OtherQuickKeyItems[i] = ParseQuickKeyItem(fields[i]);
            }
        }
        public static String GetQuickKeys(QuickKeyItem[] quickKeyItems)
        {
            if (null == quickKeyItems || quickKeyItems.Length < 4)
            {
                return "";
            }
            String ret = "";
            for (int i = 0; i < quickKeyItems.Length; i++)
            {
                if (quickKeyItems[i] == null)
                {
                    if (ret.Length > 0)
                    {
                        ret += "|";
                    }
                    ret += StringUtil.substitute("-1@0");
                }
                else
                {
                    if (ret.Length > 0)
                    {
                        ret += "|";
                    }
                    ret += StringUtil.substitute("{0}@{1}", quickKeyItems[i].ItemType, quickKeyItems[i].ID);
                }
            }
            return ret;
        }
        public static GIcon GetQuickKeyIcon(QuickKeyItem quickKeyItem, int listBoxType)
        {
            if (null == quickKeyItem)
            {
                return null;
            }
            if (quickKeyItem.ItemType < 0)
            {
                return null;
            }
            String bitmapImageURL = null;
            int tipTypes = (int)TipTypes.NormalText;
            String tip = null;
            String text = null;
            if (0 == quickKeyItem.ItemType)
            {
                SkillData skillData = Global.GetSkillDataByID(quickKeyItem.ID);
                if (null == skillData)
                {
                    return null;
                }
                MagicInfoVO xmlItme = Global.GetSkillXmlNode(skillData.SkillID);
                if (null == xmlItme)
                {
                    return null;
                }
                //String iconName =  "";
                int iconID = xmlItme.MagicIcon;
                if (iconID < 0)
                {
                    iconID = 0;
                }
                bitmapImageURL = Super.GetSkillImageURLFromIconCode(iconID.ToString());
                tipTypes = (int)TipTypes.SkillText;
                tip = StringUtil.substitute("{0},{1}", skillData.SkillID, skillData.SkillLevel);
            }
            else
            {
                GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(quickKeyItem.ID);
                if (null == goodVO)
                {
                    return null;
                }
                bitmapImageURL = Super.GetGoodsImageURLFromIconCode(Super.GetIconCode(goodVO));
                tipTypes = (int)TipTypes.GoodsText;
                tip = StringUtil.substitute("{0},{1},{2},{3}", goodVO.ID, (int)(GoodsPriceTypes.HalfPrice), -1, (int)(GoodsOwnerTypes.None));
                text = Global.GetTotalGoodsCountByID(quickKeyItem.ID).ToString();
            }
            GIcon icon = new GIcon(IconTypes.Composite)
            {
                Width = 32,
                Height = 32,
                TipType = tipTypes,
                Tip = tip,
                ItemCode = quickKeyItem.ID,
                ItemObject = null,
                BoxTypes = listBoxType,
                //BodyBackground = new SolidColorBrush(ColorSL.FromArgb(255, 28, 19, 08)),
                TextHorizontalAlignment = Layout.Right,
                TextVerticalAlignment = Layout.Bottom,
                TextShadowColor = Colors.Black,
                TextColor = new SolidColorBrush(HSGameEngine.GameEngine.SilverLight.ColorSL.FromArgb(255, 58, 206, 0)),
            };

            if (0 == quickKeyItem.ItemType)
            {
                icon.BodyURL = new ImageURL(bitmapImageURL, false, 1);
            }
            else
            {
                icon.BodyURL = new ImageURL(bitmapImageURL, false, 0);
            }

            icon.Text = text;
            return icon;
        }
        public static void InitMainQuickKeys()
        {
            if (!string.IsNullOrEmpty(Global.Data.roleData.MainQuickBarKeys))
            {
                return;
            }
            if (0 == Global.Data.roleData.Occupation)
            {
                //Global.Data.roleData.MainQuickBarKeys = "-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0";
                //Global.Data.roleData.MainQuickBarKeys = "0@101|1@100|0@102|0@103";
                Global.Data.roleData.MainQuickBarKeys = "-1@0|1@100|-1@0|-1@0";
            }
            else if (1 == Global.Data.roleData.Occupation)
            {
                //Global.Data.roleData.MainQuickBarKeys = "-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0";
                //Global.Data.roleData.MainQuickBarKeys = "0@201|1@200|0@202|0@203";
                Global.Data.roleData.MainQuickBarKeys = "-1@0|1@200|-1@0|-1@0";
            }
            else if (2 == Global.Data.roleData.Occupation)
            {
                //Global.Data.roleData.MainQuickBarKeys = "-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0|-1@0";
                //Global.Data.roleData.MainQuickBarKeys = "0@301|1@300|0@302|0@303";
                Global.Data.roleData.MainQuickBarKeys = "-1@0|1@300|-1@0|-1@0";
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //查看其他人的角色数据

        public static GoodsData FindOtherRoleGoodsDataByDbID(int dbID)
        {
            if (null == Super.GData.OtherRoleData)
            {
                return null;
            }
            if (null == Super.GData.OtherRoleData.GoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.OtherRoleData.GoodsDataList.Count; i++)
            {
                if (Super.GData.OtherRoleData.GoodsDataList[i].Id == dbID)
                {
                    return Super.GData.OtherRoleData.GoodsDataList[i];
                }
            }
            return null;
        }
        public static GoodsData FindOtherRoleGoodsDataByDbID2(int dbID)
        {
            if (null == Super.GData.OtherRoleData2)
            {
                return null;
            }
            if (null == Super.GData.OtherRoleData2.GoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.OtherRoleData2.GoodsDataList.Count; i++)
            {
                if (Super.GData.OtherRoleData2.GoodsDataList[i].Id == dbID)
                {
                    return Super.GData.OtherRoleData2.GoodsDataList[i];
                }
            }
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################  
        //JS调用/页面刷新

        public static void InstantPageRefresh()
        {
            try
            {

            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //登陆时的背景声音控制


        public static GIcon InitPlaySoundControls(HSGameEngine.GameEngine.SilverLight.Canvas canvas, int x = -1, int y = -1, String tip = null)
        {
            if (x < 0)
            {
                //x = Global.StandMainWinWidth - 52;
            }

            if (y < 0)
            {
                //y = Global.StandMainWinHeight - 44;
            }

            GIcon icon = new GIcon(IconTypes.HitModes)
            {
                Width = 52,
                Height = 44,
                Text = "  ",
                TipType = (int)(int)TipTypes.ExternalTip,
                Tip = tip,
                TextColor = new SolidColorBrush(Colors.White),
                Cursor = Cursors.Hand,
            };

            if (!Global.BackgroundSound.IsPlaying)
            {
                icon.Hit = true;
            }
            icon.MouseLeftButtonUp = (s, e) =>
            {
                Global.Data.SysSetting.CloseGameMusic = !Global.Data.SysSetting.CloseGameMusic;
                Global.SaveSystemSettings();
                if (Global.Data.SysSetting.CloseGameMusic)
                {
                    Global.BackgroundSound.stop();
                }
                else
                {
                    if (null != Global.Data.roleData)
                    {
                        Global.BackgroundSound.play(Global.WebPath(ConfigSettings.GetMapMusicFileByCode(Global.Data.roleData.MapCode)), true);
                    }
                }
                e.stopPropagation();
            }
                ;
            HSGameEngine.GameEngine.SilverLight.Canvas.SetLeft(icon, x + 10);
            HSGameEngine.GameEngine.SilverLight.Canvas.SetTop(icon, y + 10);
            HSGameEngine.GameEngine.SilverLight.Canvas.SetZIndex(icon, 10);
            canvas.Children.Add(icon);
            return icon;
        }

        //#########################################################################################################

        //#########################################################################################################
        //掉落物品管理

        public static GoodsData GetFallGoodsDataByDbID(int id)
        {
            if (null == Super.GData.CurrentGoodsPackListData || null == Super.GData.CurrentGoodsPackListData.GoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.CurrentGoodsPackListData.GoodsDataList.Count; i++)
            {
                if (Super.GData.CurrentGoodsPackListData.GoodsDataList[i].Id == id)
                {
                    return Super.GData.CurrentGoodsPackListData.GoodsDataList[i];
                }
            }
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################
        //交易物品管理

        public static GoodsData GetExchangeGoodsDataByDbID(int id)
        {
            if (null == Global.Data.ExchangeDataItem)
            {
                return null;
            }
            var obj = Global.Data.ExchangeDataItem.GoodsDict;
            foreach (var val in Global.Data.ExchangeDataItem.GoodsDict.Values)
            {
                List<GoodsData> goodsDataList = val;
                if (null != goodsDataList)
                {
                    for (int i = 0; i < goodsDataList.Count; i++)
                    {
                        if (goodsDataList[i].Id == id)
                        {
                            return goodsDataList[i];
                        }
                    }
                }
            }
            return null;
        }
        public static int GetExhcangeOtherRoleID()
        {
            if (null == Global.Data.ExchangeDataItem)
            {
                return -1;
            }
            int otherRoleID = Global.Data.ExchangeDataItem.RequestRoleID;
            return otherRoleID;
        }

        //#########################################################################################################

        //#########################################################################################################
        //摆摊物品管理

        public static GoodsData GetStallGoodsDataByDbID(int id)
        {
            if (null == Global.Data.StallDataItem)
            {
                return null;
            }
            if (null != Global.Data.StallDataItem.GoodsList)
            {
                for (int i = 0; i < Global.Data.StallDataItem.GoodsList.Count; i++)
                {
                    if (Global.Data.StallDataItem.GoodsList[i].Id == id)
                    {
                        return Global.Data.StallDataItem.GoodsList[i];
                    }
                }
            }
            return null;
        }
        public static GoodsData GetOtherStallGoodsDataByDbID(int id)
        {
            if (null == Global.Data.OtherStallDataItem)
            {
                return null;
            }
            if (null != Global.Data.OtherStallDataItem.GoodsList)
            {
                for (int i = 0; i < Global.Data.OtherStallDataItem.GoodsList.Count; i++)
                {
                    if (Global.Data.OtherStallDataItem.GoodsList[i].Id == id)
                    {
                        return Global.Data.OtherStallDataItem.GoodsList[i];
                    }
                }
            }
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################
        //挂售物品管理

        public static SaleGoodsData GetSaleGoodsDataByDbID(int id)
        {
            if (null == Super.GData.OtherRolesSaleGoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.OtherRolesSaleGoodsDataList.Count; i++)
            {
                if (Super.GData.OtherRolesSaleGoodsDataList[i].GoodsDbID == id)
                {
                    return Super.GData.OtherRolesSaleGoodsDataList[i];
                }
            }
            return null;
        }

        //#########################################################################################################

        /// <summary>
        /// 获取项的文字
        /// </summary>
        /// <param name="lineData"></param>
        /// <returns></returns>  
        public static String GetLineDataText(LineData lineData)
        {
            if (lineData.OnlineCount <= 300)
            {
                return Global.GetLang("顺畅");
            }
            else if (lineData.OnlineCount <= 500)
            {
                return Global.GetLang("一般");
            }
            return Global.GetLang("拥挤");
        }

        /// <summary>
        /// 获取项的文字
        /// </summary>
        /// <param name="lineData"></param>
        /// <returns></returns>  
        public static SolidColorBrush GetLineDataBrush(LineData lineData)
        {
            if (lineData.OnlineCount <= 100)
            {
                return new SolidColorBrush(ColorSL.FromArgb(255, 0, 255, 0));
            }
            else if (lineData.OnlineCount <= 300)
            {
                return new SolidColorBrush(ColorSL.FromArgb(255, 208, 129, 0));
            }
            return new SolidColorBrush(ColorSL.FromArgb(255, 205, 0, 3));
        }

        //#########################################################################################################

        //#########################################################################################################
        //自动挂机

        public static void HintEndAutoFight(bool showHint = true)
        {
            Global.Data.GameScene.CancelAutoFight();
            if (showHint)
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("您的操作终止了自动挂机战斗...")));
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //因交易禁止使用物品

        public static bool IsDisableUsingGoods()
        {
            if (null == Super.GData.PlayZoneRoot)
            {
                return false;
            }
            //if (null == Super.GData.PlayZoneRoot.FindName("NPCSaleWindow") as GChildWindow)
            {
                return false;
            }
            GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("交易窗口打开时，无法使用物品, 请关闭交易窗口后使用")));
            return true;
        }

        //#########################################################################################################

        //#########################################################################################################
        //GIcon动态提示管理


        public static void AddHintGIcon(GIcon icon)
        {
            //Super.GData.GIconHintList.Add(icon);
        }
        public static void RemoveHintGIcon(GIcon icon)
        {
            //Super.GData.GIconHintList.Remove(icon);
        }

        //#########################################################################################################

        //#########################################################################################################
        //组队管理


        private static double JugeTeamUIItemCount = 0;



        public static void JugeTeamUIItemQueue(GIcon sysIcon)
        {
            JugeTeamUIItemCount++;
            if (JugeTeamUIItemCount % 20 != 0)
            {
                return;
            }
            if (Super.GData.TeamUIItemQueue.Count <= 0)
            {
                return;
            }
            if (null != Global.Data.CurrentTeamData && Global.Data.CurrentTeamData.TeamRoles.Count >= 5)
            {
                while (Super.GData.TeamUIItemQueue.Count > 0)
                {
                    TeamUIItem teamUIItem = Super.GData.TeamUIItemQueue.shift();
                    GameInstance.Game.SpriteTeam((int)(TeamCmds.Refuse), teamUIItem.OtherRoleID, 0);
                }
                sysIcon.EnableHint = false;
            }
            else
            {
                TeamUIItem teamUIItem = Super.GData.TeamUIItemQueue[0];
                if (Global.GetCorrectLocalTime() - teamUIItem.AddedTicks >= (30 * 1000))
                {
                    GameInstance.Game.SpriteTeam((int)(TeamCmds.Refuse), teamUIItem.OtherRoleID, 0);
                    Super.GData.TeamUIItemQueue.shift();
                    if (Super.GData.TeamUIItemQueue.Count <= 0)
                    {
                        sysIcon.EnableHint = false;
                    }
                }
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //文本格式化

        public static bool CanShowFormatedRoleMenu(String text)
        {
            String newText = text;
			String roleName =  Global.GetLang("【") + Global.FormatRoleName(Global.Data.roleData) + Global.GetLang("】");
            if (newText == roleName)
            {
                return false;
            }
            string[] fields = text.Split('+');
            String goodsName = fields[0];
            if (-1 != ConfigGoods.FindGoodsIDByName(goodsName))
            {
                return false;
            }
            if (-1 != ConfigMonsters.FindMonsterIDByName(newText))
            {
                return false;
            }
            if (-1 != ConfigNPCs.FindNPCIDByName(newText))
            {
                return false;
            }
            return true;
        }
        public static void FormatTextBlockEx(GTextBlockEx textBlockEx)
        {
            String text = textBlockEx.Text;
            List<string> textList = new List<string>();
            int startPos = 0;
            int find = text.IndexOf('【', startPos);
            while (-1 != find)
            {
                int end = text.IndexOf('】', find);
                if (end == -1)
                {
                    break;
                }
                String textFiled = text.Substring(find, end + 1 - find);
                textList.Add(Global.StringTrim(textFiled));
                startPos = end + 1;
                find = text.IndexOf('【', startPos);
            }
            for (int i = 0; i < textList.Count; i++)
            {
                textBlockEx.SetSpecialText(textList[i], new SolidColorBrush(Colors.LightGreen), true, null, false);
            }
            if (textList.Count > 0)
            {
                textBlockEx.RenderText();
            }
        }

        /// <summary>
        /// 解析#FFFF0000这个样子的颜色字符串成画刷
        /// </summary>
        public static SolidColorBrush ParseStringColor(String textColor)
        {
            try
            {
                String val = textColor;
                val = Global.StringReplaceAll(val, "#", "");
                int a = Convert.ToByte("ff", 16);
                int pos = 0;
                if (val.Length == 8)
                {
                    a = Convert.ToByte(val.Substring(pos, 2), 16);
                    pos = 2;
                }
                int r = Convert.ToByte(val.Substring(pos, 2), 16);
                pos += 2;
                int g = Convert.ToByte(val.Substring(pos, 2), 16);
                pos += 2;
                int b = Convert.ToByte(val.Substring(pos, 2), 16);
                uint col = ColorSL.FromArgb(a, r, g, b);
                return new SolidColorBrush(col);
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
            return new SolidColorBrush(Colors.White);
        }
        public static void ParseFormatTextItem(String textField, out string text, out SolidColorBrush textBrush, out bool underLine, out string tag)
        {
            text = "";
            textBrush = new SolidColorBrush(Colors.White);
            underLine = false;
            tag = null;

            textField = Global.StringTrim(textField.Substring(1, textField.Length - 1 - 1));
            if (textField.Length <= 4)
            {
                return;
            }
            string[] newFields = textField.Split(' ');
            for (int i = 0; i < newFields.Length; i++)
            {
                if (Global.StringTrim(newFields[i]).Length == 0)
                {
                    continue;
                }
                string[] newFields1 = newFields[i].Split('=');
                if (newFields1.Length != 2)
                {
                    //continue;
                    if (!string.IsNullOrEmpty(text))
                    {
                        text += " ";
                    }
                    text += newFields1[0];
                }
                String lowerField1 = newFields1[0].ToLower();
                if (lowerField1 == "color")
                {
                    String lowerField2 = newFields1[1].ToLower();
                    if (lowerField2.Length == 9 && lowerField2[0] == '#')
                    {
                        textBrush = ParseStringColor(lowerField2);
                    }
                }
                else if (lowerField1 == "uline")
                {
                    String lowerField2 = newFields1[1].ToLower();
                    if (lowerField2 == "true")
                    {
                        underLine = true;
                    }
                }
                else if (lowerField1 == "tag")
                {
                    String lowerField2 = newFields1[1];
                    if (!string.IsNullOrEmpty(lowerField2))
                    {
                        tag = lowerField2;
                    }
                }
                else if (lowerField1 == "text")
                {
                    String lowerField2 = newFields1[1];
                    if (!string.IsNullOrEmpty(lowerField2))
                    {
                        text = lowerField2;
                    }
                }
            }
        }
        public static void FormatTextBlockEx2(GTextBlockEx textBlockEx, String text)
        {
            StringBuilder sb = new StringBuilder();
            int startPos = 0;
            int find = text.IndexOf('｛', startPos);
            if (-1 == find)
            {
                sb.Append(text);
            }
            List<string> textItemList = new List<string>();
            List<SolidColorBrush> textColorList = new List<SolidColorBrush>();
            List<bool> textUnderLineList = new List<bool>();
            List<string> textTagList = new List<string>();
            while (-1 != find)
            {
                int end = text.IndexOf('｝', find);
                if (end == -1)
                {
                    sb.Append(text.Substring(startPos, text.Length - startPos));
                    break;
                }
                sb.Append(text.Substring(startPos, find - startPos));
                String textFiled = Global.StringTrim(text.Substring(find, end + 1 - find));
                String textItem = null;
                SolidColorBrush textBrush = null;
                bool underLine = false;
                String tag = null;

                ParseFormatTextItem(textFiled, out textItem, out textBrush, out underLine, out tag);

                if (!string.IsNullOrEmpty(textItem))
                {
                    sb.Append(textItem);
                    textItemList.Add(textItem);
                    textColorList.Add(textBrush);
                    textUnderLineList.Add(underLine);
                    textTagList.Add(tag);
                }
                startPos = end + 1;
                find = text.IndexOf('｛', startPos);
                if (-1 == find)
                {
                    sb.Append(text.Substring(startPos, text.Length - startPos));
                }
            }
            bool isNaN = Double.IsNaN(textBlockEx.TextWidth);
            textBlockEx.NoRenderText = sb.ToString();
            for (int i = 0; i < textItemList.Count; i++)
            {
                textBlockEx.SetSpecialText(textItemList[i], textColorList[i], textUnderLineList[i], textTagList[i], false);
            }
            if (isNaN)
            {
                textBlockEx.TextWidth = double.NaN;
            }
            try
            {
                textBlockEx.RenderText();
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //系统新手引导 

        private static Dictionary<int, int> SystemNaviDict = new Dictionary<int, int>();

        private static int FindSystemNaviTask(int taskID)
        {
            if (SystemNaviDict.Count > 0)
            {
                int xmlIndex = -1;
                if (!SystemNaviDict.ContainsKey(taskID))
                {
                    xmlIndex = -1;
                    return xmlIndex;
                }
                xmlIndex = SystemNaviDict[taskID];
                return xmlIndex;
            }
            XElement xml = Global.GetGameResXml(Global.GAME_CONFIG_SYSTEMNAVI_FILE);
            if (null == xml)
            {
                return -1;
            }
            List<XElement> xmlList = null;
            try
            {
                xmlList = (List<XElement>)Global.GetXElementList(xml, "Item");
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
            if (null == xmlList)
            {
                return -1;
            }
            int totalCnt = 0;
            foreach (var xmlItem in xmlList)
            {
                int findTaskID = Global.GetXElementAttributeInt(xmlItem, "TaskID");
                if (-1 != findTaskID && !SystemNaviDict.ContainsKey(findTaskID))
                {
                    SystemNaviDict[findTaskID] = totalCnt;
                }
                totalCnt++;
            }
            if (SystemNaviDict.Count > 0)
            {
                return FindSystemNaviTask(taskID);
            }
            return -1;
        }


        public static SystemNaviBox AddSystemNaviBox(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String partNaviName, String naviText, Point pos, object tag, int decoCode, int delaySecs = -1)
        {
            String name = StringUtil.substitute("SysNavi_{0}", partNaviName);
            SystemNaviBox systemNaviBox = U3DUtils.AS<SystemNaviBox>(parentRoot.FindName(name));
            if (null != systemNaviBox)
            {
                systemNaviBox.CenterX = 0;
                systemNaviBox.CenterY = 0;
                systemNaviBox.Text = naviText;
                systemNaviBox.Coordinate = pos;
                systemNaviBox.DecoCode = decoCode;
                systemNaviBox.Tag = tag;
                return systemNaviBox;
            }

            systemNaviBox.Name = name;
            systemNaviBox.Text = naviText;
            systemNaviBox.Coordinate = pos;
            systemNaviBox.DecoCode = decoCode;
            HSGameEngine.GameEngine.SilverLight.Canvas.SetZIndex(systemNaviBox, 9999);
            parentRoot.Children.Add(systemNaviBox);
            systemNaviBox.DelayTicks = (delaySecs * 1000);
            return systemNaviBox;
        }
        public static bool RemoveSystemNaviBoxByName(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String naviName, object tag)
        {
            SystemNaviBox systemNaviBox = U3DUtils.AS<SystemNaviBox>(parentRoot.FindName(naviName));
            if (null != systemNaviBox)
            {
                parentRoot.Children.Remove(systemNaviBox);
                systemNaviBox.DelayTicks = -1;
                systemNaviBox.Destroy();
                return true;
            }

            return false;
        }
        public static bool RemoveSystemNaviBox(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String partNaviName, object tag)
        {
            String name = StringUtil.substitute("SysNavi_{0}", partNaviName);
            return RemoveSystemNaviBoxByName(parentRoot, name, tag);
        }
        private static XElement QuickFindSystemNaviList(int uiType, String uiName, int taskID, int taskStep)
        {
            if (taskID < 0)
            {
                return null;
            }
            int startIndex = FindSystemNaviTask(taskID);
            if (startIndex < 0)
            {
                return null;
            }
            XElement xml = Global.GetGameResXml(Global.GAME_CONFIG_SYSTEMNAVI_FILE);
            if (null == xml)
            {
                return null;
            }
            List<XElement> xmlList = null;
            try
            {
                xmlList = (List<XElement>)Global.GetXElementList(xml, "Item");
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
            if (null == xmlList)
            {
                return null;
            }
            int totalCnt = 0;
            foreach (var xmlItem in xmlList)
            {
                if (totalCnt < startIndex)
                {
                    totalCnt++;
                    continue;
                }
                if (null != uiName)
                {
                    if (uiName != Global.GetXElementAttributeStr(xmlItem, "PopupUI"))
                    {
                        totalCnt++;
                        continue;
                    }
                }
                if (uiType == Global.GetXElementAttributeInt(xmlItem, "UIType") && taskID == Global.GetXElementAttributeInt(xmlItem, "TaskID") && taskStep == Global.GetXElementAttributeInt(xmlItem, "TaskStep"))
                {
                    return xmlItem;
                }
                totalCnt++;
            }
            return null;
        }

        public static int GetTaskStateByID(int taskID)
        {
            TaskData taskData = Global.GetTaskDataByID(taskID);
            if (null == taskData)
            {
                return -1;
            }

            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return -1;
            }

            if (Super.JugeTaskComplete(taskVO, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
            {
                return 1;
            }

            return 0;
        }
        /// <summary>
        /// 查找是否有指定类型的正在做的任务
        /// </summary>
        public static bool FindHavingMainTask(int taskClass, out TaskData taskData)
        {
            taskData = null;
            List<TaskData> taskDataData = Global.Data.roleData.TaskDataList;
            if (null == taskDataData)
            {
                return false;
            }
            for (int i = 0; i < taskDataData.Count; i++)
            {
                TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskDataData[i].DoingTaskID);
                if (null == taskVO)
                {
                    continue;
                }
                if (taskVO.TaskClass == taskClass)
                {
                    taskData = taskDataData[i];
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 增加主线任务
        /// </summary>
        public static TaskVO FindNextTask(TaskClasses taskClass)
        {
            int taskID = 0;
            TaskVO taskVO = null;

            if (taskClass == TaskClasses.Main)
            {
                taskID = Global.Data.roleData.CompletedMainTaskID;
                if (taskID <= 0)
                {
                    taskID = (int)(Global.GetSystemParamIntByName("FirstMainTaskID"));
                }
                else
                {
                    taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
                    if (null == taskVO)
                    {
                        return null;
                    }
                    taskID = taskVO.NextTask;
                    if (taskID <= 0)
                    {
                        return null;
                    }
                }

                taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
                if (null == taskVO)
                {
                    return null;
                }
            }
            else
            {
                taskVO = ConfigTasks.FindTaskXmlNodeByTaskClass((int)taskClass);
                if (null == taskVO || taskVO.ID <= 0)
                {
                    return null;
                }
                taskID = taskVO.ID;
            }

            return taskVO;
        }

        /// <summary>
        /// 取得任务类型名称
        /// </summary>
        public static String GetTaskClassName(int taskClass)
        {
            if (0 == taskClass)
            {
                return Global.GetLang("[主]");
            }
            else if (1 == taskClass)
            {
                return Global.GetLang("[支]");
            }
            else if (2 == taskClass)
            {
                return Global.GetLang("[循环]");
            }
            else if (3 == taskClass)
            {
                return Global.GetLang("[猎杀]");
            }
            else if (4 == taskClass)
            {
                return Global.GetLang("[悟性]");
            }
            else if (5 == taskClass)
            {
                return Global.GetLang("[军功]");
            }
            else if (6 == taskClass)
            {
                return Global.GetLang("[绑定钻石]");
            }
            else if (7 == taskClass)
            {
                return Global.GetLang("[帮会]");
            }
            else if (8 == taskClass)
            {
                return Global.GetLang("[日常]");
            }
            return Global.GetLang("未知");
        }

        public static SystemNaviBox AddSystemNaviBoxByPos(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, int taskID, int taskStep, int uiType = 1)
        {
            XElement xmlItem = QuickFindSystemNaviList(uiType, uiName, taskID, taskStep);
            if (null == xmlItem)
            {
                return null;
            }
            if (0 != Global.GetXElementAttributeInt(xmlItem, "HookType"))
            {
                return null;
            }
            Point pos = new Point(Global.GetXElementAttributeInt(xmlItem, "ToX"), Global.GetXElementAttributeInt(xmlItem, "ToY"));
            int delaySecs = Global.GetXElementAttributeInt(xmlItem, "DelaySecs");
            int decoCode = Global.GetXElementAttributeInt(xmlItem, "DecoCode");
            String uiText = Global.GetXElementAttributeStr(xmlItem, "UIText");
            if (taskID < 500000)
            {
                String taskName = Global.GetTaskTitleByID(taskID);
                uiText = Global.StringReplaceAll(uiText, "$TASKNAME$", taskName);
            }
            return AddSystemNaviBox(parentRoot, uiName, uiText, pos, null, decoCode, delaySecs);
        }
        private static int GetSystemNaviGoodsID(String goodsText, int occupation)
        {
            if (string.IsNullOrEmpty(goodsText))
            {
                return -1;
            }
            string[] fields = goodsText.Split('|');
            for (int i = 0; i < fields.Length; i++)
            {
                string[] fields2 = fields[i].Split(',');
                if (fields2.Length != 2)
                {
                    continue;
                }
                if (fields2[1] == "-1" || fields2[1] == occupation.ToString())
                {
                    try
                    {
                        return Convert.ToInt32(Global.StringTrim(fields2[0]));
                    }
                    catch (Exception e)
                    {
                        MUDebug.LogException(e);
                        break;
                    }
                }
            }
            return -1;
        }
        public static int AddSystemNaviBoxByGoods(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, int taskID, int taskStep)
        {
            XElement xmlItem = QuickFindSystemNaviList(1, uiName, taskID, taskStep);
            if (null == xmlItem)
            {
                return -1;
            }
            if (1 != Global.GetXElementAttributeInt(xmlItem, "HookType"))
            {
                return -1;
            }
            int goodsID = GetSystemNaviGoodsID(Global.GetXElementAttributeStr(xmlItem, "GoodsID"), Global.Data.roleData.Occupation);
            GoodsData goodsData = Global.GetGoodsDataByID(goodsID);
            if (null == goodsData)
            {
                return -1;
            }
            int naviUIType = Global.GetXElementAttributeInt(xmlItem, "NaviUIType");
            if (naviUIType <= 1)
            {
                int index = Global.GetGoodsDataIndexByDbID(goodsData.Id, true);
                if (-1 == index)
                {
                    return -1;
                }
                int width = 32 + 2 + 5;
                int height = 32 + 2 + 4;
                int toX = (index % 6) * width + 18 + 10;
                int toY = (index / 6) * height + 17 + 10;
                Point pos = new Point(toX, toY);
                int delaySecs = Global.GetXElementAttributeInt(xmlItem, "DelaySecs");
                int decoCode = Global.GetXElementAttributeInt(xmlItem, "DecoCode");
                AddSystemNaviBox(parentRoot, uiName, Global.GetXElementAttributeStr(xmlItem, "UIText"), pos, (0 == delaySecs) ? (object)(goodsData.Id) : null, decoCode, delaySecs);
                if (0 == naviUIType)
                {
                    return goodsData.Id;
                }
                return 0;
            }
            return goodsData.Id;
        }
        public static int AddSystemNaviBoxByGoods(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, GIcon goodsIcon, int indexIcon, String uiText, int decoCode)
        {
            int width = 32 + 2 + 5;
            int height = 32 + 2 + 4;
            int toX = (indexIcon % 6) * width + 18 + 10;
            int toY = (indexIcon / 6) * height + 17 + 10;
            Point pos = new Point(toX, toY);
            AddSystemNaviBox(parentRoot, uiName, uiText, pos, (goodsIcon.ItemObject as GoodsData).Id, decoCode, 0);
            return 0;
        }
        public static void RemoveSystemNaviBoxByGoods(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String partNaviName, int goodsDbID)
        {
            String name = StringUtil.substitute("SysNavi_{0}", partNaviName);
            SystemNaviBox systemNaviBox = U3DUtils.AS<SystemNaviBox>(parentRoot.FindName(name));
            if (null != systemNaviBox && null != systemNaviBox.Tag && (int)(systemNaviBox.Tag) == goodsDbID)
            {
                parentRoot.Children.Remove(systemNaviBox);
                systemNaviBox.DelayTicks = -1;
                systemNaviBox = null;
            }
        }
        public static void AddSystemNaviBoxByBtnName(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, int taskID, int taskStep, int uiType = 1)
        {
            XElement xmlItem = QuickFindSystemNaviList(uiType, uiName, taskID, taskStep);
            if (null == xmlItem)
            {
                return;
            }
            if (2 != Global.GetXElementAttributeInt(xmlItem, "HookType"))
            {
                return;
            }
            String splashBtnName = Global.GetXElementAttributeStr(xmlItem, "SplashBtn");
            if (string.IsNullOrEmpty(splashBtnName))
            {
                return;
            }
            GIcon icon = U3DUtils.AS<GIcon>(parentRoot.FindName(splashBtnName)) as GIcon;
            if (null == icon)
            {
                return;
            }
            int naviUIType = Global.GetXElementAttributeInt(xmlItem, "NaviUIType");
            if (naviUIType <= 1)
            {
                int toX = Math.Max(0, Global.GetXElementAttributeInt(xmlItem, "ToX"));
                int toY = Math.Max(0, Global.GetXElementAttributeInt(xmlItem, "ToY"));

                Point pos = new Point((int)(HSGameEngine.GameEngine.SilverLight.Canvas.GetLeft(icon) + toX), (int)(HSGameEngine.GameEngine.SilverLight.Canvas.GetTop(icon) + toY));
                int delaySecs = Global.GetXElementAttributeInt(xmlItem, "DelaySecs");
                int decoCode = Global.GetXElementAttributeInt(xmlItem, "DecoCode");
                AddSystemNaviBox(parentRoot, uiName, Global.GetXElementAttributeStr(xmlItem, "UIText"), pos, (0 == delaySecs) ? (object)(splashBtnName) : null, decoCode, delaySecs);
            }
            if (0 == naviUIType || 2 == naviUIType)
            {
                icon.EnableHint = true;
            }
        }
        public static void AddSystemNaviBoxByBtnName(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, String uiText, String splashBtnName, int decoCode, int delaySecs = 0)
        {
            if (string.IsNullOrEmpty(splashBtnName))
            {
                return;
            }
            GIcon icon = U3DUtils.AS<GIcon>(parentRoot.FindName(splashBtnName));
            if (null == icon)
            {
                return;
            }
            Point pos = new Point((int)(HSGameEngine.GameEngine.SilverLight.Canvas.GetLeft(icon) + 10), (int)(HSGameEngine.GameEngine.SilverLight.Canvas.GetTop(icon) + 10));
            AddSystemNaviBox(parentRoot, uiName, uiText, pos, (0 == delaySecs) ? (object)(splashBtnName) : null, decoCode, delaySecs);
            icon.EnableHint = true;
        }
        public static void RemoveSystemNaviBoxByBtnName(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String partNaviName, String btnName)
        {
            String name = StringUtil.substitute("SysNavi_{0}", partNaviName);
            SystemNaviBox systemNaviBox = U3DUtils.AS<SystemNaviBox>(parentRoot.FindName(name));
            if (null != systemNaviBox && null != systemNaviBox.Tag && (String)(systemNaviBox.Tag) == btnName)
            {
                parentRoot.Children.Remove(systemNaviBox);
                systemNaviBox.DelayTicks = -1;
                systemNaviBox = null;
            }
        }
        public static String GetTaskTriggerPopupUI(int taskID, int taskStep)
        {
            XElement xmlItem = QuickFindSystemNaviList(2, null, taskID, taskStep);
            if (null == xmlItem)
            {
                return "";
            }
            String popupUIName = Global.GetXElementAttributeStr(xmlItem, "PopupUI");
            if (string.IsNullOrEmpty(popupUIName))
            {
                return "";
            }
            return popupUIName;
        }
        public static void AddMainMenuUISystemNaviBox(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, int taskID, int taskStep)
        {
            if (null != AddSystemNaviBoxByPos(parentRoot, Global.GetLang("主界面菜单UI"), taskID, taskStep, 0))
            {
                return;
            }
            AddSystemNaviBoxByBtnName(parentRoot, Global.GetLang("主界面菜单UI"), taskID, taskStep, 0);
        }



        //智能新手引导

        ///比较新得到的装备是否比旧的装备高级
        public static bool CompareTwoEquip(GoodsData newEquip, GoodsData oldEquip)
        {
            if (null == oldEquip)
            {
                return true;
            }
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(newEquip.GoodsID);
            if (null == goodVO)
            {
                return false;
            }

            int toLevel = goodVO.ToLevel;
            int categoriy = goodVO.Categoriy;
            //if ((int)ItemCategories.ShenBing == categoriy)
            //{
            //    categoriy = (int)ItemCategories.Weapon;
            //}
            //else if ((int)ItemCategories.ShenJia == categoriy)
            //{
            //    categoriy = (int)ItemCategories.Clothes;
            //}

            GoodsData oldGoodsData = oldEquip;
            if (null == oldGoodsData)
            {
                return true;
            }
            GoodVO goodVOOld = ConfigGoods.GetGoodsXmlNodeByID(oldGoodsData.GoodsID);
            if (null == goodVOOld)
            {
                return false;
            }

            int oldToLevel = goodVOOld.ToLevel;
            return toLevel > oldToLevel;
        }

        ///是否能出售物品
        public static bool CanSaleOutGoods(GoodsData gd)
        {
//             int[] noSaleOutGoodsIDs = Global.GetSystemParamIntArrayByName("NoSaleOutGoodsIDs");
//             if (null != noSaleOutGoodsIDs && noSaleOutGoodsIDs.IndexOf(gd.GoodsID) >= 0)
//             {
//                 return false;
//             }

            //Categoriy = 50时不能出售
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(gd.GoodsID);
      /*      MUDebug.Log(goodVO.NoSaleOut);*/
            if (goodVO.NoSaleOut == 1)
                return false;
            if (goodVO.Categoriy == 50)
            {
                return false;
            }

            return true;
        }

        ///是否能直接卖出不提示
        public static bool CanDirectSaleOutGoods(GoodsData gd)
        {
            int goodsID = gd.GoodsID;
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (null == goodVO)
            {
                return false;
            }

            int categoriy = goodVO.Categoriy;
            if (categoriy < (int)ItemCategories.TouKui || categoriy >= (int)ItemCategories.EquipMax)
            {
                return false;
            }

            if (gd.Forge_level > 0)
            {
                return false; ///如果被强化过了
            }

            int toLevel = goodVO.ToLevel;
            if (toLevel > 40)
            {
                return false;
            }

            //特殊的额外限制，由ToType 决定 ToTypeProperty值的意义，不同项用逗号隔开
            String toType = goodVO.ToType.ToString();

            ///这样表示没限制
            if ("-1" != toType && toType.Length > 0)
            {
                return false;
            }

            return true;
        }

        public static bool CanHintEquipGoods(int dbID, int goodsID, ref int zhanLiUp)
        {
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (null == goodVO)
            {
                return false;
            }
            int toSex = goodVO.ToSex;
            if (-1 != toSex)
            {
                if (toSex != Global.Data.roleData.RoleSex)
                {
                    return false;
                }
            }
            int toOccup = goodVO.ToOccupation;
            if (!Global.ValidOccupation(toOccup))
            {
                return false;
            }
            int toLevel = goodVO.ToLevel;
            if (toLevel > Global.Data.roleData.Level)
            {
                return false;
            }
            // 			if (toLevel >= 45) //超过45级的装备不再提示
            // 			{
            // 				return false;
            // 			}
            int categoriy = goodVO.Categoriy;
            if (categoriy < (int)((int)ItemCategories.TouKui) || categoriy >= (int)((int)ItemCategories.EquipMax))
            {
                return false;
            }
            // GoodsData oldGoodsData = Super.GetGoodsOnBody(goodsID, -1, (int)GoodsOwnerTypes.SelfBag);
            // if (null == oldGoodsData)
            // {
            // 	return true;
            // }

            // XElement oldXmlGoods =  Global.GetGoodsXmlNodeByID(oldGoodsData.GoodsID);
            // if (null == oldXmlGoods)
            // {
            // 	return false;
            // }

            //特殊的额外限制，由ToType 决定 ToTypeProperty值的意义，不同项用逗号隔开
            //String toType =  Global.GetXElementAttributeStr(oldXmlGoods, "ToType");

            ///这样表示没限制
            // if ("-1" == toType || toType.Length <= 0)
            // {
            //     int oldToLevel = Global.GetXElementAttributeInt(oldXmlGoods, "ToLevel");
            //     if (toLevel > oldToLevel)
            //         return false;
            // }

            if (!Global.CanUseGoodsAttr(goodsID, false))//判断属性佩戴条件
            {
                return false;
            }

            //如果战力值比自己身上佩戴的装备低时不提示
            GoodsData goodsData = Global.GetGoodsDataByDbID(dbID);
            if (null != goodsData)
            {
                Dictionary<int, int> result = Global.GetCompareAttributeInfo(goodsData);
                if (result.ContainsKey(ExtPropIndexes.Strong))//如果ExtPropIndexes.Strong 键值不存在，说明当前角色身上没有佩戴与刚刚获得的装备类型相同的道具。
                {
                    zhanLiUp = result[ExtPropIndexes.Strong];
                }
                else
                {
                    zhanLiUp = (int)Global.GetGoodsDataZhanLi(goodsData);
                }
            }

            if (zhanLiUp > 0)
            {
                return true;
            }

            return false;
        }


        public static int HilightsGoodsPacelIcon(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, int dbID, int goodsID)
        {
            int categoriy = -1;
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (null == goodVO)
            {
                return -1;
            }
            categoriy = goodVO.Categoriy;
            int toOccup = goodVO.ToOccupation;
            int toLevel = goodVO.ToLevel;
            if (0 == (toOccup & (1 << Global.Data.roleData.Occupation)) || toLevel > Global.Data.roleData.Level)
            {
                return -1;
            }
            return categoriy;
        }
        public static void HilightsUserAttribIcon(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, int goodsID, int decoCode)
        {
            if (Global.Data.roleData.Level >= 10)
            {
                return;
            }
            String goodsName = Global.GetGoodsNameByID(goodsID);
            String uiText = StringUtil.substitute(Global.GetLang("您穿上了新装备:{0}, 点击[角色]按钮可以查看属性"), goodsName);
            Super.AddSystemNaviBoxByBtnName(parentRoot, Global.GetLang("主界面菜单UI"), uiText, "UserAttribBtn", decoCode, 0);
        }
        public static bool NeedHighlistsGoods(HSGameEngine.GameEngine.SilverLight.Canvas parentRoot, String uiName, GIcon goodsIcon, int indexIcon, int decoCode)
        {
            GoodsData gd = (goodsIcon.ItemObject as GoodsData);
            if (null == gd)
            {
                return false;
            }
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(gd.GoodsID);
            if (null == goodVO)
            {
                return false;
            }
            int categoriy = goodVO.Categoriy;
            if (categoriy < (int)((int)ItemCategories.TouKui) || categoriy >= (int)((int)ItemCategories.EquipMax))
            {
                return false;
            }
            int toOccup = goodVO.ToOccupation;
            int toLevel = goodVO.ToLevel;
            if (0 == (toOccup & (1 << Global.Data.roleData.Occupation)) || toLevel > Global.Data.roleData.Level)
            {
                return false;
            }
            GoodsData findGoodsData = Global.GetGoodsDataByType(gd.Id, gd.GoodsID, 1);
            if (null != findGoodsData)
            {
                return false;
            }
            String goodsName = Global.GetGoodsNameByID(gd.GoodsID);
            String uiText = StringUtil.substitute(Global.GetLang("鼠标左键双击[{0}]图标装备到身上"), goodsName);
            AddSystemNaviBoxByGoods(parentRoot, uiName, goodsIcon, indexIcon, uiText, decoCode);
            return true;
        }

        /// <summary>
        /// 贵重物品列表 - 判断是否是贵重的物品
        /// </summary>
   //     public static Dictionary<int, int> ImportantGoodsDict = null;
        public static bool IsImportantGoods(int goodsID)
        {
            GoodVO goodvo = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (1 == goodvo.Valuables)
                return true;
            return false;
//             if (null == ImportantGoodsDict)
//             {
//                 string str = Global.GetSystemParamByName("valuables");
//                 if (string.IsNullOrEmpty(str))
//                 {
//                     return false;
//                 }
//                 string[] strArr = str.Split(',');
//                 if (null == strArr)
//                 {
//                     return false;
//                 }
// 
//                 ImportantGoodsDict = new Dictionary<int, int>();
//                 for (int i = 0; i < strArr.Length; i++)
//                 {
//                     int key = strArr[i].SafeToInt32();
//                     int value = 0;
//                     if (!ImportantGoodsDict.ContainsKey(key))
//                     {
//                         ImportantGoodsDict.Add(key, value);
//                     }
//                 }
//             }
// 
//             if (ImportantGoodsDict.ContainsKey(goodsID))
//             {
//                 return true;
//             }
//             else
//             {
//                 return false;
//             }
        }

        //#########################################################################################################

        //#########################################################################################################
        //游戏信息提示

        public static uint GetGameInfoTextItemColor(GameInfoTextItem gameInfoTextItem)
        {
            uint color = Colors.White;
            if (GameInfoTypeIndexes.Normal == gameInfoTextItem.GameInfoTypeIndex)
            {
            }
            else if (GameInfoTypeIndexes.Error == gameInfoTextItem.GameInfoTypeIndex)
            {
                color = ColorSL.FromArgb(255, 255, 0, 0);
            }
            else if (GameInfoTypeIndexes.Hot == gameInfoTextItem.GameInfoTypeIndex)
            {
                color = Colors.Yellow;
            }
            return color;
        }

        //#########################################################################################################

        //#########################################################################################################
        //物品或者装备图标特效

     //   public static Dictionary<int, int> GoodsQualityDict = null;
        public static int GetGoodsQuality(int goodsID)
        {
//             if (null == GoodsQualityDict)
//             {
//                 GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
//                // string str = Global.GetSystemParamByName("ItemQuality");
//                 string str = goodVO.ItemQuality;
//                 if (string.IsNullOrEmpty(str))
//                 {
//                     return 0;
//                 }
//                 string[] strArr = str.Split('|');
//                 if (null == strArr)
//                 {
//                     return 0;
//                 }
// 
//                 GoodsQualityDict = new Dictionary<int, int>();
//                 for (int i = 0; i < strArr.Length; i++)
//                 {
//                     string[] fields = strArr[i].Split(',');
//                     int key = fields[0].SafeToInt32();
//                     int value = fields[1].SafeToInt32();
//                     if (!GoodsQualityDict.ContainsKey(key))
//                     {
//                         GoodsQualityDict.Add(key, value);
//                     }
//                 }
//             }

//             int goodsQuality = 0;
//             if (GoodsQualityDict.TryGetValue(goodsID, out goodsQuality))
//             {
//                 return goodsQuality;
//             }
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsID);
            if (null != goodVO)
                return goodVO.ItemQuality;
            return 0;
        }

        public static void InitEquipGIcon(GGoodIcon icon, GoodsData goodsData, bool liuguang = true, IconTextTypes iconTextTypes = IconTextTypes.Qianghua)
        {
            int categoriy = (int)(icon.ItemCategory);
            if (categoriy >= (int)((int)ItemCategories.TouKui) && categoriy < (int)((int)ItemCategories.EquipMax))
            {
                if (IconTextTypes.Qianghua == iconTextTypes)
                {
                    int goodsType = Global.GetCategoriyByGoodsID(goodsData.GoodsID);

                    if ((((int)ItemCategories.ShouHuChong == goodsType) || ((int)ItemCategories.ChongWu == goodsType)) && (null != icon.petLevel))
                    {
                        if ((goodsData.Forge_level >= 0))
                        {
                            icon.petLevel.text = "Lv" + (goodsData.Forge_level + 1).ToString();
                        }
                        else
                        {
                            icon.petLevel.text = "";
                        }

                        icon.Text = "";
                    }
                    else
                    {

                        icon.petLevel.text = "";
                        icon.Text = goodsData.Forge_level > 0 ? StringUtil.substitute("+{0}", goodsData.Forge_level.ToString()) : "";
                    }
                }
                else if (IconTextTypes.Zhuijia == iconTextTypes)
                {
                    icon.Text = goodsData.AppendPropLev > 0 ? StringUtil.substitute(Global.GetLang("追{0}"), goodsData.AppendPropLev.ToString()) : "";
                }
                else if (IconTextTypes.Zhuansheng == iconTextTypes)
                {
                    icon.Text = goodsData.ChangeLifeLevForEquip > 0 ? StringUtil.substitute(Global.GetLang("{0}转"), goodsData.ChangeLifeLevForEquip.ToString()) : "";
                }
                icon.TextColor = Colors.Yellow;
#region 时装特殊处理
                if ((int)ItemCategories.Fashion == categoriy)
                {
                    icon.SText = goodsData.GCount > 1 ? goodsData.GCount.ToString() : "";
                    icon.Text = goodsData.Forge_level > 0 ? StringUtil.substitute("+{0}", goodsData.Forge_level.ToString()) : "";
                }
#endregion 时装特殊处理
                
                //icon.TextHorizontalAlignment = Layout.Right;
                //icon.TextVerticalAlignment = Layout.Top;           
            }
            else
            {
                if ((int)((int)ItemCategories.ItemTask) == categoriy)
                {
                    //
                }
                if ((int)((int)ItemCategories.ItemJewel) == categoriy)
                {
                    //icon.SText = StringUtil.substitute("LV{0}", Global.GetJewelLevel(goodsData.GoodsID));
                    //icon.STextColor = 0xffffff;
                    //icon.STextShadowColor = 0x00eaff;
                    //icon.STextHorizontalAlignment = Layout.Left;
                    //icon.STextVerticalAlignment = Layout.Top;
                }
                if ((int)((int)ItemCategories.ItemMaterial) == categoriy)
                {
                    //				
                }
                icon.SText = goodsData.GCount > 1 ? goodsData.GCount.ToString() : "";
                //icon.TextColor = 0xffffff;
                //icon.TextShadowColor = 0x000000;
                //icon.TextHorizontalAlignment = Layout.Right;
                //icon.TextVerticalAlignment = Layout.Bottom;
            }
            if (!icon.isAutoSize)
            {
                icon.GoodImg.transform.localScale = new UnityEngine.Vector3(64, 64, 1);
                icon.BackgroundSprite1.transform.localScale = new UnityEngine.Vector3(62, 62, 1);
                icon.BackgroundSprite2.transform.localScale = new UnityEngine.Vector3(64, 64, 1);
            }
        }

        private static UIAtlas ZhuoYueFlowLightAtlasInstance = null;
        public static UIAtlas GetZhuoYueFlowLightAtlas()
        {
            if (ZhuoYueFlowLightAtlasInstance == null)
            {
                ZhuoYueFlowLightAtlasInstance = U3DUtils.LoadAtlas(Global.GetPrefabString("zhuoyueFlowLight_bag"));
            }
            return ZhuoYueFlowLightAtlasInstance;
        }

        /// <summary>
        /// 设置GOODSICON的状态
        /// </summary>
        /// <param name="icon"></param>
        /// <param name="goodsData"></param>
        /// <param name="canUse"></param>
        /// <param name="isForge"></param>
        public static void InitGoodsGIcon(GGoodIcon icon, GoodsData goodsData, bool canUse, IconTextTypes iconTextTypes = IconTextTypes.Qianghua)
        {
            if (icon == null || goodsData == null)
            {
                return;
            }


            //int categoriy =  (int)(icon.ItemCategory);

            //if (categoriy >= (int)((int)ItemCategories.GangtieHeart) && categoriy <= (int)((int)ItemCategories.YanwuHeart))

            //    return;

            Super.InitEquipGIcon(icon, goodsData, true, iconTextTypes);
            if (Global.IsTimeLimitGoods(goodsData))
            {
                icon.EndTimeSprite.gameObject.SetActive(true);
            }
            if (goodsData.Binding > 0)
            {
                icon.BindingSprite.gameObject.SetActive(true);
            }
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(goodsData.GoodsID);
            if (goodVO == null)
            {
                return;
            }

            if (((int)ItemCategories.ShouHuChong == goodVO.Categoriy) || ((int)ItemCategories.ChongWu == goodVO.Categoriy))
            {

                if (0 != goodsData.ExcellenceInfo)
                {

                    icon.TeXiao._Sprite.atlas = U3DUtils.LoadAtlas(Global.GetPrefabString("zhuoyueFlowLight_bag"));

                    icon.TeXiao.gameObject.SetActive(true);

                }

                else if (1 == goodVO.SuitID)
                {

                    icon.BackSpriteName1 = "iconState_zuoyue1";

                }

                else
                {

                    icon.BackSpriteName1 = "iconState_zuoyue2";

                }
            }
            else if (goodsData.ExcellenceInfo > 0)
            {
                if (Global.GetZhuoyueAttributeCount(goodsData.ExcellenceInfo) >= 6)//拥有6条卓越属性即为全属装备
                {
                    if (icon.TeXiao._Sprite != null)
                    {
                        //icon.TeXiao._Sprite.atlas = U3DUtils.LoadAtlas(Global.GetPrefabString("zhuoyueFlowLight_bag"));
                        icon.TeXiao._Sprite.atlas = GetZhuoYueFlowLightAtlas();
                        icon.TeXiao.gameObject.SetActive(true);
                    }
                }
                else
                {
                    if (Global.GetZhuoyueAttributeCount(goodsData.ExcellenceInfo) < 3)
                    {
                        icon.BackSpriteName1 = "iconState_zuoyue";
                    }
                    else if (Global.GetZhuoyueAttributeCount(goodsData.ExcellenceInfo) >= 3 && (Global.GetZhuoyueAttributeCount(goodsData.ExcellenceInfo) < 5))
                    {
                        icon.BackSpriteName1 = "iconState_zuoyue1";
                    }
                    else if (Global.GetZhuoyueAttributeCount(goodsData.ExcellenceInfo) == 5)
                    {
                        icon.BackSpriteName1 = "iconState_zuoyue2";
                    }
                    icon.BackgroundSprite1.gameObject.SetActive(true);
                }
            }
            else
            {
                //根据表中的特殊配置，某些物品也要显示类似卓越的效果
                int quality = Super.GetGoodsQuality(goodsData.GoodsID);
                if (quality == (int)GoodsQuality.Green)
                {
                    icon.BackSpriteName1 = "iconState_zuoyue";
                }
                else if (quality == (int)GoodsQuality.Blue)
                {
                    icon.BackSpriteName1 = "iconState_zuoyue1";
                }
                else if (quality == (int)GoodsQuality.Purple)
                {
                    icon.BackSpriteName1 = "iconState_zuoyue2";
                }
                else if (quality == (int)GoodsQuality.FlashPurple)
                {
                    if (icon.TeXiao._Sprite != null)
                    {
                        // icon.TeXiao._Sprite.atlas = U3DUtils.LoadAtlas(Global.GetPrefabString("zhuoyueFlowLight_bag"));
                        icon.TeXiao._Sprite.atlas = GetZhuoYueFlowLightAtlas(); ;
                        icon.TeXiao._Sprite.transform.localScale = new UnityEngine.Vector3((float)icon.Width, (float)icon.Height);
                        icon.TeXiao.gameObject.SetActive(true);
                    }
                }
            }



            //11阶神装

            if (Global.IsShengqi(goodsData))
            {

                icon.BackSpriteName15 = "iconStateGold";
                icon.BackgroundSprite15.transform.localScale = new Vector3(78,78,1);
            }


            if (!canUse)
            {
                //职业不可用时显示
                icon.RefreshIconPos(0);
                icon.NoUseSprite.gameObject.SetActive(true);
            }
            else
            {
                //icon.NoUseBodySource = null;
                if (!Global.CanUseGoodsAttr(goodsData.GoodsID, false))
                {
                    //根据道具属性条件不可用时显示
                    icon.RefreshIconPos(1);
                    icon.NoUseSprite.gameObject.SetActive(true);
                }
            }

            //背包为交易所模式时，绑定物品背景变黑
            if (null != Super._ParcelPart)
            {
                if (Super._ParcelPart.iBaoGuoMode == (int)BaoGuoMode.StallNewState)
                {
                    if (goodsData.Binding > 0)
                    {
                        icon.NoUseSprite.spriteName = "iconState_nouse3";
                        icon.NoUseSprite.gameObject.SetActive(true);
                    }
                }
            }

            //把icon中的禁用状态小图标改成大的。暂时注掉
            //icon.RefreshIconPos();
            //控制大小
            if (!icon.isAutoSize)
            {
                icon.GoodImg.transform.localScale = new UnityEngine.Vector3(64, 64, 1);
                icon.BackgroundSprite1.transform.localScale = new UnityEngine.Vector3(62, 62, 1);
                icon.BackgroundSprite2.transform.localScale = new UnityEngine.Vector3(64, 64, 1);
            }
        }

        public static void InitYuansuGoodsGIcon(GGoodIcon icon, GoodsData goodsData)
        {

            if (icon == null || goodsData == null)
            {

                return;

            }



            if (Global.GetCategoriyByGoodsID(goodsData.GoodsID) != (int)((int)ItemCategories.YanwuHeart))
            {

                icon.TextColor = 0xf3ff00;

                icon.Text = string.Format("Lv{0}", Global.GetYuansuGoodsDataLevel(goodsData));

                icon.PaddingX = 10;

                icon.PaddingY = 12;

                icon.TextHorizontalAlignment = Layout.Right;

                icon.TextVerticalAlignment = Layout.Top;

            }

            else
            {

                icon.Text = "";

            }



            GoodsQuality color = Super.GetColorByYuansuSuitID(goodsData);

            if (color == GoodsQuality.White)
            {

                //

            }

            if (color == GoodsQuality.Green)
            {

                icon.BackSpriteName1 = "iconState_zuoyue";

            }

            else if (color == GoodsQuality.Blue)
            {

                icon.BackSpriteName1 = "iconState_zuoyue1";

            }

            else if (color == GoodsQuality.Purple)
            {

                icon.BackSpriteName1 = "iconState_zuoyue2";

            }

            else if (color == GoodsQuality.FlashPurple)
            {

                if (icon.TeXiao._Sprite != null)
                {

                    // icon.TeXiao._Sprite.atlas = U3DUtils.LoadAtlas(Global.GetPrefabString("zhuoyueFlowLight_bag"));

                    icon.TeXiao._Sprite.atlas = GetZhuoYueFlowLightAtlas(); ;

                    icon.TeXiao._Sprite.transform.localScale = new UnityEngine.Vector3((float)icon.Width, (float)icon.Height);

                    icon.TeXiao.gameObject.SetActive(true);

                }

            }



            if (!icon.isAutoSize)
            {

                icon.GoodImg.transform.localScale = new UnityEngine.Vector3(64, 64, 1);

                icon.BackgroundSprite1.transform.localScale = new UnityEngine.Vector3(62, 62, 1);

                icon.BackgroundSprite2.transform.localScale = new UnityEngine.Vector3(64, 64, 1);

            }

        }





        public static GoodsQuality GetColorByYuansuSuitID(GoodsData gd)
        {

            if (null == gd)

                return GoodsQuality.White;

            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(gd.GoodsID);

            if (goodVO.SuitID >= 3 && goodVO.SuitID <= 4)
            {

                return GoodsQuality.Green;

            }

            else if (goodVO.SuitID >= 5 && goodVO.SuitID <= 6)
            {

                return GoodsQuality.Blue;

            }

            else if (goodVO.SuitID >= 7 && goodVO.SuitID <= 8)
            {

                return GoodsQuality.Purple;

            }

            else if (goodVO.SuitID >= 9)
            {

                return GoodsQuality.FlashPurple;

            }



            return GoodsQuality.White;

        }

        /// <summary>
        /// 设置包裹中的道具出售状态
        /// </summary>
        /// <param name="gicon"></param>
        /// <param name="stat"></param>
        public static void SetBgGIconShouStat(GGoodIcon gicon, Boolean stat)
        {
            if (gicon != null)
            {
                if (stat)
                {
                    gicon.BackSpriteName2 = "iconState_sell";
                }
                else
                {
                    gicon.BackSpriteName2 = "";
                    gicon.BackgroundSprite2.gameObject.SetActive(false);
                }
            }
        }


        public static void SetSkillIconLiuGuang(GIcon icon, bool liuguang)
        {
            if (liuguang)
            {
                icon.Composite2BodyPath = "Images/Liuguang/0/";
                icon.MaxComposite2BodyCount = 8;
                icon.TimerTicks = 100;
                icon.EnableHint = true;
            }
            else
            {
                icon.Composite2BodyPath = null;
                icon.MaxComposite2BodyCount = 0;
                icon.TimerTicks = 80;
                icon.EnableHint = false;
            }
        }


        //#########################################################################################################

        //#########################################################################################################
        //角色属性变化通知

        public static void CalcRolePropsText(double[] newPropFiles)
        {
            if (null == Global.Data.CurrentRolePropFields)
            {
                return;
            }
            if (Global.Data.CurrentRolePropFields.Length != newPropFiles.Length)
            {
                return;
            }
            for (int i = 0; i < Global.Data.CurrentRolePropFields.Length; i++)
            {
                if (newPropFiles[i] != Global.Data.CurrentRolePropFields[i])
                {
                    int index = i - 1;
                    if (0 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (1 == index)
                    {
                        double val1 = Math.Max(0, newPropFiles[i - 1] - Global.Data.CurrentRolePropFields[i - 1]);
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0 || val1 > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Yellow,
                                Text = Global.GetLang("物攻"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = val,
                                NumVal2 = (int)(Math.Abs(val1)),
                                NumFormat = 1,
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (2 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (3 == index)
                    {
                        double val1 = Math.Max(0, newPropFiles[i - 1] - Global.Data.CurrentRolePropFields[i - 1]);
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0 || val1 > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Red,
                                Text = Global.GetLang("魔攻"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = val,
                                NumVal2 = (int)(Math.Abs(val1)),
                                NumFormat = 1,
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (4 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (5 == index)
                    {
                        double val1 = Math.Max(0, newPropFiles[i - 1] - Global.Data.CurrentRolePropFields[i - 1]);
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0 || val1 > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Blue,
                                Text = Global.GetLang("物防"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = val,
                                NumVal2 = (int)(Math.Abs(val1)),
                                NumFormat = 1,
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (6 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (7 == index)
                    {
                        double val1 = Math.Max(0, newPropFiles[i - 1] - Global.Data.CurrentRolePropFields[i - 1]);
                        double val = ((newPropFiles[i + 1] + newPropFiles[i]) / 2) - ((Global.Data.CurrentRolePropFields[i + 1] + Global.Data.CurrentRolePropFields[i]) / 2);
                        if (val > 0 || val1 > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Blue,
                                Text = Global.GetLang("魔防"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = val,
                                NumVal2 = (int)(Math.Abs(val1)),
                                NumFormat = 1,
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (8 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (9 == index)
                    {
                        double val1 = Math.Max(0, newPropFiles[i - 1] - Global.Data.CurrentRolePropFields[i - 1]);
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0 || val1 > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Yellow,
                                Text = Global.GetLang("道攻"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = val,
                                NumVal2 = (int)(Math.Abs(val1)),
                                NumFormat = 1,
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (10 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (11 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (12 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (14 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (16 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                    else if (17 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {
                            ShowTextItem showTextItem = new ShowTextItem()
                            {
                                PicTextColor = (int)PicTextColors.Yellow,
                                Text = Global.GetLang("最大生命值"),
                                NumType = val >= 0 ? 0 : 1,
                                NumVal = (int)(Math.Abs(val)),
                            };

                            Super.GData.RoleTextQueue.Add(showTextItem);
                        }
                    }
                    else if (19 == index)
                    {
                        double val = newPropFiles[i] - Global.Data.CurrentRolePropFields[i];
                        if (val > 0)
                        {

                        }
                    }
                }
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //汉字判断

        //#########################################################################################################

        //#########################################################################################################
        //网络图片下载缓存

        private static Dictionary<string, BitmapData> _NetImagesDict = new Dictionary<string, BitmapData>();
        public static void AddNetImageStream(String key, BitmapData bitmapData)
        {
            _NetImagesDict[key] = bitmapData;
        }
        public static BitmapData GetNetImageStream(String key)
        {
            BitmapData bitmapData = null;
            if (!_NetImagesDict.ContainsKey(key))
            {
                return null;
            }
            bitmapData = _NetImagesDict[key];
            return bitmapData;
        }

        //#########################################################################################################

        //#########################################################################################################
        //商城网络图片


        private static Dictionary<string, List<GIcon>> mallWaitingDownloaderDict = new Dictionary<string, List<GIcon>>();


        public static void GetGoods64x64ImageFromFile(String iconCode, GIcon icon)
        {
            try
            {
                Super.DownloadMallNetImage(StringUtil.substitute("NetImages/Sales/{0}.png", iconCode), icon);
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
        }
        public static void MallDownLoaderComplete1(object sender, Event e)
        {
            Downloader downloader = (sender as Downloader);
            /*if (e.type != Event.COMPLETE)
            {
                GError.AddErrMsg(new Exception(StringUtil.substitute(Global.GetLang("从网络下载商城图片失败:{0}"), Global.GetErrorMsg(e))));
                List<ImageBrush> iconList =  null;
                if (mallWaitingDownloaderDict.ContainsKey(downloader.Args))
                {
                    iconList = mallWaitingDownloaderDict[downloader.Args];
                    for (int i =  0; i < iconList.Count; i++)
                    {
                        iconList[i].BodySource = new ImageBrush(Global.GetGameResImage(StringUtil.substitute("Images/Plate/default.png")));
                    }
                }
            }
            else
            {
                //Super.AddNetImageStream(downloader.Args, e.target.content.bitmapData);
                GetMallImageFromCaching(downloader.Args, null);
            }*/
            mallWaitingDownloaderDict.Remove(downloader.Args);
            downloader.Completed = null;
            downloader = null;
        }
        public static bool GetMallImageFromCaching(String key, GIcon icon)
        {
            BitmapData bitmapData = Super.GetNetImageStream(key);
            if (null == bitmapData)
            {
                return false;
            }

            if (null != icon)
            {
                icon.BodySource = new ImageBrush(bitmapData);
            }
            else
            {
                List<GIcon> iconList = null;
                if (mallWaitingDownloaderDict.ContainsKey(key))
                {
                    iconList = mallWaitingDownloaderDict[key];
                    for (int i = 0; i < iconList.Count; i++)
                    {
                        iconList[i].BodySource = new ImageBrush(bitmapData);
                    }
                }
            }
            return true;
        }
        public static void DownloadMallNetImage(String value, GIcon icon)
        {
            if (GetMallImageFromCaching(value, icon))
            {
                return;
            }
            icon.BodySource = null;
            List<GIcon> iconList = null;
            if (mallWaitingDownloaderDict.ContainsKey(value))
            {
                iconList = mallWaitingDownloaderDict[value];
                iconList.Add(icon);
                return;
            }

            iconList = new List<GIcon>();
            iconList.Add(icon);
            mallWaitingDownloaderDict[value] = iconList;
            Downloader downloader = new Downloader()
            {
                Args = value,
            };

            //downloader.Completed = MallDownLoaderComplete1;
            downloader.GetResourceByVer(Global.WebPath(value), Global.ResSwfVer, false);
        }

        //#########################################################################################################

        //#########################################################################################################
        //记录本次登录期间新手帮助的显示状态

        private static Dictionary<int, bool> _SystemWizardDict = new Dictionary<int, bool>();


        public static bool CanShowSystemWizard(int wizardType)
        {
            if (null == Global.Data.roleData)
            {
                return false;
            }

            if (!Global.CanMapHelpHint(Global.Data.roleData.MapCode, wizardType))
            {
                return false;
            }
            bool canShow = false;
            if (!_SystemWizardDict.ContainsKey(wizardType))
            {
                return true;
            }
            canShow = _SystemWizardDict[wizardType];
            return canShow;
        }
        public static void SetShowSystemWizard(int wizardType, bool state)
        {
            _SystemWizardDict[wizardType] = state;
        }

        //#########################################################################################################

        //#########################################################################################################
        //文字控件到图像


        public static BitmapData GetTextBlockImage(GTextBlockOutLine textBlockOutLine)
        {
            return null;
        }
        public static BitmapData GetCanvasImage(HSGameEngine.GameEngine.SilverLight.Canvas canvas, double width, double height)
        {
            return null;
        }
        public static BitmapData GetSpriteImage(Sprite sprite, double width, double height)
        {
            return null;
        }

        #endregion 图片相关

        #region 自动寻路

        //自动寻路

        public static void AutoFindRoad(int mapCode, int npcType, int npcID, int buttonID = 1)
        {
            if (Global.Data.WaitingForSystemHelp)
            {
                return;
            }

            if (-1 != npcType && -1 != mapCode)
            {
                Global.Data.TargetNpcID = npcID;
                Point pt;
                if (npcType == (int)(GSpriteTypes.Monster))
                {
                    pt = Global.GetMonsterPointByID(mapCode, Global.Data.TargetNpcID);
                }
                else
                {
                    pt = Global.GetNPCPointByID(mapCode, Global.Data.TargetNpcID);
                }
                if (pt.X == -1 || pt.Y == -1)
                {
                    GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("路径信息格式错误 ,无法自动寻路")));
                }
                else
                {
                    if (npcType == (int)(GSpriteTypes.Monster))
                    {
                        Global.Data.GameScene.AutoFindRoad(mapCode, pt, 0, ExtActionTypes.EXTACTION_KILLMONSTER);
                        if (0 == buttonID)
                        {
                            if (Super.CanTransport(mapCode, true))
                            {
                                GameInstance.Game.SpriteTaskTransport(mapCode, (int)(pt.X), (int)(pt.Y), 1);
                            }
                        }
                    }
                    else
                    {
                        Global.Data.GameScene.AutoFindRoad(mapCode, pt, Global.AutoFindRoadOffset60, ExtActionTypes.EXTACTION_NPCDLG);
                        if (0 == buttonID)
                        {
                            if (Super.CanTransport(mapCode, true))
                            {
                                GameInstance.Game.SpriteTaskTransport(mapCode, (int)(pt.X), (int)(pt.Y), 1);
                            }
                        }
                    }
                }
            }
        }

        public static void PrccessAutoTaskFindRoad(int taskID, bool dontEnterFuBen = false, bool autoTransport = true)
        {
            if (!SystemHelpMgr.CanAutoRoad())
            {
                return;
            }
            if (Global.Data.roleData.MapCode == 6090)
            {
                return; //如果是新人 引导中，则不自动寻路
            }

            if (null == Global.CurrentMapData)
            {
                return;
            }

            TaskVO taskVO = ConfigTasks.GetTaskXmlNodeByID(taskID);
            if (null == taskVO)
            {
                return;
            }

            TaskData taskData = Global.GetTaskDataByID(taskID);
            if (null == taskData)
            {
                return;
            }

            int targetType = 0;
            int isFuBen = 0;
            int mapCode = -1;
            int npcType = -1;
            int npcID = -1;
            int posX = -1;
            int posY = -1;

            int buttonID = Global.GetTaskTeleportsByID(taskID);
            Point toMapPos = new Point(0, 0);

            bool complete = false;
            if (!Super.JugeTaskComplete(taskVO, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
            {
                ///这样处理是为了照顾接受任务时，从接受任务的npc处得到了物品，同时有第二个目标，不自动寻路的问题，
                ///但是导致了，正常的也出错了
                //int sourceNPC =  Global.GetXElementAttributeInt(taskXmlNode, "SourceNPC");

                if (!Super.JugeTaskTargetComplete(taskVO, 1, taskData.DoingTaskVal1))
                {
                    Super.GetTaskTargetID(taskVO, 1, out isFuBen, out mapCode, out npcType, out npcID, out targetType, true, out posX, out posY);

                    if (50 == mapCode && Global.GetMapSceneUIClass() != SceneUIClasses.KuaFuMap)
                    {
                        PlayZone.GlobalPlayZone.OpenKuafuMapView(targetType, -1, npcID, mapCode, posX, posY);
                        return;
                    }
                    if (60 == mapCode && Global.GetMapSceneUIClass() != SceneUIClasses.HuanShuYuan)
                    {
                        PlayZone.GlobalPlayZone.OpenKuafuMapView(targetType, -1, npcID, mapCode, posX, posY);
                        return;
                    }

                    if (!dontEnterFuBen && 1 == isFuBen)
                    {
                        //进入指定的任务副本
                        GameInstance.Game.SpriteEnterTaskFuBen(taskID);
                        return;
                    }

                    if (-1 == mapCode)
                    {
                        if (taskVO.TargetMapCode1 >= 0)
                        {
                            targetType = taskVO.TargetType1;
                            int targetMapCode1 = taskVO.TargetMapCode1;
                            String targetPos1 = taskVO.TargetPos1.ToString();
                            if ("" != targetPos1)
                            {
                                int[] pts = Global.String2IntArray(targetPos1, ',');
                                if (null != pts && pts.Length == 2)
                                {
                                    toMapPos = new Point((int)(pts[0] / Global.CurrentMapData.GridSizeX) * Global.CurrentMapData.GridSizeX + Global.CurrentMapData.GridSizeX / 2, (int)(pts[1] / Global.CurrentMapData.GridSizeY) * Global.CurrentMapData.GridSizeY + Global.CurrentMapData.GridSizeY / 2);
                                    mapCode = targetMapCode1;
                                    npcType = -1;
                                }
                            }
                        }
                    }
                }
                else
                {
                    Super.GetTaskTargetID(taskVO, 2, out isFuBen, out mapCode, out npcType, out npcID, out targetType, true, out posX, out posY);

                    if (!dontEnterFuBen && 1 == isFuBen)
                    {
                        //进入指定的任务副本
                        GameInstance.Game.SpriteEnterTaskFuBen(taskID);
                        return;
                    }

                    if (-1 == mapCode)
                    {
                        if (taskVO.TargetMapCode2 >= 0)
                        {
                            targetType = taskVO.TargetType2;
                            int targetMapCode2 = taskVO.TargetMapCode2;
                            String targetPos2 = taskVO.TargetPos2;
                            if ("" != targetPos2)
                            {
                                int[] pts = Global.String2IntArray(targetPos2, ',');
                                if (null != pts && pts.Length == 2)
                                {
                                    toMapPos = new Point((int)(Convert.ToInt32(pts[0]) / Global.CurrentMapData.GridSizeX) * Global.CurrentMapData.GridSizeX + Global.CurrentMapData.GridSizeX / 2, (int)(Convert.ToInt32(pts[1]) / Global.CurrentMapData.GridSizeY) * Global.CurrentMapData.GridSizeY + Global.CurrentMapData.GridSizeY / 2);
                                    mapCode = targetMapCode2;
                                    npcType = -1;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                complete = true;
                GetTaskDestNPCID(taskVO, ref mapCode, ref npcType, ref npcID);
            }

            if (-1 != mapCode)
            {
                Point pt;
                if (npcType == (int)(GSpriteTypes.Monster))
                {
                    pt = Global.GetMonsterPointByID(mapCode, npcID);
                }
                else if (npcType == (int)(GSpriteTypes.NPC))
                {
                    pt = Global.GetNPCPointByID(mapCode, npcID);
                }
                else
                {
                    pt = toMapPos;
                }
                if (pt.X == -1 || pt.Y == -1)
                {
                    GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("路径信息格式错误 ,无法自动寻路")));
                }
                else
                {
                    Global.Data.TargetNpcID = npcID;
                    if (npcType == (int)(GSpriteTypes.Monster))
                    {
                        Global.Data.GameScene.AutoFindRoad(mapCode, pt, 0, ExtActionTypes.EXTACTION_KILLMONSTER);
                        if (0 < buttonID && !complete && autoTransport)
                        {
                            if (Super.CanTransport(mapCode, true, false))
                            {
                                GameInstance.Game.SpriteTaskTransport2(taskID);
                            }
                        }
                    }
                    else if (npcType == (int)(GSpriteTypes.NPC))
                    {
                        Global.Data.GameScene.AutoFindRoad(mapCode, pt, Global.AutoFindRoadOffset100, ExtActionTypes.EXTACTION_NPCDLG);
                        if (0 < buttonID && !complete && autoTransport)
                        {
                            if (Super.CanTransport(mapCode, true, false))
                            {
                                GameInstance.Game.SpriteTaskTransport2(taskID);
                            }
                        }
                    }
                    else
                    {
                        Global.Data.GameScene.AutoFindRoad(mapCode, pt, 0, ExtActionTypes.EXTACTION_NONE);
                        if (0 < buttonID && !complete && autoTransport)
                        {
                            if (Super.CanTransport(mapCode, true))
                            {
                                GameInstance.Game.SpriteTaskTransport2(taskID);
                            }
                        }
                    }
                }
            }
        }

        //#########################################################################################################

        #endregion 自动寻路

        #region 未分类

        //#########################################################################################################
        //打开外部的网页窗口

        public static void ExternalNavigateURL(String url)
        {
            try
            {
                if (!string.IsNullOrEmpty(url))
                {

                }
            }
            catch (Exception e)
            {
                MUDebug.LogException(e);
            }
        }

        //#########################################################################################################

        //#########################################################################################################
        //打开充值窗口

        public static void OpenChongZhiHtmlWindow()
        {
            Super.ExternalNavigateURL(Super.GetChongZhiURL());
        }
        public static String GetChongZhiURL()
        {
            return Super.GetJSurl(1);
        }

        //#########################################################################################################

        //#########################################################################################################
        //打开沉迷认证窗口

        public static String GetFangChenMiURL()
        {
            return Super.GetJSurl(5);
        }

        //#########################################################################################################

        //#########################################################################################################
        //打开官网窗口

        public static void OpenGuanWangHtmlWindow()
        {
            Super.ExternalNavigateURL(Super.GetGuwanWangURL());
        }
        public static String GetGuwanWangURL()
        {
            return Super.GetJSurl(2);
        }

        //#########################################################################################################

        //#########################################################################################################
        //打开论坛窗口

        public static void OpenLunTanHtmlWindow()
        {
            Super.ExternalNavigateURL(Super.GetLunTanURL());
        }
        public static String GetLunTanURL()
        {
            return Super.GetJSurl(3);
        }

        //#########################################################################################################

        //#########################################################################################################
        //打开论坛窗口

        public static void OpenGMHtmlWindow()
        {
            Super.ExternalNavigateURL(Super.GetGMURL());
        }
        public static String GetGMURL()
        {
            return Super.GetJSurl(4);
        }

        //#########################################################################################################		

        //#########################################################################################################
        //个人信息队列

        public static void AddPersonalHintText(GameInfoTextItem gameInfoTextItem)
        {
            while (Super.GData.PersonalTextItemList.Count >= 100)
            {
                Super.GData.PersonalTextItemList.RemoveRange(0, 1);
            }
            Super.GData.PersonalTextItemList.Add(gameInfoTextItem.TextMsg);
        }

        //#########################################################################################################

        //#########################################################################################################
        //物品过期时间转换

        public static String FormatGoodsOverTime(String dateTime)
        {
            if (string.IsNullOrEmpty(dateTime))
            {
                return "";
            }
            string[] fields = dateTime.Split(' ');
            if (fields.Length != 2)
            {
                return "";
            }
            string[] fields1 = fields[0].Split('-');
            if (fields1.Length != 3)
            {
                return "";
            }
            string[] fields2 = fields[1].Split(':');
            if (fields2.Length != 3)
            {
                return "";
            }
            return StringUtil.substitute(Global.GetLang("{0}年{1}月{2}日 {3}时{4}分{5}秒"), fields1[0], fields1[1], fields1[2], fields2[0], fields2[1], fields2[2]);
        }

        //#########################################################################################################

        //#########################################################################################################
        //杨公宝库管理

        public static GoodsData GetYangGongBKGoodsDataByID(int goodsDbID)
        {
            if (null == Super.GData.YangGongGoodsDataList)
            {
                return null;
            }
            for (int i = 0; i < Super.GData.YangGongGoodsDataList.Count; i++)
            {
                if (Super.GData.YangGongGoodsDataList[i].Id == goodsDbID)
                {
                    return Super.GData.YangGongGoodsDataList[i];
                }
            }
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################
        //地图传送

        public static bool CanTransport(int mapCode, bool allowThisMap = false, bool forceTransGoods = true)
        {
            bool stalling = Global.Data.GameScene.IsInStalling();
            if (stalling)
            {
                return false;
            }
            if (Global.IsAutoFighting())
            {
                Super.HintEndAutoFight();
            }
            if (!allowThisMap)
            {
                if (Global.Data.roleData.MapCode == mapCode)
                {
                    GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("已经在要传送的地图中了")));
                    return false;
                }
            }
            if (Global.Data.roleData.MapCode == Global.GetLaoFangMapCode())
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("牢房中无法使用传送功能")));
                return false;
            }
            if (Global.IsBattleMap())
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("阵营战中无法使用传送功能")));
                return false;
            }
            if (2 != Global.Data.roleData.MapCode) //如果不是扬州城
            {
                if (Global.GetSystemParamIntByName("HuangChengMapCode") == Global.Data.roleData.MapCode)
                {
                    GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("皇城地图中无法使用传送功能")));
                    return false;
                }
                else
                {
                    if (Global.GetLingDiIDByMapCode2(Global.Data.roleData.MapCode) > 0)
                    {
                        GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("领地地图中无法使用传送功能")));
                        return false;
                    }
                }
            }

            if (!forceTransGoods)
            {
                return true;
            }

            if (Global.ProcessMonthVIP() > 0.0)
            {
                return true;
            }
            if (null != Global.GetGoodsDataByID(Global.MapTransGoodsID))
            {
                return true;
            }
            if (null != Global.GetGoodsDataByID(Global.MapTransGoodsID2))
            {
                return true;
            }
            return false;
        }

        //#########################################################################################################

        //#########################################################################################################
        //对于位图执行转换

        public static BitmapData ConvertBitmapDataByGrid9(BitmapData bmd, double newWidth, double newHeight, double offsetX, double offsetY)
        {
            return null;
        }

        //#########################################################################################################

        //#########################################################################################################
        //背包物品定位提示

        private static List<HintParcelGoods> HintParcelGoodsPosList = new List<HintParcelGoods>();

        //添加一个提示到队列中
        public static void AddHintParcelGoodsPos(int goodsID, int level, int quality)
        {
            HintParcelGoods obj = new HintParcelGoods();
            obj.goodsID = goodsID;
            obj.level = level;
            obj.quality = quality;

            HintParcelGoodsPosList.Add(obj);
        }

        //处理背包中的提示
        public static void ProcessHintParcelGoodsPos(GChildWindow parcelWin, ParcelPart parcelPart)
        {
            if (null == parcelWin || null == parcelPart)
            {
                return;
            }

            if (HintParcelGoodsPosList.Count <= 0)
            {
                return;
            }

            HintParcelGoods obj = HintParcelGoodsPosList[0];
            HintParcelGoodsPosList.RemoveAt(0);

            if (VisibilitySL.Visible != parcelWin.Visibility)
            {
                return;
            }

            parcelPart.AddHintGoodsPos(obj);
        }


        ///////////////////////////////////////////////////////////////////////////////////////////////////
        ///根据物品所有者获取物品的对象

        ///通过物品所有者 和 物品数据库id 返回物品对象，可能返回一个傀儡物品[借助goodsID]或者null
        public static GoodsData GetShowGoodsDataBy(int goodsDbID, int goodsOwner, int goodsID)
        {
            GoodsData goodsData = null;

            if (goodsDbID == -1)
            {
                goodsData = null;
            }
            else
            {
                if (goodsOwner == (int)(GoodsOwnerTypes.SelfBag) || goodsOwner == (int)(GoodsOwnerTypes.SelfBagNoMenu))
                {
                    goodsData = Global.GetGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.OtherRole))
                {
                    goodsData = Super.FindOtherRoleGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.FallGoods))
                {
                    goodsData = Super.GetFallGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.Exchange))
                {
                    goodsData = Super.GetExchangeGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.SelfStall))
                {
                    goodsData = Super.GetStallGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.OtherStall))
                {
                    goodsData = Super.GetOtherStallGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.SelfPet))
                {
                    goodsData = Global.GetPortableGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.GoodsPack))
                {
                    goodsData = Global.GetPackGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.SelfOnSale))
                {
                    goodsData = Global.GetSaleGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.OtherOnSale))
                {
                    goodsData = Global.GetOtherSaleGoodsDataByDbID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.AllOthersOnSale))
                {
                    SaleGoodsData saleGoodsData = Super.GetSaleGoodsDataByDbID(goodsDbID);
                    if (null != saleGoodsData)
                    {
                        goodsData = saleGoodsData.SalingGoodsData;
                    }
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.WaBaoGoods))
                {
                    goodsData = Global.Data.WaBaoGoodsData;
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.SysGifts))
                {
                    goodsData = Global.GetGiftGoodsDataByID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.UpgradeEquip))
                {
                    goodsData = Super.GData.UpgradeEquipGoodsData;
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.OtherRole2))
                {
                    goodsData = Super.FindOtherRoleGoodsDataByDbID2(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.ViewTaskInfo))
                {
                    goodsData = Super.GetViewTaskInfoGoodsData(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.YangGongBK))
                {
                    goodsData = Super.GetYangGongBKGoodsDataByID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.QuickEnchance))
                {
                    goodsData = Super.GData.QuickEnchanceEquipGoodsData;
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.QuickForge))
                {
                    goodsData = Super.GData.QuickForgeEquipGoodsData;
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.ChatGoods))
                {
                    goodsData = Super.GData.CurrentChatGoodsData;
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.EmailFujian))
                {
                    goodsData = Global.GetEmailGoodsDataByID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.NPCSale))
                {
                    goodsData = Global.GetNpcSaleGoodsDataByID(goodsDbID);
                }
                else if (goodsOwner == (int)(GoodsOwnerTypes.BaoKuJiangLi))
                {
                    goodsData = Global.GetBaoKuJiangLiGoodsDataByID(goodsDbID);
                }
            }

            if (null == goodsData)
            {
                //返回一个傀儡物品id用于显示用，如果返回null，就别显示tips了
                goodsData = Global.GetDummyGoodsDataMu((int)(goodsID));
            }

            return goodsData;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////
        ///快捷栏中【快捷键或者点击鼠标使用物品或者技能】

        public static void UseSkillByID(int skillID)
        {
            if (ConfigMagicInfos.CanSkillByBangDing(skillID, false))
            {
                Global.Data.GameScene.SetDefaultSkillID(skillID);
            }
            //判断在指定的地图上是否可以使用指定的Magic
            if (Global.CanMapUseMagic(Global.CurrentMapData, skillID))
            {
                //trace("UseSkillByID");
                if (ConfigMagicInfos.GetSkillQueueTicks(skillID) <= 0) //非buffer技能
                {
                    if (!Global.SkillCoolDown(skillID))
                    {
                        if (!Global.IsAutoFighting())
                        {
                            if (Global.Data.GameScene.CanDoMagicAttackNow()) ///防止连续输入
                            {
                                //trace("Global.Data.GameScene.DoMagicAttack(skillID, null, false);");
                                if (0 == ConfigMagicInfos.GetSkillActionType(skillID)) //近战技能
                                {
                                    Global.Data.GameScene.DoAttack();
                                }
                                else
                                {
                                    Global.Data.GameScene.DoMagicAttack(skillID, new Point(-1, -1), null, false);
                                }
                            }
                        }
                        else
                        {
                            //if (Global.Data.GameScene.CanDoMagicAttackNow()) ///防止连续输入
                            {
                                Global.Data.GameScene.DoMagicAttack(skillID, new Point(-1, -1), null, true);
                            }
                        }
                    }
                    else
                    {
                        GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang(" [{0}]技能仍在CD中，请稍后再使用"), ConfigMagicInfos.GetSkillNameByID(skillID)), (int)HintErrCodeTypes.None);
                    }
                }
                else
                {
                    if (!Global.SkillCoolDown(skillID))
                    {
                        Global.Data.GameScene.SetTempWaitingSkillID(skillID);
                    }
                    else
                    {
                        GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang(" [{0}]技能仍在CD中，请稍后再使用"), ConfigMagicInfos.GetSkillNameByID(skillID)), (int)HintErrCodeTypes.None);
                    }
                }
            }
            else
            {
                GGameInfocs.AddGameInfoMessage(GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, StringUtil.substitute(Global.GetLang("本地图禁止使用[{0}]技能"), ConfigMagicInfos.GetSkillNameByID(skillID)), (int)HintErrCodeTypes.None);
            }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////

        //获取JS代码中的URL地址
        public static String GetJSurl(int index)
        {
            String hostURL = "";
            //hostURL = ExternalInterface.call("geturl", index);
            return hostURL;
        }

        public static Point GetObjectCenterPos(GameObject go)
        {
            //return new Point(go.transform.position.x, go.transform.z);
            return new Point(0, 0);
        }

        public static void SetLeadTargetPos(int mapCode, Vector3 pos)
        {
            if (pos.x >= 0 && pos.z > 0)
            {
                //MUDebug.Log(string.Format("设置光圈: MapCode[{0}], pos[{1}]", mapCode, pos.ToString()));
                GData.LeadInfo.MapCode = mapCode;
                GData.LeadInfo.TaskTargetPos = pos;
            }
            else
            {
                GData.LeadInfo.MapCode = -1;
            }
        }

        #endregion 未分类

        #region 初始化参数相关

        /// <summary>
        /// 初始化下载配置文件
        /// </summary>
        public static void InitDonwloadConfig()
        {
            GameObject loadConfig = new GameObject("LoadConfig");
            loadConfig.AddComponent<LoadConfig>();
        }

        /// <summary>
        /// 模拟Web端，初始化参数
        /// </summary>
        public static void InitRootParams()
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();

            // 设置缺省的平台用户的ID
            dict["uid"] = "-1";
            Debug.LogError("InitRootParams Before Debug Mode Load /serverip.txt\n");
            //dict["serverip"] = "192.168.1.248";
            if (true)//Application.isEditor || Application.platform == RuntimePlatform.WindowsPlayer)
            {
                string localIP = Network.player.ipAddress;
                MUDebug.Log("local ip=" + localIP);

                if (localIP == "192.168.0.66" || localIP == "192.168.0.145" || localIP == "192.168.1.248" || localIP == "192.168.1.166")
                {
                    dict["serverip"] = "192.168.0.145";
                    //dict["serverip"] = "192.168.0.222";
                }
//#if UNITY_EDITOR

                if (File.Exists(Application.streamingAssetsPath + "/gmlogininfo.txt"))//GM登录某个玩家的账号
                {
                    string[] info = File.ReadAllLines(Application.streamingAssetsPath + "/gmlogininfo.txt");

                    dict["serverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverip");
                    dict["voiceserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "voiceserverip");
                    dict["pushserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "pushserverip");
                    dict["serverlisturl"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverlisturl");
                    dict["serverlisturlsecond"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverlisturlsecond");

                    dict["verifyaccountserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "verifyaccountserverip");
                    dict["payserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "payserverip");

                    dict["serverid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverid");
                    dict["gameid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "gameid");
                    dict["login"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "login");
                    dict["lang"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "lang");

                    dict["isolateresid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "isolateresid");

                    dict["roleNum"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "roleNum");

                    dict["deleteRole"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "deleteRole");

                    dict["loginport"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "loginport");
                    dict["gameport"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "gameport");

                    //此部分，读取的是安装包中的内容
                    dict["resver"] = Global.ReadXmlConfigStr(Global.VersionXml, "Resource", "VerCode");
                    dict["resverText"] = Global.ReadXmlConfigStr(Global.VersionXml, "Resource", "VerText");
                    dict["exever"] = Global.ReadXmlConfigStr(Global.VersionXml, "Application", "VerCode");
                    dict["exeverText"] = Global.ReadXmlConfigStr(Global.VersionXml, "Application", "VerText");

                    dict["uid"] = info[0];
                    dict["n"] = info[1];
                    DateTime timeStamp = new DateTime(1970, 1, 1);
                    long a = (DateTime.Now.Ticks - timeStamp.Ticks) / 10000000 - 8 * 60 * 60;
                    dict["t"] = string.Format("{0}", (int)a);
                    dict["cm"] = "1";
                    dict["token"] = MD5Helper.get_md5_string(dict["uid"] + dict["n"] + dict["t"] + dict["cm"] + info[2]);
                }
                else if (File.Exists(Application.streamingAssetsPath + "/serverip.txt"))
                {
                    Debug.LogError("Debug Mode Load /serverip.txt\n");
                    string serveripConfig = File.ReadAllText(Application.streamingAssetsPath + "/serverip.txt");
                    string[] serveripConfigArray = string.IsNullOrEmpty(serveripConfig) ? new string[0] : serveripConfig.Split(',');
                    dict["serverip"] = serveripConfigArray.Length > 0 ? serveripConfigArray[0] : "192.168.0.206";
                    dict["voiceserverip"] = "192.168.0.205:8080/test/audiochat/";
                    dict["pushserverip"] = "192.168.0.205:8080/test/audiochat/";
                    dict["serverlisturl"] = "192.168.0.205:8080/UCLogin/GetServerList.aspx";
                    dict["serverlisturlsecond"] = "192.168.0.205:8080/UCLogin/GetServerList.aspx";
                    dict["verifyaccountserverip"] = "localhost:1131/";
                    dict["payserverip"] = "localhost:1131/";
                    dict["login"] = "0";
                    dict["gameid"] = "local";
                    dict["lang"] = "0";
                    dict["isolateresid"] = "1";
                    dict["roleNum"] = "0";
                    dict["deleteRole"] = "1";

                    dict["loginport"] = serveripConfigArray.Length > 2 ? serveripConfigArray[2] : "4402";
                    dict["gameport"] = serveripConfigArray.Length > 1 ? serveripConfigArray[1] : "4403";
                }
//#endif
                else
                {
                    Debug.LogError(" no /serverip.txt \n");
                    //dict["serverip"] = "127.0.0.1";
                    dict["serverip"] = "172.13.2.105"; //Style 2016
                    //dict["serverip"] = "192.168.0.66";
                    dict["voiceserverip"] = "192.168.0.205:8080/test/audiochat/";
                    dict["pushserverip"] = "192.168.0.205:8080/test/audiochat/";
                    dict["serverlisturl"] = "192.168.0.205:8080/UCLogin/GetServerList.aspx";
                    dict["serverlisturlsecond"] = "192.168.0.205:8080/UCLogin/GetServerList.aspx";
                    dict["verifyaccountserverip"] = "localhost:1131/";
                    dict["payserverip"] = "localhost:1131/";
                    dict["login"] = "0";
                    dict["gameid"] = "local";
                    dict["lang"] = "0";
                    dict["isolateresid"] = "1";
                    dict["roleNum"] = "0";
                    dict["deleteRole"] = "1";
                    dict["loginport"] = "4402";
                    dict["gameport"] = "4403";
                }
            }
            else
            {
                dict["serverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverip");
                dict["voiceserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "voiceserverip");
                dict["pushserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "pushserverip");
                dict["serverlisturl"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverlisturl");
                dict["serverlisturlsecond"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverlisturlsecond");

                dict["verifyaccountserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "verifyaccountserverip");
                dict["payserverip"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "payserverip");

                dict["serverid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "serverid");
                dict["gameid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "gameid");
                dict["login"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "login");
                dict["lang"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "lang");

                dict["isolateresid"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "isolateresid");

                dict["roleNum"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "roleNum");

                dict["deleteRole"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "deleteRole");

                dict["loginport"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "loginport");
                dict["gameport"] = Global.ReadXmlConfigStr(Global.NetVersionXML, "Info", "gameport");

                //此部分，读取的是安装包中的内容
                dict["resver"] = Global.ReadXmlConfigStr(Global.VersionXml, "Resource", "VerCode");
                dict["resverText"] = Global.ReadXmlConfigStr(Global.VersionXml, "Resource", "VerText");
                dict["exever"] = Global.ReadXmlConfigStr(Global.VersionXml, "Application", "VerCode");
                dict["exeverText"] = Global.ReadXmlConfigStr(Global.VersionXml, "Application", "VerText");
            }
            Global.RootParams = dict;
        }

        /// <summary>
        /// 初始化全局的参数
        /// </summary>
        public static void InitParams()
        {
            String country = Super.GetXapParamByName("country", "");
            if ("korea" == country)
            {
                MyDateTime.Before1970Ticks += (60L * 60L * 1000L * 10000L);
            }
            else if ("vietnam" == country)
            {
                MyDateTime.Before1970Ticks -= (60L * 60L * 1000L * 10000L);
            }

            //初始化游戏分区编号
            //GameInstance.Game.CurrentSession.GameServerID = Global.SafeConvertToInt32(Super.GetXapParamByName("serverid", "1"));

            //游戏的平台代码
            GameInstance.Game.CurrentSession.GamePingTaiID = Super.GetXapParamByName("gameid", "local");

            //是否下载语言包
            Context.GameLang = Global.SafeConvertToInt32(Super.GetXapParamByName("lang", "0"));

            //分区资源的ID
            Context.IsolateResID = Super.GetXapParamByName("isolateresid", "1");

            //运营平台名称(唯一)
            Context.PingTaiName = Super.GetXapParamByName("pingtainame", "local");

            //设置是否启用腾讯的统一防火墙的功能
            ProtocolTypes.EnableTengXunTGW = ("TengXun" == Global.PingTaiName);

            //获取外部设置的资源地址参数
            Context.XapAbsoluteWebPath = Super.GetXapParamByName("XapWebPath", "");

            //判断是否禁止汇报URL
            //if (Super.GetXapParamByName("reportstat", "1") == "1")
            {
                Context.ReportStatURL = Super.GetXapParamByName("serverip", "");
            }

            //语音服务器地址
            Global.ChatVoiceServerURL = Super.GetXapParamByName("voiceserverip", "");

            // 帐号验证服务器地址
            Global.VerifyAccountServerURL = Super.GetXapParamByName("verifyaccountserverip", "");
            Global.PayServerURL = Super.GetXapParamByName("payserverip", "");

            //服务器列表地址
            Global.ServerListURL = Super.GetXapParamByName("serverlisturl", "");

            //服务器列表地址 第二
            Global.ServerListURLSecond = Super.GetXapParamByName("serverlisturlsecond", "");

            //推送服务器地址
            Global.PushServerURL = Super.GetXapParamByName("pushserverip", "");

            //申诉请求的URL
            Global.AppealURL = Global.VerifyAccountServerURL + "Appeal.aspx";
        }

        /// <summary>
        /// 初始化版本号
        /// </summary>
        public static void InitVersions()
        {
            //先注释掉，修改为在程序中初始化了
            //if (null != Global.RootParams)
            //{
            //    Context.MainExeVer = Super.GetXapParamByName("exever", "1");
            //    Context.ResSwfVer = Super.GetXapParamByName("resver", "1");
            //}
        }

        #endregion 初始化参数相关

        #region 创建/选择角色声音播放

        /// <summary>
        /// 选择角色时播放声音
        /// </summary>
        /// <param name="fileName"></param>
        public static void PlaySelectRoleSound(GameObject go, string fileName, float delaySecs = 0.0f)
        {
            String playingMusicFile = StringUtil.substitute("Audio/RoleSelect/{0}", fileName);
            NetAudioSource nas = go.GetComponent<NetAudioSource>();
            if (null == nas)
            {
                nas = go.AddComponent<NetAudioSource>();
                nas.DelayPlaySecs = delaySecs;
                nas.PlayAudio(playingMusicFile, false);
            }
            else
            {
                nas.PlayAgain();
            }
        }

        public static void PlayGoodsSound(int goodsID)
        {
#if true
            GameObject go = GameObject.Find("MyNetAudioSource");
            if (null == go)
            {
                go = new GameObject("MyNetAudioSource", typeof(AudioSource));
            }
            NetAudioSource source = go.GetComponent<NetAudioSource>();
            if (null == source)
            {
                source = go.AddComponent<NetAudioSource>();
                go.GetComponent<AudioSource>().spatialBlend = 0;
            }

            //播放获得物品音效
            string GetSound = Global.GetGoodsGetSoundByID(goodsID);
            if (!string.IsNullOrEmpty(GetSound))
            {
                if (Global.Data.SysSetting.CloseGameAudio)
                {
                    source.StopPlay();
                }
                else
                {
                    source.PlayAudio(string.Format("Audio/Goods/{0}", GetSound));
                }
            }
#endif
        }

        public static void PlayYinDaoSound(string musicName, bool force = true, bool loop = false)
        {
#if true
            //如果音效选项关闭,则不播放,不要用这个函数循环播放声音
            if (Global.Data.SysSetting.CloseGameAudio)
            {
                return;
            }

            GameObject go = GameObject.Find("YinDaoNetAudioSource");
            if (null == go)
            {
                go = new GameObject("YinDaoNetAudioSource", typeof(AudioSource));
            }
            NetAudioSource source = go.GetComponent<NetAudioSource>();
            if (null == source)
            {
                source = go.AddComponent<NetAudioSource>();
                go.GetComponent<AudioSource>().spatialBlend = 0;
            }

            //播放获得物品音效
            source.PlayAudio(string.Format("Audio/YinDao/{0}", musicName), loop, force);
            //Global.PlaySoundAudio(string.Format("Audio/Goods/{0}", GetSound));
#endif
        }

        #endregion 创建/选择角色声音播放

        #region 防止进程时间加速

        /// <summary>
        /// 处理防止本地进程时间加速的对象
        /// </summary>
        public static CheatMgr CheatManager = new CheatMgr();

        #endregion 防止进程时间加速

        #region 引导产出窗口
        public static GChildWindow ShowGuideWindow(BaodianGuidePart.GuideType errType, DPSelectedItemEventHandler callback, string customLinkIDs = "", string customTitle = "")
        {
            return PlayZone.GlobalPlayZone.ShowBaodianGuideWindow(errType, callback, customLinkIDs, customTitle);
        }

        /// <summary>
        /// 消耗的道具不够时弹出的引导提示
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int ShowGoodsGuide(int goodsID, DPSelectedItemEventHandler callback = null)
        {
            if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Mayajingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedMayajingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Chuangzaojingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedChuangzaojingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Linghunjingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedLinghunjingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Shengmingjingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedShengmingjingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Shenyoujingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedShenyoujingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Zhufujingshi)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedZhufujingshi, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Huozhong)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedHuozhong, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Yumao)
            {
                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedYumao, callback);
            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.Zaizaojingshi)
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedZaizaojingshi, callback);

            }
            else if (goodsID == (int)BaodianGuidePart.GuideGoodsID.LuoKeZhiYu)
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedZhuLing, callback);

            }
            else if (goodsID == 2100)
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedMoFaShuiJing, callback);

            }
            else if (goodsID == 2101)
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedMoFaJingYanShu, callback);

            }
            else if (goodsID == 2102)
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedMoFaSaoZhou, callback);

            }
            else if ((goodsID >= (int)BaodianGuidePart.GuideGoodsID.ShangguSuipianFrom) && (goodsID <= (int)BaodianGuidePart.GuideGoodsID.ShangguSuipianTo))
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedShangguSuipian , callback);

            }
            else if ((goodsID >= (int)BaodianGuidePart.GuideGoodsID.YuanguSuipianFrom) && (goodsID <= (int)BaodianGuidePart.GuideGoodsID.YuanguSuipianTo))
            {

                Super.ShowGuideWindow(BaodianGuidePart.GuideType.NeedYuanguSuipian , callback);

            }
            else
            {
                return 1;
            }
            return 0;
        }
        #endregion 引导产出窗口

        #region 公告界面
        public static void ShowNoticeWindow(HSGameEngine.GameEngine.SilverLight.Canvas root)
        {
            return;

            //GonggaoPart gonggao = U3DUtils.NEW<GonggaoPart>();
            //gonggao.DPSelectedItem = (s, e) =>
            //{
            //    if (e.IDType == -10)
            //    {
            //        GameObject.Destroy(gonggao.gameObject);
            //    }
            //};
            //root.Children.Add(gonggao);
        }
        #endregion 公告界面

        #region 切换显示窗口和主UI

        public static void SwitchSelfWindowAndMainUI(GameObject obj, bool state)
        {
            if (null == obj)
                return;

            if (PlayZone.GlobalPlayZone != null)
            {
                PlayZone.GlobalPlayZone.OnSwitchSelfWindowAndMainUI(obj , state);
            }

            obj.SetActive(state);
            Global.Joystick.gameObject.SetActive(!state);
            HUDTextRoot.go.SetActive(!state);

        }

        #endregion 切换显示窗口和主UI

        #region 各种活动中需要加载item中的物品

        /// <summary>
        /// 普通物品+分职业物品
        /// </summary>
        /// <param name="goodsIDs"></param>
        /// <param name="ItemCollection"></param>
        public static void LoadGoodsList(string goodsIDs, ObservableCollection ItemCollection)
        {
            ItemCollection.Clear();
            //道具奖励
            if (string.IsNullOrEmpty(goodsIDs))
            {
                return;
            }
            else
            {
                string[] fields = goodsIDs.Split('@');
                if (fields.Length == 1)
                {
                    LoadOtherJiangLiGoodsList(goodsIDs, ItemCollection);
                }
                else
                {
                    LoadOtherJiangLiGoodsList(fields[0], ItemCollection);
                    LoadOtherJiangLiGoodsList(fields[1], ItemCollection, true);
                }

            }
        }

        public static void LoadOtherJiangLiGoodsList(string goodsStr, ObservableCollection ItemCollection, bool isOcc = false)
        {
            String str = StringUtil.trim(goodsStr);
            if (string.IsNullOrEmpty(str))
            {
                return;
            }
            string[] fields = str.Split('|');
            if (fields.Length <= 0)
            {
                return;
            }

            string[] goods = null;
            GoodsData gd = null;

            //自己职业
            int roleOcc = Global.CalcOriginalOccupationID(Global.Data.roleData.Occupation);

            for (int i = 0; i < fields.Length; i++)
            {
                goods = fields[i].Split(',');
                if (goods.Length != 7)
                {
                    continue;
                }
                else
                {
                    if (isOcc)
                    {
                        if (MUJieripartChongzhiKingItem.IsTongGuo(goods[0], roleOcc))
                        {
                            continue;
                        }
                    }
                    gd = Global.GetDummyGoodsDataMu(
                        Convert.ToInt32(goods[0]),
                        Convert.ToInt32(goods[3]),
                        Convert.ToInt32(goods[4]),
                        Convert.ToInt32(goods[6]),
                        Convert.ToInt32(goods[5]),
                        Convert.ToInt32(goods[2]),
                        Convert.ToInt32(goods[1]));

                    AddGoodsIcon(gd, ItemCollection);
                }
            }

            ItemCollection.DelayUpdate();
        }

        /// <summary>
        /// 带有时效性物品的
        /// </summary>
        /// <param name="goodsStr"></param>
        /// <param name="ItemCollection"></param>
        /// <param name="_effect"></param>
        public static void LoadOtherGoodsList(string goodsStr, ObservableCollection ItemCollection, string _effect)
        {
            String str = StringUtil.trim(goodsStr);
            if (string.IsNullOrEmpty(str))
            {
                return;
            }
            string[] fields = str.Split('|');
            if (fields.Length <= 0)
            {
                return;
            }
            string[] goods = null;
            string[] effects = null;
            string[] si = null;
            GoodsData gd = null;

            for (int i = 0; i < fields.Length; i++)
            {
                goods = fields[i].Split(',');

                gd = Global.GetDummyGoodsDataMu(
                    Convert.ToInt32(goods[0]),
                    Convert.ToInt32(goods[3]),
                    Convert.ToInt32(goods[4]),
                    Convert.ToInt32(goods[6]),
                    Convert.ToInt32(goods[5]),
                    Convert.ToInt32(goods[2]),
                    Convert.ToInt32(goods[1]));
                if (!string.IsNullOrEmpty(_effect))
                {
                    effects = _effect.Split('|');
                    si = effects[i].Split(',');
                    gd.Endtime = si.Length == 3 ? si[2] : si[1];
                }
                AddGoodsIcon(gd, ItemCollection);

            }

            ItemCollection.DelayUpdate();
        }

        public static void AddGoodsIcon(GoodsData gd, ObservableCollection ItemCollection, Boolean grayShow = false)
        {
            GoodVO goodVO = ConfigGoods.GetGoodsXmlNodeByID(gd.GoodsID);
            if (null != goodVO)
            {
                String bitmapImageURL = Super.GetGoodsImageURLFromIconCode(Super.GetIconCode(goodVO), "NetImages/GameRes/");
                String bakImageURL = "bagGrid4_bak";
                GGoodIcon icon = U3DUtils.NEW<GGoodIcon>();//(IconTypes.Composite)
                {
                    icon.Width = 78;
                    icon.Height = 78;
                    icon.BackSpriteName0 = bakImageURL;
                    icon.TipType = (int)TipTypes.GoodsText;
                    icon.ItemCategory = goodVO.Categoriy;
                    icon.ItemCode = gd.GoodsID;
                    icon.ItemObject = gd;
                    icon.BoxTypes = (int)ListBoxTypes.None;
                }
                if (!grayShow)
                {
                    icon.BodyURL = new ImageURL(bitmapImageURL);
                }
                else
                {
                    icon.BodyURL = new ImageURL(bitmapImageURL, true);
                }

                Boolean canUseGoods = Global.CanUseGoods(gd.GoodsID, false);
                Super.InitGoodsGIcon(icon, gd, canUseGoods);

                ItemCollection.Add(icon);

                icon.gameObject.AddComponent<UIDragPanelContents>();
                //必须放在ItemCollection.Add之后
                icon.addEventListener(MouseEvent.CLICK, (s) =>
                {
                    GGoodIcon _icon = (s.target.SafeGetComponent<GGoodIcon>() as GGoodIcon);
                    if (null == _icon)
                    {
                        return;
                    }
                    GoodsData _gd = icon.ItemObject as GoodsData;
                    if (null == _gd)
                    {
                        return;
                    }
                    GTipServiceEx.ShowTip(icon, TipTypes.GoodsText, GoodsOwnerTypes.SysGifts, _gd);
                });
            }
        }

        #endregion

        #region ui动画相关



        public static void PlayAnim(GameObject anim)
        {

            if (null == anim)

                return;

            anim.gameObject.SetActive(false);

            anim.gameObject.SetActive(true);

        }



        public static void ActiveGameObject(GameObject obj, bool state)
        {

            if (null == obj)

                return;

            obj.gameObject.SetActive(state);

        }



        #endregion ui动画相关

        #region 二级密码验证窗口(需要在未正式进入游戏之前使用)

        /// <summary>
        /// 关闭二级密码验证窗口
        /// </summary>
        public static void CloseVerifySecondPasswordWindow()
        {
            if (VerifySecondPasswordWindow != null)
            {
                MainWindowRoot.Children.Remove(VerifySecondPasswordWindow);
                Super.CloseChildWindow(MainWindowRoot, VerifySecondPasswordWindow);
                VerifySecondPasswordWindow = null;
                if (VerifySecondPassowrdPart != null)
                {
                    VerifySecondPassowrdPart = null;
                }
                if (Global.VerifySuccess != null)
                {
                    Global.VerifySuccess = null;
                }
            }
        }

        /// <summary>
        /// 显示二级密码验证窗口
        /// </summary>
        public static void ShowVerifySecondPasswordWindow(int roleID)
        {
            VerifySecondPasswordWindow = U3DUtils.NEW<GChildWindow>();
            VerifySecondPasswordWindow.ModalType = ChildWindowModalType.TransBak;
            UIEventListener.Get(VerifySecondPasswordWindow.ModalBak).onClick = (go) => CloseVerifySecondPasswordWindow();

            InitChildWindow(VerifySecondPasswordWindow, Global.GetLang(""));
            MainWindowRoot.Children.Add(VerifySecondPasswordWindow);

            VerifySecondPasswordWindow.ChildWindowClose = (s, e) =>
            {
                CloseVerifySecondPasswordWindow();
                return true;
            };

            VerifySecondPassowrdPart = U3DUtils.NEW<VerifySecondPasswordPart>();
            VerifySecondPassowrdPart.VerifiedRoleID = roleID;
            VerifySecondPasswordWindow.Children.Add(VerifySecondPassowrdPart.gameObject);
        }
        #endregion

        #region 精灵回收提示
        /// <summary>
        /// 显示精灵回收提示
        /// </summary>
        /// <param name="Content">上方的描述文字</param>
        /// <param name="AwardDescribe">回收所得描述</param>
        /// <param name="money">回收说得</param>
        /// <param name="hander">回调</param>
        /// <param name="btnStr">按钮上的字</param>
        public static void ShowJingLingHuiShouMessageBox(string Content, string[] AwardDescribe,int [] money ,DPSelectedItemBoolEventHandler hander,string[] btnStr =null)
        {
            GChildWindow gw = U3DUtils.NEW<GChildWindow>();
            gw.ModalType = ChildWindowModalType.Translucent;
            InitChildWindow(gw, Global.GetLang(""));
            Super.GData.PlayZoneRoot.Children.Add(gw);
            UIEventListener.Get(gw.ModalBak).onClick = (e) =>
            {
                MainWindowRoot.Children.Remove(gw);
                Super.CloseChildWindow(MainWindowRoot, gw);
            };

            gw.ChildWindowClose = (x, e) => 
            {
                MainWindowRoot.Children.Remove(gw);
                Super.CloseChildWindow(MainWindowRoot, gw);
                return true;
            };
            JingLingHuiShouMessagePart m = U3DUtils.NEW<JingLingHuiShouMessagePart>();
            m.Contentlabel = Content;
            if (3 == AwardDescribe.Length)
            {
                m.AwardDescribe0 = AwardDescribe[0];
                m.AwardDescribe1 = AwardDescribe[1];
                m.AwardDescribe2 = AwardDescribe[2];
            }
            if (3 == money.Length)
            {
                m.Money0 = money[0];
                m.Money1 = money[1];
                m.Money2 = money[2];
            }
            if (null != btnStr)
            {
                if (2 == btnStr.Length)
                {
                    m.BtnSureStr = btnStr[0];
                    m.BtnCancleStr = btnStr[1];
                }
            }
            m.MessageBtnHander = (e, s) => 
            {
                
                if (s.ID == 0)
                {
                    if (null != hander)
                    {
                        hander(e,s);
                    }
                    //sure
                }
                else if(s.ID == 1)
                {
                    if (null != hander)
                    {
                        hander(e, s);
                    }
                    // cancle
                }
                else if (s.ID == 2)
                {
                    //colse
                }
                MainWindowRoot.Children.Remove(gw);
                Super.CloseChildWindow(MainWindowRoot, gw);
                return true;
            };
            gw.Children.Add(m.gameObject);
        }
        #endregion 精灵回收提示
        #region 检测数组里是否有需要的值

        public static bool CheckArrayHaveValue<T>( T[] array , T value)
        {
            if (null != array && 0 < array.Length)
            {
                for (int i = 0; i < array.Length; ++i)
                {
                    if (array[i].Equals(value))
                        return true;
                }
            }
            return false;
        }
        #endregion

        #region 属性
        public static void ShowProPerty(int type, string[] Content,DPSelectedItemEventHandler hander = null)
        {
            GChildWindow gw = U3DUtils.NEW<GChildWindow>();
            gw.ModalType = ChildWindowModalType.Translucent;
            InitChildWindow(gw, "ProPerty");
            Super.GData.PlayZoneRoot.Children.Add(gw);
          
            PropertyPart property = U3DUtils.NEW<PropertyPart>();
            if (0 == type)
            {
                if (null != Content && 2 <= Content.Length)
                {
                    property.SetTYpe(0);
                    property.SetFashionPropertyInf(Content[0],Content[1]);
                }  
            }
            else if (1 == type)
            {
                property.SetTYpe(1);
                property.SetPropertyInf(Content[0], Content[1]);
            }
            UIEventListener.Get(gw.ModalBak).onClick = (go) => 
            {
                GameObject.Destroy(property);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
            };
            gw.ChildWindowClose = (s, e) =>
            {
              
                GameObject.Destroy(property);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
                return true;
            };
            property.Hander = (e, s) => 
            {
                GameObject.Destroy(property);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
            };
            gw.Body.Add(property);
        }
        #endregion 属性

        #region Help
        public static void ShowHelpPart(string content0,string content1)
        {
            GChildWindow gw = U3DUtils.NEW<GChildWindow>();
            gw.ModalType = ChildWindowModalType.Translucent;
            InitChildWindow(gw, "HelpPart");
            Super.GData.PlayZoneRoot.Children.Add(gw);
            HelpPart help = U3DUtils.NEW<HelpPart>();
            gw.Body.Add(help);
            help.SetContent(content0, content1);
            UIEventListener.Get(gw.ModalBak).onClick = (go) =>
            {
                GameObject.Destroy(help);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
            };
            gw.ChildWindowClose = (s, e) =>
            {

                GameObject.Destroy(help);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
                return true;
            };
            help.ClseoHander = (e, s) =>
            {
                GameObject.Destroy(help);
                Super.CloseChildWindow(Super.GData.PlayZoneRoot.Children, gw);
            };
        }
        #endregion Help


        public static string ClearStringColor(string str)
        {
            string str_S = string.Empty;
            if (!string.IsNullOrEmpty(str))
            {
                bool Remove = false;
                for (int i = 0; i < str.Length; ++i)
                {
                    if ("{" == str[i].ToString())
                        Remove = true;
                    if ("}" == str[i].ToString())
                    {
                        Remove = false;
                        continue;
                    }
                    if(!Remove)
                        str_S += str[i].ToString();
                }
            }
            return str_S;
        }


       

    }

}
